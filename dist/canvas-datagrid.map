{"version":3,"sources":["webpack:///webpack/universalModuleDefinition","webpack:///canvas-datagrid.js","webpack:///webpack/bootstrap 84d1080793981de45952","webpack:///./lib/defaults.js","webpack:///./lib/main.js","webpack:///./lib/component.js","webpack:///./lib/draw.js","webpack:///./lib/events.js","webpack:///./lib/touch.js","webpack:///./lib/intf.js","webpack:///./lib/contextMenu.js","webpack:///./lib/dom.js","webpack:///./lib/publicMethods.js"],"names":["root","factory","exports","module","define","amd","self","this","modules","__webpack_require__","moduleId","installedModules","i","l","call","m","c","d","name","getter","o","Object","defineProperty","configurable","enumerable","get","n","__esModule","object","property","prototype","hasOwnProperty","p","s","__WEBPACK_AMD_DEFINE_ARRAY__","__WEBPACK_AMD_DEFINE_RESULT__","undefined","defaults","attributes","styles","apply","context","component","Grid","args","isComponent","isChildGrid","parentNode","test","nodeType","intf","eval","document","createElement","applyComponentStyle","hyphenateProperty","dehyphenateProperty","createGrid","forEach","shadowRoot","createShadowRoot","attachShadow","mode","init","Array","slice","arguments","window","HTMLElement","create","customElements","observedAttributes","getObservableAttributes","disconnectedCallback","attributeChangedCallback","connectedCallback","adoptedCallback","canvasDatagrid","require","tKeys","body","keys","argKey","indexOf","tKey","sKey","data","appendChild","getDefaultItem","base","item","filter","toLowerCase","typeMap","prop","replace","nextLetterCap","char","toUpperCase","cust","supressChangeAndDrawEvents","cStyle","getComputedStyle","tagName","canvas","defs","computedStyle","def","val","getPropertyValue","setStyleProperty","dispatchEvent","requestAnimationFrame","resize","style","strData","JSON","parse","e","Error","schema","strSchema","number","strNum","parseInt","isNaN","boolean","strBool","string","str","attrs","attr","push","connected","parentDOMNode","innerHTML","observe","attrName","oldVal","newVal","tfn","dataType","addEventListener","observer","MutationObserver","mutations","checkInnerHTML","checkStyle","mutation","attributeName","target","nodeName","addedNodes","length","type","characterData","childList","subtree","querySelectorAll","el","fillArray","low","high","step","x","drawPerfLine","w","h","y","perfArr","arrIndex","max","color","useAbs","r","canvasOffsetLeft","canvasOffsetTop","ctx","beginPath","moveTo","cx","cy","Math","abs","lineTo","strokeStyle","stroke","drawOnAllImagesLoaded","loaded","htmlImageCache","html","complete","cachedImagesDrawn","draw","drawHtml","cell","img","v","formattedValue","cacheKey","toString","rowIndex","columnIndex","height","width","drawImage","Image","onload","src","btoa","drawOrderByArrow","mt","columnHeaderOrderByArrowMarginTop","scale","ml","columnHeaderOrderByArrowMarginLeft","mr","columnHeaderOrderByArrowMarginRight","aw","columnHeaderOrderByArrowWidth","ah","columnHeaderOrderByArrowHeight","fillStyle","columnHeaderOrderByArrowColor","columnHeaderOrderByArrowBorderColor","orderDirection","fill","drawTreeArrow","treeArrowMarginTop","treeArrowMarginRight","treeArrowMarginLeft","treeArrowWidth","treeArrowHeight","treeArrowColor","treeArrowBorderColor","openChildren","radiusRect","radius","b","quadraticCurveTo","fillRect","strokeRect","fillText","text","fillCircle","arc","PI","strokeCircle","clipFrozenArea","lastFrozenColumnPixel","lastFrozenRowPixel","clip","fillHandle","selectionHandleType","strokeHandle","addselectionHandle","pos","hw","selectionHandleSize","tr","br","tl","bl","addBorderLine","t","wrapText","splitChar","lines","value","calculatedLineHeight","word","elWidth","plWidth","clippedVal","previousLine","words","split","textHeight","wrap","cellWhiteSpace","et","ellipsisText","line","cHeight","paddedHeight","measureText","measure","paddedWidth","splice","originText","stepLength","direction","substr","drawText","fontHeight","lineHeight","vPos","hPos","paddingLeft","orderByArrowWidth","horizontalAlignment","paddingRight","verticalAlignment","paddingBottom","lineSpacing","offsetLeft","offsetTop","debug","active","font","debugFont","debugColor","stringify","pw","idx","idx_ord","sortColumnIndex","map","getFrozenColumnsWidth","column","getSchema","min","frozenColumn","hiddenFrozenColumnCount","hidden","getColummnWidth","perfCounters","drawCount","perfWindowSize","entityCount","scrollDebugCounters","touchPPSCounters","internal","createHandlesOverlayArray","allowMovingSelection","mobile","selectionBorderTop","selectionBorderRight","selectionHandles","selectionHandle","selectionBorderLeft","selectionBorderBottom","selectionHandleBehavior","createBorderOverlayArray","drawArray","propPrefix","offsetPoint","selectionBorder","isRowHeader","selections","isHeader","drawCell","rowOrderIndex","header","headerIndex","columnOrderIndex","cellGridAttributes","cellStyle","isCorner","isColumnHeader","selected","hovered","hovers","activeCell","isColumnHeaderCellCap","rawValue","isGrid","activeHeader","orders","rows","columns","f","formatters","orderByArrowSize","treeArrowSize","cellWidth","sizes","ev","row","cellBorderWidth","visibleRows","paddingTop","whiteSpace","cellLineHeight","cellLineSpacing","scrollTop","scrollBox","scrollLeft","cellHeight","offsetWidth","offsetHeight","offsetParent","rowOpen","sortRowIndex","isNormal","gridId","parentGrid","title","userHeight","rowHeight","userWidth","cornerCell","visibleCells","unshift","lineWidth","cellHeightWithChildGrid","checkScrollHeight","cellWidthWithChildGrid","save","tree","showRowNumbers","childGrids","saveAppearance","cellGridHeight","grid","visible","orderBy","console","warn","columnFilters","filterTextPrefix","aCell","selectionBorders","movingSelection","moveBorders","moveOffset","restore","bc","drawRowHeader","rowData","index","a","showRowHeaders","rowHeaderCell","rowHeaderCellWidth","drawRow","treeHeight","rowSansTreeHeight","g","rd","trees","scrollIndexRight","scrollPixelRight","scrollPixelLeft","treeGrid","scrollBarWidth","rowHeaders","visibleRowHeights","gridBorderCollapse","u","currentCell","columnHeaderCellHeight","getColumnHeaderCellHeight","getRowHeaderCellWidth","performance","now","createRowOrders","gridBackgroundColor","ln","frozenRow","allowFreezingRows","frozenMarkerBorderWidth","frozenMarkerWidth","snapToRow","scrollPixelTop","scrollIndexTop","scrollIndexBottom","scrollPixelBottom","showNewRow","scrollIndexLeft","newRow","cl","selectionMode","activeCellOverlayBorderWidth","activeCellOverlayBorderColor","getHeaderWidth","drawHeaderColumnRange","start","end","order","columnHeaderCell","nonFrozenHeaderWidth","rArgs","rhIndex","showColumnHeaders","columnHeaderCellBorderWidth","isColumnHeaderCell","endCap","my","mx","xHover","yHover","allowFreezingColumns","frozenMarkerHoverColor","frozenMarkerColor","frozenMarkerHoverBorderColor","frozenMarkerBorderColor","freezeMarkerPosition","frozenMarkerActiveColor","frozenMarkerActiveBorderColor","dragMode","selectionHandleBorderWidth","selectionHandleBorderColor","selectionHandleColor","az","touchSelectHandleZone","ax","ay","reorderObject","dragOffset","reorderMarkerBackgroundColor","reorderMarkerBorderWidth","reorderMarkerBorderColor","reorderMarkerIndexBorderWidth","reorderMarkerIndexBorderColor","reorderTarget","moveOverlayBorderWidth","moveOverlayBorderColor","setLineDash","moveOverlayBorderSegments","gridBorderWidth","gridBorderColor","dsb","selectionOverlayBorderWidth","selectionOverlayBorderColor","drawCorner","en","entities","scrollBarBoxMargin","scrollBarBorderColor","scrollBarBorderWidth","horizontalBox","horizontalBar","scrollBoxWidth","scrollWidth","verticalBox","verticalBar","scrollBoxHeight","scrollHeight","horizontalBarVisible","scrollBarBackgroundColor","scrollBarBoxColor","horizontalBoxVisible","scrollBarActiveColor","scrollBarBoxBorderRadius","verticalBarVisible","verticalBoxVisible","scrollBarCornerBorderColor","scrollBarCornerBackgroundColor","corner","showPerformance","pop","perf","reduce","toFixed","perfDelta","frozenColumnsWidth","htmlImages","startScale","scaleDelta","zoomDeltaStart","touchLength","touches","touchPosition","touchPosition1","scrollIndex","scrollPixel","canvasOffset","touchDelta","touchAnimateTo","scrollAnimation","touchPPS","xPPS","yPPS","touchPPST","xPPST","yPPST","touchDuration","pointerLockPosition","size","mouse","touch","touchStart","hasFocus","dragContext","textAlign","debugBackgroundColor","key","dpl","ph","px","py","debugPerfChartTextColor","debugPerfChartBackground","debugScrollHeightColor","debugScrollWidthColor","debugPerformanceColor","debugEntitiesColor","debugTouchPPSXColor","debugTouchPPSYColor","wheeling","stopPropagation","fn","events","removeEventListener","sfn","preventDefault","defaultPrevented","getRatio","maxPixelRatio","devicePixelRatio","webkitBackingStorePixelRatio","mozBackingStorePixelRatio","msBackingStorePixelRatio","oBackingStorePixelRatio","backingStorePixelRatio","drawAfterResize","checkScrollBoxVisibility","dataWidth","overflowX","dataHeight","overflowY","setScrollBoxSize","setCanvasSize","dims","cellBorder","dim","appliedInlineStyles","parentNodeStyle","isComponet","vb","nb","co","isScrollBoxCorner","sbw","ratio","bm","columnHeaderCellBorder","ch","scrollCache","accumulator","va","top","left","widthBoxRatio","heightBoxRatio","scrollBarBoxMinSize","scrollBarBoxWidth","bar","box","page","pageUpDownOverlap","resizeEditInput","scroll","dontDraw","floor","ellipsisCache","mousemove","overridePos","contextMenu","input","getLayerPos","dragBounds","sBounds","delta","ctrl","ctrlKey","metaKey","persistantSelectionMode","getCellAt","NativeEvent","previousCell","clearTimeout","scrollTimer","isInGrid","rowBoundaryCrossed","columnBoundaryCrossed","cellBoundaryCrossed","prefix","draggingItem","scrollModes","dragItem","cursor","selecting","dragStart","dragStartObject","shiftKey","bottom","right","getSelectionBounds","ignoreNextClick","dragAddToSelection","selectRow","selectionBounds","selectArea","autoScrollZone","click","checkSelectionChange","sb","startingBounds","getSelectedData","endEdit","setActiveCell","selectAll","columnHeaderClickBehavior","selectColumn","treeArrowClickRadius","toggleTree","dragResizeColumn","resizingStartingWidth","resizingStartingHeight","minColumnWidth","minRowHeight","resizeScrollZone","resizeChildGrids","globalRowResize","stopDragResize","setStorageData","scrollGrid","scrollPointerLock","scrollStartMode","movementX","movementY","scrollMode","scrollStart","setTimeout","scrollRepeatRate","selectionScrollIncrement","stopScrollGrid","exitPointerLock","dragReorder","columReorder","rowReorder","allowColumnReordering","allowRowReordering","source","reorderDeadZone","stopDragReorder","oIndex","tIndex","cr","row-reorder","column-reorder","dragMove","stopDragMove","moveSelection","freezeMove","stopFreezeMove","startFreezeMove","mousedown","lastMouseDownTarget","button","move","freeze","requestPointerLock","concat","dragging","mouseup","controlInput","focus","getAdjacentCells","first","last","keydown","adjacentCells","cols","keyCode","beginEditAt","Number","scrollIntoView","selectionFollowsActiveCell","selectedData","keyup","keypress","dblclick","fitColumnToValues","autosize","scrollWheel","deltaX","deltaY","deltaMode","touchHaltAnimation","scrollTo","pasteItem","clipData","mimeType","normalizeRowData","importingRow","existingRow","offsetX","isArray","colKey","substring","sel","cellData","colIndex","cName","getVisibleSchema","yi","getNextVisibleColumnIndex","visibleColumnIndex","getVisibleColumnIndexOf","paste","clipboardData","items","dti","getAsString","cut","copy","forEachSelectedCell","colName","htmlSafe","fCopyCell","addHeaders","headers","useHtml","hVal","join","addCellValue","trRow","textRow","outputHeaderKeys","tableRows","textRows","outputHeaders","sData","rowKeys","sSorted","setData","touchMove","touchScroll","rScrollZone","bScrollZone","tScrollZone","lScrollZone","touchScrollTimeout","rw","t1","t2","changedTouches","getTouchPos","touchDeadZone","touchContextTimeout","touchZoomSensitivity","touchZoomMin","touchZoomMax","zoomAltered","selectionScrollZone","calculatePPS","touchScrollStart","stopAnimation","animationFrames","touchSelecting","startingCell","touchSelect","touchMoving","touchIndex","rect","getBoundingClientRect","clientX","clientY","easingFunctions","linear","easeInQuad","easeOutQuad","easeInOutQuad","easeInCubic","easeOutCubic","easeInOutCubic","easeInQuart","easeOutQuart","easeInOutQuart","easeInQuint","easeOutQuint","easeInOutQuint","easing","touchEasingMethod","calculatePPSTimed","touchSigmaTimed","touchSigma","touchEndAnimation","touchReleaseAnimationDurationMs","touchEditCell","touchCell","clearInterval","calculatePPSTimer","touchingCell","editCell","touchstart","disposeContextMenu","touchStartEvent","touchStart1","contextmenuEvent","touchContextMenuTimeMs","setInterval","touchEndEvents","touchmove","passive","touchend","touchcancel","handleType","bounds","dz","touchReleaseAcceleration","scrollAnimationPPSThreshold","ctor","treeGridAttributes","storageName","invalidSearchExpClass","localStyleLibraryStorageKey","filters","currentFilter","sorters","parsers","schemaHashes","changes","componentL1Events","eventNames","expandToRow","col","orderedIndex","visibility","localStorage","setItem","tempSchema","createColumnOrders","applyDefaultValue","defaultValue","createNewRowData","getSchemaNameHash","getBestGuessDataType","columnName","drawChildGrids","gridKey","setTimer","refreshFromOrigialData","originalData","validateColumn","setDefaults","obj1","obj2","setAttributes","setStyle","findColumnMaxTextLength","dispose","removeChild","eventParent","contextmenu","disconnect","tryLoadStoredSettings","reloadStoredValues","storedSettings","getHeaderByName","getDomRoot","host","getFontName","fontStyle","getFontHeight","parseFloat","parseStyleValue","initProp","propName","getStyleProperty","styleKeys","supressDrawAndEvent","isDim","getItem","message","addStyleKeyIfNoneExists","initialized","publicStyleKeyIntf","initScrollBox","setDom","ie","navigator","userAgent","edge","webKit","moz","cursorGrab","cursorGrabing","cursorGrabbing","appendTo","getVisibleCellByIndex","clearChangeLog","gotoCell","gotoRow","findColumnScrollLeft","findRowScrollTop","isCellVisible","isRowVisible","isColumnVisible","clipElement","getSchemaFromData","setFilter","expandTree","collapseTree","insertRow","deleteRow","addRow","insertColumn","deleteColumn","addColumn","getClippingRect","setRowHeight","setColumnWidth","resetColumnWidths","resetRowHeights","selectNone","assertPxColor","clearPxColorAssertions","integerToAlpha","DOMStyles","set","valueObject","filterFor","String","filterRegExp","regEnd","pattern","exec","flags","flagLength","invalidFilterRegEx","RegExp","toLocaleUpperCase","innerText","textContent","blur","TypeError","currentCursor","find","eventName","RangeError","getTypes","parseInnerHtml","callback","etl","autoGenerateSchema","autoResizeColumns","setScrollTop","preventScrollEvent","setScrollLeft","sHeight","sWidth","supressDrawEvent","applyContextItemStyle","contextItemContainer","createInlineStyle","createContextMenu","parentContextMenu","createItems","removeChildContext","relatedTarget","container","childMenuArrow","contains","children","setAttribute","contextAddCallback","getAttribute","cPos","childContextMenuMarginLeft","childContextMenuMarginTop","createChildContext","addContent","content","childContextMenuArrowHTML","clickIndex","Event","checkArrowVisibility","upArrow","downArrow","startHoverScroll","contextHoverScrollAmount","hoverScrollTimeout","contextHoverScrollRateMs","endHoverScroll","selectedIndex","loc","scrollOffset","zIndexTop","contextMenuZIndex","position","contextMenuArrowColor","zIndex","inputDropdown","maxHeight","innerHeight","autocompleteBottomMargin","minWidth","contextMenuArrowUpHTML","contextMenuArrowDownHTML","contextMenuWindowMargin","innerWidth","isFinite","createFilterContextMenuItems","checkRegExpErrorState","filterInput","background","contextFilterInputBackground","contextFilterInputColor","contextFilterInvalidRegExpBackground","contextFilterInvalidRegExpColor","fillAutoComplete","count","autoCompleteItems","maxAutoCompleteItems","disposeAutocomplete","createAutoCompleteContext","iRect","autoCompleteContext","filterContainer","filterLabel","filterAutoCompleteButton","onclick","filterOptionText","contextFilterButtonHTML","cf","removeFilterOptionText","addDefaultContextMenuItem","isNormalCell","isBackground","isScrollBar","showFilter","showCopy","copyText","execCommand","showPaste","clipBoardData","pasteText","showColumnSelector","columnSelectorText","toggleColumnVisibility","columnSelectorHiddenText","columnSelectorVisibleText","hideColumnText","showClearSettingsOption","clearSettingsOptionText","columnWidth","allowSorting","showOrderByOption","showOrderByOptionTextAsc","showOrderByOptionTextDesc","createDiposeEvent","contextPosition","contextMenuMarginLeft","contextMenuMarginTop","mobileContextMenuMargin","ele","boundingRect","eleRect","clipRect","parentRect","Infinity","scrollingElement","borderWidth","mobileEditInputHeight","cellPaddingLeft","ignoreScrollOffset","abort","abortEdit","newValue","oldValue","aborted","editable","enumItems","enu","option","valueInEnum","multiLine","editCellZIndex","fontSize","editCellFontSize","nx","ny","className","css","canvas-datagrid-context-menu-filter-input","verticalAlign","marginLeft","padding","border","contextFilterInputBorder","borderRadius","contextFilterInputBorderRadius","fontWeight","fontFamily","contextFilterInputFontFamily","contextFilterInputFontSize","canvas-datagrid-context-menu-filter-button","contextMenuBackground","contextMenuColor","contextFilterButtonBorder","contextFilterButtonBorderRadius","contextMenuFilterButtonFontFamily","contextMenuFilterButtonFontSize","canvas-datagrid-context-child-arrow","cssFloat","childContextMenuArrowColor","contextMenuChildArrowFontSize","contextMenuFontFamily","canvas-datagrid-autocomplete","contextMenuFontSize","contextMenuBorder","contextMenuPadding","contextMenuBorderRadius","opacity","contextMenuOpacity","overflow","canvas-datagrid-autocomplete-item","canvas-datagrid-autocomplete-item:hover","contextMenuHoverBackground","contextMenuHoverColor","canvas-datagrid-canvas","canvas-datagrid","display","canvas-datagrid-control-input","canvas-datagrid-edit-mobile-input","boxSizing","outline","margin","mobileEditFontFamily","mobileEditFontSize","editCellBorder","editCellColor","editCellBackgroundColor","appearance","webkitAppearance","mozAppearance","canvas-datagrid-edit-input","editCellPaddingLeft","editCellFontFamily","boxShadow","editCellBoxShadow","canvas-datagrid-context-menu-item-mobile","contextMenuItemMargin","contextMenuItemBorderRadius","canvas-datagrid-context-menu-item","canvas-datagrid-context-menu-item:hover","canvas-datagrid-context-menu-label","contextMenuLabelMargin","contextMenuLabelDisplay","contextMenuLabelMinWidth","maxWidth","contextMenuLabelMaxWidth","canvas-datagrid-context-menu-mobile","canvas-datagrid-context-menu","contextMenuCursor","canvas-datagrid-invalid-search-regExp","contextMenuFilterInvalidExpresion","onblur","parentIsCanvas","getContext","textBaseline","ordA","charCodeAt","ordZ","len","fromCharCode","applyFilter","offsetY","targetX","targetY","sbh","isColumnSelected","colIsSelected","shift","supressEvent","addCol","de","ri","st","dragObject","childGrid","trArgs","treeGridHeight","sortFunction","dontSetStorageData","sort","xi","maxRowLength","minXi","lastSourceIndex","cidx","useTouchScrollZones","moveBorder","entitiy","tsz","touchScrollZone","moveMode","borderDragBehavior","xBorderBehavior","yBorderBehavior","isVerticalScrollBar","isHorizontalScrollBar","borderResizeZone","allowColumnResize","allowColumnResizeFromCell","allowRowHeaderResize","allowRowResize","allowRowResizeFromCell","rowGrabZoneSize","maxCol","minCol"," ","rowHeaderCellFont","autosizePadding","autosizeHeaderCellPadding","rowHeaderCellPaddingRight","rowHeaderCellPaddingLeft","columnHeaderCellFont","headerCellPaddingRight","headerCellPaddingLeft","cellFont","cellPaddingRight","cellAutoResizePadding","total","getRowHeight","headerCell","int","asc","localeCompare","date","Date","getTime"],"mappings":"CAAA,SAAAA,EAAAC,GACA,gBAAAC,UAAA,gBAAAC,QACAA,OAAAD,QAAAD,IACA,kBAAAG,gBAAAC,IACAD,UAAAH,GACA,gBAAAC,SACAA,QAAA,eAAAD,IAEAD,EAAA,eAAAC,KACC,mBAAAK,WAAAC,KAAA,WACD,MCAgB,UAAUC,GCN1B,QAAAC,GAAAC,GAGA,GAAAC,EAAAD,GACA,MAAAC,GAAAD,GAAAR,OAGA,IAAAC,GAAAQ,EAAAD,IACAE,EAAAF,EACAG,GAAA,EACAX,WAUA,OANAM,GAAAE,GAAAI,KAAAX,EAAAD,QAAAC,IAAAD,QAAAO,GAGAN,EAAAU,GAAA,EAGAV,EAAAD,QAvBA,GAAAS,KA4DA,OAhCAF,GAAAM,EAAAP,EAGAC,EAAAO,EAAAL,EAGAF,EAAAQ,EAAA,SAAAf,EAAAgB,EAAAC,GACAV,EAAAW,EAAAlB,EAAAgB,IACAG,OAAAC,eAAApB,EAAAgB,GACAK,cAAA,EACAC,YAAA,EACAC,IAAAN,KAMAV,EAAAiB,EAAA,SAAAvB,GACA,GAAAgB,GAAAhB,KAAAwB,WACA,WAA2B,MAAAxB,GAAA,SAC3B,WAAiC,MAAAA,GAEjC,OADAM,GAAAQ,EAAAE,EAAA,IAAAA,GACAA,GAIAV,EAAAW,EAAA,SAAAQ,EAAAC,GAAsD,MAAAR,QAAAS,UAAAC,eAAAjB,KAAAc,EAAAC,IAGtDpB,EAAAuB,EAAA,GAGAvB,IAAAwB,EAAA,KDgBM,SAAU9B,EAAQD,EAASO,GE7EjC,GAAAyB,GAAAC,CAEAD,UAkTCE,MAlTQD,EAAA,WACT,YACA,iBAAA7B,GACAA,EAAA+B,UACAC,aACA,6BACA,yBACA,iCACA,yBACA,4BACA,4BACA,4BACA,0BACA,sBACA,8BACA,oBACA,0BACA,yBACA,8BACA,wBACA,mDACA,qCACA,kDACA,4CACA,kCACA,+BACA,+BACA,8BACA,oBACA,aACA,gBACA,uBACA,iCACA,mCACA,uBACA,6BACA,6BACA,iBACA,YACA,wBACA,sBACA,+BACA,iDACA,sBACA,wBACA,sBACA,sBACA,oCACA,yBACA,wBACA,kCACA,mCACA,yBACA,gCACA,2BACA,+BACA,yBACA,0BACA,gBACA,kBACA,kBACA,yBACA,qDACA,uDACA,iBACA,uBACA,sBACA,sBACA,iBACA,+BACA,oBACA,oCACA,iCACA,wCACA,uBACA,6BACA,8BACA,oBACA,sBACA,oBACA,YACA,4BAEAC,SACA,uDACA,mDACA,4BACA,uCACA,qCACA,4DACA,yCACA,4CACA,yDACA,mCACA,8BACA,4BACA,6BACA,2BACA,+DACA,+CACA,yCACA,mEACA,mDACA,gEACA,gDACA,gCACA,gCACA,sBACA,6BACA,iDACA,6CACA,sBACA,iCACA,+BACA,uBACA,kBACA,gCACA,mCACA,sDACA,sCACA,wBACA,sBACA,uBACA,qBACA,yDACA,yCACA,mCACA,kBACA,+BACA,4BACA,qBACA,sBACA,qDACA,yCACA,mCACA,iCACA,6DACA,yDACA,kCACA,gEACA,4DACA,qCACA,gDACA,2CACA,8BACA,+CACA,kEACA,kDACA,oCACA,kCACA,mCACA,iCACA,+CACA,iEACA,0CACA,2DACA,qCACA,yCACA,0CACA,wCACA,qCACA,iEACA,0CACA,uCACA,uDACA,gEACA,uCACA,4CACA,8CACA,sCACA,8DACA,6DACA,gDACA,wCACA,sCACA,mDACA,yDACA,kCACA,yCACA,2CACA,gCACA,mDACA,2CACA,+DACA,uCACA,+BACA,wDACA,iDACA,sCACA,gCACA,2CACA,uCACA,qCACA,oCACA,4BACA,4BACA,8BACA,6BACA,+BACA,0BACA,uDACA,mDACA,6CACA,sCACA,kDACA,gCACA,sDACA,uDACA,qDACA,sDACA,oDACA,mDACA,kDACA,2BACA,oCACA,sDACA,kDACA,0BACA,oCACA,4BACA,0BACA,uBACA,oDACA,0DACA,qDACA,2DACA,+CACA,qDACA,8BACA,wBACA,iDACA,kCACA,6CACA,sBACA,kBACA,wBACA,uBACA,sBACA,wBACA,oBACA,uBACA,+BACA,6BACA,sCACA,8BACA,6BACA,mDACA,sCACA,mBACA,qBACA,qBACA,sDACA,kDACA,kCACA,0DACA,uCACA,0D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","file":"canvas-datagrid.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"canvasDatagrid\"] = factory();\n\telse\n\t\troot[\"canvasDatagrid\"] = factory();\n})(typeof self !== 'undefined' ? self : this, function() {\nreturn \n\n\n// WEBPACK FOOTER //\n// webpack/universalModuleDefinition","(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"canvasDatagrid\"] = factory();\n\telse\n\t\troot[\"canvasDatagrid\"] = factory();\n})(typeof self !== 'undefined' ? self : this, function() {\nreturn /******/ (function(modules) { // webpackBootstrap\n/******/ \t// The module cache\n/******/ \tvar installedModules = {};\n/******/\n/******/ \t// The require function\n/******/ \tfunction __webpack_require__(moduleId) {\n/******/\n/******/ \t\t// Check if module is in cache\n/******/ \t\tif(installedModules[moduleId]) {\n/******/ \t\t\treturn installedModules[moduleId].exports;\n/******/ \t\t}\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = installedModules[moduleId] = {\n/******/ \t\t\ti: moduleId,\n/******/ \t\t\tl: false,\n/******/ \t\t\texports: {}\n/******/ \t\t};\n/******/\n/******/ \t\t// Execute the module function\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n/******/\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.l = true;\n/******/\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n/******/\n/******/\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__webpack_require__.m = modules;\n/******/\n/******/ \t// expose the module cache\n/******/ \t__webpack_require__.c = installedModules;\n/******/\n/******/ \t// define getter function for harmony exports\n/******/ \t__webpack_require__.d = function(exports, name, getter) {\n/******/ \t\tif(!__webpack_require__.o(exports, name)) {\n/******/ \t\t\tObject.defineProperty(exports, name, {\n/******/ \t\t\t\tconfigurable: false,\n/******/ \t\t\t\tenumerable: true,\n/******/ \t\t\t\tget: getter\n/******/ \t\t\t});\n/******/ \t\t}\n/******/ \t};\n/******/\n/******/ \t// getDefaultExport function for compatibility with non-harmony modules\n/******/ \t__webpack_require__.n = function(module) {\n/******/ \t\tvar getter = module && module.__esModule ?\n/******/ \t\t\tfunction getDefault() { return module['default']; } :\n/******/ \t\t\tfunction getModuleExports() { return module; };\n/******/ \t\t__webpack_require__.d(getter, 'a', getter);\n/******/ \t\treturn getter;\n/******/ \t};\n/******/\n/******/ \t// Object.prototype.hasOwnProperty.call\n/******/ \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n/******/\n/******/ \t// __webpack_public_path__\n/******/ \t__webpack_require__.p = \"\";\n/******/\n/******/ \t// Load entry module and return exports\n/******/ \treturn __webpack_require__(__webpack_require__.s = 1);\n/******/ })\n/************************************************************************/\n/******/ ([\n/* 0 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*jslint browser: true, unparam: true, todo: true*/\n/*globals define: true, MutationObserver: false, requestAnimationFrame: false, performance: false, btoa: false*/\n!(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = (function () {\n    'use strict';\n    return function (self) {\n        self.defaults = {\n            attributes: [\n                ['allowColumnReordering', true],\n                ['allowColumnResize', true],\n                ['allowColumnResizeFromCell', false],\n                ['allowFreezingRows', false],\n                ['allowFreezingColumns', false],\n                ['allowMovingSelection', true],\n                ['allowRowHeaderResize', true],\n                ['allowRowReordering', false],\n                ['allowRowResize', true],\n                ['allowRowResizeFromCell', false],\n                ['allowSorting', true],\n                ['autoGenerateSchema', false],\n                ['autoResizeColumns', false],\n                ['borderDragBehavior', 'none'],\n                ['borderResizeZone', 10],\n                ['clearSettingsOptionText', 'Clear saved settings'],\n                ['columnHeaderClickBehavior', 'sort'],\n                ['columnSelectorHiddenText', '&nbsp;&nbsp;&nbsp;'],\n                ['columnSelectorText', 'Add/Remove columns'],\n                ['columnSelectorVisibleText', '\\u2713'],\n                ['contextHoverScrollAmount', 2],\n                ['contextHoverScrollRateMs', 5],\n                ['copyHeadersOnSelectAll', true],\n                ['copyText', 'Copy'],\n                ['debug', false],\n                ['editable', true],\n                ['ellipsisText', '...'],\n                ['filterOptionText', 'Filter %s'],\n                ['filterTextPrefix', '(filtered) '],\n                ['globalRowResize', false],\n                ['hideColumnText', 'Hide %s'],\n                ['maxAutoCompleteItems', 200],\n                ['multiLine', false],\n                ['name', ''],\n                ['pageUpDownOverlap', 1],\n                ['pasteText', 'Paste'],\n                ['persistantSelectionMode', false],\n                ['removeFilterOptionText', 'Remove filter on %s'],\n                ['reorderDeadZone', 3],\n                ['resizeScrollZone', 20],\n                ['rowGrabZoneSize', 5],\n                ['saveAppearance', true],\n                ['scrollAnimationPPSThreshold', 0.75],\n                ['scrollPointerLock', false],\n                ['scrollRepeatRate', 75],\n                ['selectionFollowsActiveCell', false],\n                ['selectionHandleBehavior', 'none'],\n                ['selectionMode', 'cell'],\n                ['selectionScrollIncrement', 20],\n                ['selectionScrollZone', 20],\n                ['showClearSettingsOption', true],\n                ['showColumnHeaders', true],\n                ['showColumnSelector', true],\n                ['showCopy', false],\n                ['showFilter', true],\n                ['showNewRow', false],\n                ['showOrderByOption', true],\n                ['showOrderByOptionTextAsc', 'Order by %s ascending'],\n                ['showOrderByOptionTextDesc', 'Order by %s descending'],\n                ['showPaste', false],\n                ['showPerformance', false],\n                ['showRowHeaders', true],\n                ['showRowNumbers', true],\n                ['snapToRow', false],\n                ['touchContextMenuTimeMs', 800],\n                ['touchDeadZone', 3],\n                ['touchEasingMethod', 'easeOutQuad'],\n                ['touchReleaseAcceleration', 1000],\n                ['touchReleaseAnimationDurationMs', 2000],\n                ['touchScrollZone', 20],\n                ['touchSelectHandleZone', 20],\n                ['touchZoomSensitivity', 0.005],\n                ['touchZoomMin', 0.5],\n                ['touchZoomMax', 1.75],\n                ['maxPixelRatio', 2],\n                ['tree', false],\n                ['treeHorizontalScroll', false]\n            ],\n            styles: [\n                ['activeCellBackgroundColor', 'rgba(255, 255, 255, 1)'],\n                ['activeCellBorderColor', 'rgba(110, 168, 255, 1)'],\n                ['activeCellBorderWidth', 1],\n                ['activeCellColor', 'rgba(0, 0, 0, 1)'],\n                ['activeCellFont', '16px sans-serif'],\n                ['activeCellHoverBackgroundColor', 'rgba(255, 255, 255, 1)'],\n                ['activeCellHorizontalAlignment', 'left'],\n                ['activeCellHoverColor', 'rgba(0, 0, 0, 1)'],\n                ['activeCellOverlayBorderColor', 'rgba(66, 133, 244, 1)'],\n                ['activeCellOverlayBorderWidth', 1],\n                ['activeCellPaddingBottom', 5],\n                ['activeCellPaddingLeft', 5],\n                ['activeCellPaddingRight', 5],\n                ['activeCellPaddingTop', 5],\n                ['activeCellSelectedBackgroundColor', 'rgba(236, 243, 255, 1)'],\n                ['activeCellSelectedColor', 'rgba(0, 0, 0, 1)'],\n                ['activeCellVerticalAlignment', 'center'],\n                ['activeColumnHeaderCellBackgroundColor', 'rgba(225, 225, 225, 1)'],\n                ['activeColumnHeaderCellColor', 'rgba(0, 0, 0, 1)'],\n                ['activeRowHeaderCellBackgroundColor', 'rgba(225, 225, 225, 1)'],\n                ['activeRowHeaderCellColor', 'rgba(0, 0, 0, 1)'],\n                ['autocompleteBottomMargin', 60],\n                ['autosizeHeaderCellPadding', 8],\n                ['autosizePadding', 5],\n                ['cellAutoResizePadding', 13],\n                ['cellBackgroundColor', 'rgba(255, 255, 255, 1)'],\n                ['cellBorderColor', 'rgba(195, 199, 202, 1)'],\n                ['cellBorderWidth', 1],\n                ['cellColor', 'rgba(0, 0, 0, 1)'],\n                ['cellFont', '16px sans-serif'],\n                ['cellGridHeight', 250],\n                ['cellHeight', 24],\n                ['cellHeightWithChildGrid', 150],\n                ['cellHorizontalAlignment', 'left'],\n                ['cellHoverBackgroundColor', 'rgba(255, 255, 255, 1)'],\n                ['cellHoverColor', 'rgba(0, 0, 0, 1)'],\n                ['cellPaddingBottom', 5],\n                ['cellPaddingLeft', 5],\n                ['cellPaddingRight', 5],\n                ['cellPaddingTop', 5],\n                ['cellSelectedBackgroundColor', 'rgba(236, 243, 255, 1)'],\n                ['cellSelectedColor', 'rgba(0, 0, 0, 1)'],\n                ['cellVerticalAlignment', 'center'],\n                ['cellWidth', 250],\n                ['cellWidthWithChildGrid', 250],\n                ['cellWhiteSpace', 'nowrap'],\n                ['cellLineHeight', 1],\n                ['cellLineSpacing', 3],\n                ['childContextMenuArrowColor', 'rgba(43, 48, 43, 1)'],\n                ['childContextMenuArrowHTML', '&#x25BA;'],\n                ['childContextMenuMarginLeft', -11],\n                ['childContextMenuMarginTop', -6],\n                ['columnHeaderCellBackgroundColor', 'rgba(240, 240, 240, 1)'],\n                ['columnHeaderCellBorderColor', 'rgba(172, 172, 172, 1)'],\n                ['columnHeaderCellBorderWidth', 1],\n                ['columnHeaderCellCapBackgroundColor', 'rgba(240, 240, 240, 1)'],\n                ['columnHeaderCellCapBorderColor', 'rgba(172, 172, 172, 1)'],\n                ['columnHeaderCellCapBorderWidth', 1],\n                ['columnHeaderCellColor', 'rgba(50, 50, 50, 1)'],\n                ['columnHeaderCellFont', '16px sans-serif'],\n                ['columnHeaderCellHeight', 25],\n                ['columnHeaderCellHorizontalAlignment', 'left'],\n                ['columnHeaderCellHoverBackgroundColor', 'rgba(235, 235, 235, 1)'],\n                ['columnHeaderCellHoverColor', 'rgba(0, 0, 0, 1)'],\n                ['columnHeaderCellPaddingBottom', 5],\n                ['columnHeaderCellPaddingLeft', 5],\n                ['columnHeaderCellPaddingRight', 5],\n                ['columnHeaderCellPaddingTop', 5],\n                ['columnHeaderCellVerticalAlignment', 'center'],\n                ['columnHeaderOrderByArrowBorderColor', 'rgba(195, 199, 202, 1)'],\n                ['columnHeaderOrderByArrowBorderWidth', 1],\n                ['columnHeaderOrderByArrowColor', 'rgba(155, 155, 155, 1)'],\n                ['columnHeaderOrderByArrowHeight', 8],\n                ['columnHeaderOrderByArrowMarginLeft', 0],\n                ['columnHeaderOrderByArrowMarginRight', 5],\n                ['columnHeaderOrderByArrowMarginTop', 6],\n                ['columnHeaderOrderByArrowWidth', 13],\n                ['contextFilterButtonBorder', 'solid 1px rgba(158, 163, 169, 1)'],\n                ['contextFilterButtonBorderRadius', '3px'],\n                ['contextFilterButtonHTML', '&#x25BC;'],\n                ['contextFilterInputBackground', 'rgba(255,255,255,1)'],\n                ['contextFilterInputBorder', 'solid 1px rgba(158, 163, 169, 1)'],\n                ['contextFilterInputBorderRadius', '0'],\n                ['contextFilterInputColor', 'rgba(0,0,0,1)'],\n                ['contextFilterInputFontFamily', 'sans-serif'],\n                ['contextFilterInputFontSize', '14px'],\n                ['contextFilterInvalidRegExpBackground', 'rgba(180, 6, 1, 1)'],\n                ['contextFilterInvalidRegExpColor', 'rgba(255, 255, 255, 1)'],\n                ['contextMenuArrowColor', 'rgba(43, 48, 43, 1)'],\n                ['contextMenuArrowDownHTML', '&#x25BC;'],\n                ['contextMenuArrowUpHTML', '&#x25B2;'],\n                ['contextMenuBackground', 'rgba(240, 240, 240, 1)'],\n                ['contextMenuBorder', 'solid 1px rgba(158, 163, 169, 1)'],\n                ['contextMenuBorderRadius', '3px'],\n                ['contextMenuChildArrowFontSize', '12px'],\n                ['contextMenuColor', 'rgba(43, 48, 43, 1)'],\n                ['contextMenuCursor', 'default'],\n                ['contextMenuFilterButtonFontFamily', 'sans-serif'],\n                ['contextMenuFilterButtonFontSize', '10px'],\n                ['contextMenuFilterInvalidExpresion', 'rgba(237, 155, 156, 1)'],\n                ['contextMenuFontFamily', 'sans-serif'],\n                ['contextMenuFontSize', '16px'],\n                ['contextMenuHoverBackground', 'rgba(182, 205, 250, 1)'],\n                ['contextMenuHoverColor', 'rgba(43, 48, 153, 1)'],\n                ['contextMenuItemBorderRadius', '3px'],\n                ['contextMenuItemMargin', '2px'],\n                ['contextMenuLabelDisplay', 'inline-block'],\n                ['contextMenuLabelMargin', '0 3px 0 0'],\n                ['contextMenuLabelMaxWidth', '700px'],\n                ['contextMenuLabelMinWidth', '75px'],\n                ['contextMenuMarginLeft', 3],\n                ['contextMenuMarginTop', -3],\n                ['contextMenuOpacity', '0.98'],\n                ['contextMenuPadding', '2px'],\n                ['contextMenuWindowMargin', 30],\n                ['contextMenuZIndex', 10000],\n                ['cornerCellBackgroundColor', 'rgba(240, 240, 240, 1)'],\n                ['cornerCellBorderColor', 'rgba(202, 202, 202, 1)'],\n                ['debugBackgroundColor', 'rgba(0, 0, 0, .0)'],\n                ['debugColor', 'rgba(255, 15, 24, 1)'],\n                ['debugEntitiesColor', 'rgba(76, 231, 239, 1.00)'],\n                ['debugFont', '11px sans-serif'],\n                ['debugPerfChartBackground', 'rgba(29, 25, 26, 1.00)'],\n                ['debugPerfChartTextColor', 'rgba(255, 255, 255, 0.8)'],\n                ['debugPerformanceColor', 'rgba(252, 255, 37, 1.00)'],\n                ['debugScrollHeightColor', 'rgba(248, 33, 103, 1.00)'],\n                ['debugScrollWidthColor', 'rgba(66, 255, 27, 1.00)'],\n                ['debugTouchPPSXColor', 'rgba(246, 102, 24, 1.00)'],\n                ['debugTouchPPSYColor', 'rgba(186, 0, 255, 1.00)'],\n                ['display', 'inline-block'],\n                ['editCellBackgroundColor', 'white'],\n                ['editCellBorder', 'solid 1px rgba(110, 168, 255, 1)'],\n                ['editCellBoxShadow', '0 2px 5px rgba(0,0,0,0.4)'],\n                ['editCellColor', 'black'],\n                ['editCellFontFamily', 'sans-serif'],\n                ['editCellFontSize', '16px'],\n                ['editCellPaddingLeft', 4],\n                ['editCellZIndex', 10000],\n                ['frozenMarkerHoverColor', 'rgba(236, 243, 255, 1)'],\n                ['frozenMarkerHoverBorderColor', 'rgba(110, 168, 255, 1)'],\n                ['frozenMarkerActiveColor', 'rgba(236, 243, 255, 1)'],\n                ['frozenMarkerActiveBorderColor', 'rgba(110, 168, 255, 1)'],\n                ['frozenMarkerColor', 'rgba(222, 222, 222, 1)'],\n                ['frozenMarkerBorderColor', 'rgba(168, 168, 168, 1)'],\n                ['frozenMarkerBorderWidth', 1],\n                ['frozenMarkerWidth', 2],\n                ['gridBackgroundColor', 'rgba(240, 240, 240, 1)'],\n                ['gridBorderCollapse', 'collapse'],\n                ['gridBorderColor', 'rgba(202, 202, 202, 1)'],\n                ['gridBorderWidth', 1],\n                ['height', 'auto'],\n                ['maxHeight', 'inherit'],\n                ['maxWidth', 'inherit'],\n                ['minColumnWidth', 45],\n                ['minHeight', 'inherit'],\n                ['minRowHeight', 24],\n                ['minWidth', 'inherit'],\n                ['mobileContextMenuMargin', 10],\n                ['mobileEditInputHeight', 30],\n                ['mobileEditFontFamily', 'sans-serif'],\n                ['mobileEditFontSize', '16px'],\n                ['moveOverlayBorderWidth', 1],\n                ['moveOverlayBorderColor', 'rgba(66, 133, 244, 1)'],\n                ['moveOverlayBorderSegments', '12, 7'],\n                ['name', 'default'],\n                ['overflowY', 'auto'],\n                ['overflowX', 'auto'],\n                ['reorderMarkerBackgroundColor', 'rgba(0, 0, 0, 0.1)'],\n                ['reorderMarkerBorderColor', 'rgba(0, 0, 0, 0.2)'],\n                ['reorderMarkerBorderWidth', 1.25],\n                ['reorderMarkerIndexBorderColor', 'rgba(66, 133, 244, 1)'],\n                ['reorderMarkerIndexBorderWidth', 2.75],\n                ['rowHeaderCellBackgroundColor', 'rgba(240, 240, 240, 1)'],\n                ['rowHeaderCellBorderColor', 'rgba(200, 200, 200, 1)'],\n                ['rowHeaderCellBorderWidth', 1],\n                ['rowHeaderCellColor', 'rgba(50, 50, 50, 1)'],\n                ['rowHeaderCellFont', '16px sans-serif'],\n                ['rowHeaderCellHeight', 25],\n                ['rowHeaderCellHorizontalAlignment', 'left'],\n                ['rowHeaderCellHoverBackgroundColor', 'rgba(235, 235, 235, 1)'],\n                ['rowHeaderCellHoverColor', 'rgba(0, 0, 0, 1)'],\n                ['rowHeaderCellPaddingBottom', 5],\n                ['rowHeaderCellPaddingLeft', 5],\n                ['rowHeaderCellPaddingRight', 5],\n                ['rowHeaderCellPaddingTop', 5],\n                ['rowHeaderCellSelectedBackgroundColor', 'rgba(217, 217, 217, 1)'],\n                ['rowHeaderCellSelectedColor', 'rgba(50, 50, 50, 1)'],\n                ['rowHeaderCellVerticalAlignment', 'center'],\n                ['rowHeaderCellWidth', 57],\n                ['scrollBarActiveColor', 'rgba(125, 125, 125, 1)'],\n                ['scrollBarBackgroundColor', 'rgba(240, 240, 240, 1)'],\n                ['scrollBarBorderColor', 'rgba(202, 202, 202, 1)'],\n                ['scrollBarBorderWidth', 0.5],\n                ['scrollBarBoxBorderRadius', 4.125],\n                ['scrollBarBoxColor', 'rgba(192, 192, 192, 1)'],\n                ['scrollBarBoxMargin', 2],\n                ['scrollBarBoxMinSize', 15],\n                ['scrollBarBoxWidth', 8],\n                ['scrollBarCornerBackgroundColor', 'rgba(240, 240, 240, 1)'],\n                ['scrollBarCornerBorderColor', 'rgba(202, 202, 202, 1)'],\n                ['scrollBarWidth', 11],\n                ['selectionHandleBorderColor', 'rgba(255, 255, 255, 1)'],\n                ['selectionHandleBorderWidth', 1.5],\n                ['selectionHandleColor', 'rgba(66, 133, 244, 1)'],\n                ['selectionHandleSize', 8],\n                ['selectionHandleType', 'square'],\n                ['selectionOverlayBorderColor', 'rgba(66, 133, 244, 1)'],\n                ['selectionOverlayBorderWidth', 1],\n                ['treeArrowBorderColor', 'rgba(195, 199, 202, 1)'],\n                ['treeArrowBorderWidth', 1],\n                ['treeArrowClickRadius', 5],\n                ['treeArrowColor', 'rgba(155, 155, 155, 1)'],\n                ['treeArrowHeight', 8],\n                ['treeArrowMarginLeft', 0],\n                ['treeArrowMarginRight', 5],\n                ['treeArrowMarginTop', 6],\n                ['treeArrowWidth', 13],\n                ['treeGridHeight', 250],\n                ['width', 'auto']\n            ]\n        };\n    };\n}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\n\n/***/ }),\n/* 1 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*jslint browser: true, unparam: true, todo: true, evil: true*/\n/*globals Reflect: false, HTMLElement: true, define: true, MutationObserver: false, requestAnimationFrame: false, performance: false, btoa: false*/\n!(__WEBPACK_AMD_DEFINE_ARRAY__ = [\n    __webpack_require__(2),\n    __webpack_require__(0),\n    __webpack_require__(3),\n    __webpack_require__(4),\n    __webpack_require__(5),\n    __webpack_require__(6),\n    __webpack_require__(7),\n    __webpack_require__(8),\n    __webpack_require__(9)\n], __WEBPACK_AMD_DEFINE_RESULT__ = (function context(component) {\n    'use strict';\n    component = component();\n    var modules = Array.prototype.slice.call(arguments);\n    function Grid(args) {\n        args = args || {};\n        var self = {};\n        self.isComponent = args.component === undefined;\n        self.isChildGrid = args.parentNode && /canvas-datagrid-(cell|tree)/.test(args.parentNode.nodeType);\n        if (self.isChildGrid) {\n            self.intf = {};\n        } else {\n            self.intf = self.isComponent ? eval('Reflect.construct(HTMLElement, [], new.target)')\n                : document.createElement('canvas');\n        }\n        self.args = args;\n        self.intf.args = args;\n        self.applyComponentStyle = component.applyComponentStyle;\n        self.hyphenateProperty = component.hyphenateProperty;\n        self.dehyphenateProperty = component.dehyphenateProperty;\n        self.createGrid = function grid(args) {\n            args.component = false;\n            return new Grid(args);\n        };\n        modules.forEach(function (module) {\n            module(self);\n        });\n        if (self.isChildGrid) {\n            self.shadowRoot = args.parentNode.shadowRoot;\n            self.parentNode = args.parentNode;\n        } else if (self.intf.createShadowRoot) {\n            self.shadowRoot = self.intf.attachShadow({mode: 'open'});\n            self.parentNode = self.shadowRoot;\n        } else {\n            self.parentNode = self.intf;\n        }\n        self.init();\n        return self.intf;\n    }\n    if (window.HTMLElement) {\n        Grid.prototype = Object.create(window.HTMLElement.prototype);\n    }\n    // export web component\n    if (window.customElements) {\n        Grid.observedAttributes = component.getObservableAttributes();\n        Grid.prototype.disconnectedCallback = component.disconnectedCallback;\n        Grid.prototype.attributeChangedCallback = component.attributeChangedCallback;\n        Grid.prototype.connectedCallback = component.connectedCallback;\n        Grid.prototype.adoptedCallback = component.adoptedCallback;\n        window.customElements.define('canvas-datagrid', Grid);\n    }\n    // export global\n    if (window && !window.canvasDatagrid && !window.require) {\n        window.canvasDatagrid = function (args) { return new Grid(args); };\n    }\n    // export amd loader\n    module.exports = function grid(args) {\n        args = args || {};\n        var i, tKeys = ['style', 'formatters', 'sorters', 'filters',\n                    'treeGridAttributes', 'cellGridAttributes', 'data', 'schema'];\n        if (window.customElements && document.body.createShadowRoot) {\n            i = document.createElement('canvas-datagrid');\n            Object.keys(args).forEach(function (argKey) {\n                // set data and parentNode after everything else\n                if (argKey === 'data') { return; }\n                if (argKey === 'parentNode') { return; }\n                // top level keys in args\n                if (tKeys.indexOf(argKey) !== -1) {\n                    tKeys.forEach(function (tKey) {\n                        if (args[tKey] === undefined || tKey !== argKey) { return; }\n                        if (['formatters', 'sorters', 'filters'].indexOf(argKey) !== -1) {\n                            if (typeof args[tKey] === 'object' && args[tKey] !== null) {\n                                Object.keys(args[tKey]).forEach(function (sKey) {\n                                    i[tKey][sKey] = args[tKey][sKey];\n                                });\n                            }\n                        } else {\n                            i[tKey] = args[tKey];\n                        }\n                    });\n                    return;\n                }\n                // all others are attribute level keys\n                i.attributes[argKey] = args[argKey];\n            });\n            if (args.data) {\n                i.data = args.data;\n            }\n            // add to the dom very last to avoid redraws\n            if (args.parentNode) {\n                args.parentNode.appendChild(i);\n            }\n            return i;\n        }\n        args.component = false;\n        i = new Grid(args);\n        if (args.parentNode && args.parentNode.appendChild) {\n            args.parentNode.appendChild(i);\n        }\n        return i;\n    };\n    return module.exports;\n}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\n\n/***/ }),\n/* 2 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*jslint browser: true, unparam: true, todo: true*/\n/*globals define: true, MutationObserver: false, requestAnimationFrame: false, performance: false, btoa: false*/\n!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(0)], __WEBPACK_AMD_DEFINE_RESULT__ = (function (defaults) {\n    'use strict';\n    return function () {\n        var typeMap, component = {};\n        component.dehyphenateProperty = function hyphenateProperty(prop) {\n            prop = prop.replace('--cdg-', '');\n            var p = '', nextLetterCap;\n            Array.prototype.forEach.call(prop, function (char) {\n                if (nextLetterCap) {\n                    nextLetterCap = false;\n                    p += char.toUpperCase();\n                    return;\n                }\n                if (char === '-') {\n                    nextLetterCap = true;\n                    return;\n                }\n                p += char;\n            });\n            return p;\n        };\n        component.hyphenateProperty = function hyphenateProperty(prop, cust) {\n            var p = '';\n            Array.prototype.forEach.call(prop, function (char) {\n                if (char === char.toUpperCase()) {\n                    p += '-' + char.toLowerCase();\n                    return;\n                }\n                p += char;\n            });\n            return (cust ? '--cdg-' : '') + p;\n        };\n        function getDefaultItem(base, item) {\n            var i = {},\n                r;\n            defaults(i);\n            r = i.defaults[base].filter(function (i) {\n                return i[0].toLowerCase() === item.toLowerCase()\n                    || component.hyphenateProperty(i[0]) === item.toLowerCase()\n                    || component.hyphenateProperty(i[0], true) === item.toLowerCase();\n            })[0];\n            return r;\n        }\n        component.applyComponentStyle = function (supressChangeAndDrawEvents, intf) {\n            if (!intf.isComponent) { return; }\n            var cStyle = window.getComputedStyle(intf.tagName === 'CANVAS-DATAGRID' ? intf : intf.canvas, null),\n                defs = {};\n            intf.computedStyle = cStyle;\n            defaults(defs);\n            defs = defs.defaults.styles;\n            defs.forEach(function (def) {\n                var val;\n                val = cStyle.getPropertyValue(component.hyphenateProperty(def[0], true));\n                if (val === \"\") {\n                    val = cStyle.getPropertyValue(component.hyphenateProperty(def[0], false));\n                }\n                if (val !== \"\" && typeof val === 'string') {\n                    intf.setStyleProperty(def[0], typeMap[typeof def[1]](val\n                        .replace(/^\\s+/, '').replace(/\\s+$/, ''), def[1]), true);\n                }\n            });\n            if (!supressChangeAndDrawEvents && intf.dispatchEvent) {\n                requestAnimationFrame(function () { intf.resize(true); });\n                intf.dispatchEvent('stylechanged', intf.style);\n            }\n        };\n        typeMap = {\n            data: function (strData) {\n                try {\n                    return JSON.parse(strData);\n                } catch (e) {\n                    throw new Error('Cannot read JSON data in canvas-datagrid data.');\n                }\n            },\n            schema: function (strSchema) {\n                try {\n                    return JSON.parse(strSchema);\n                } catch (e) {\n                    throw new Error('Cannot read JSON data in canvas-datagrid schema attribute.');\n                }\n            },\n            number: function (strNum, def) {\n                var n = parseInt(strNum, 10);\n                return isNaN(n) ? def : n;\n            },\n            boolean: function (strBool) {\n                return (/true/i).test(strBool);\n            },\n            string: function (str) {\n                return str;\n            }\n        };\n        component.getObservableAttributes = function () {\n            var i = {}, attrs = ['data', 'schema', 'style', 'className', 'name'];\n            defaults(i);\n            i.defaults.attributes.forEach(function (attr) {\n                attrs.push(attr[0].toLowerCase());\n            });\n            return attrs;\n        };\n        component.disconnectedCallback = function () {\n            this.connected = false;\n        };\n        component.connectedCallback = function () {\n            var intf = this;\n            intf.parentDOMNode.innerHTML = \"\";\n            intf.parentDOMNode.appendChild(intf.canvas);\n            intf.connected = true;\n            component.observe(intf);\n            component.applyComponentStyle(true, intf);\n            intf.resize(true);\n        };\n        component.adoptedCallback = function () {\n            this.resize();\n        };\n        component.attributeChangedCallback = function (attrName, oldVal, newVal) {\n            var tfn, intf = this, def;\n            if (attrName === 'style') {\n                component.applyComponentStyle(false, intf);\n                return;\n            }\n            if (attrName === 'data') {\n                if (intf.dataType === 'application/x-canvas-datagrid') {\n                    intf.dataType = 'application/json+x-canvas-datagrid';\n                }\n                intf.args.data = newVal;\n                return;\n            }\n            if (attrName === 'schema') {\n                intf.args.schema = typeMap.schema(newVal);\n                return;\n            }\n            if (attrName === 'name') {\n                intf.name = newVal;\n                return;\n            }\n            if (attrName === 'class' || attrName === 'className') {\n                return;\n            }\n            def = getDefaultItem('attributes', attrName);\n            if (def) {\n                tfn = typeMap[typeof def[1]];\n                intf.attributes[def[0]] = tfn(newVal);\n                return;\n            }\n            if (/^on/.test(attrName)) {\n                intf.addEventListener('on' + attrName, function (e) {\n                    eval(newVal);\n                });\n            }\n            return;\n        };\n        component.observe = function (intf) {\n            var observer;\n            if (!window.MutationObserver) { return; }\n            intf.applyComponentStyle = function () { component.applyComponentStyle(false, intf); intf.resize(); };\n            /**\n             * Applies the computed css styles to the grid.  In some browsers, changing directives in attached style sheets does not automatically update the styles in this component.  It is necessary to call this method to update in these cases.\n             * @memberof canvasDatagrid\n             * @name applyComponentStyle\n             * @method\n             */\n            observer = new window.MutationObserver(function (mutations) {\n                var checkInnerHTML, checkStyle;\n                Array.prototype.forEach.call(mutations, function (mutation) {\n                    if (mutation.attributeName === 'class'\n                            || mutation.attributeName === 'style') {\n                        checkStyle = true;\n                        return;\n                    }\n                    if (mutation.target.parentNode\n                            && mutation.target.parentNode.nodeName === 'STYLE') {\n                        checkStyle = true;\n                        return;\n                    }\n                    if (mutation.addedNodes.length > 0 || mutation.type === 'characterData') {\n                        checkInnerHTML = true;\n                    }\n                });\n                if (checkStyle) {\n                    intf.applyComponentStyle(false, intf);\n                }\n                if (checkInnerHTML) {\n                    if (intf.dataType === 'application/x-canvas-datagrid') {\n                        intf.dataType = 'application/json+x-canvas-datagrid';\n                    }\n                    intf.data = intf.innerHTML;\n                }\n            });\n            observer.observe(intf, { characterData: true, childList: true, attributes: true, subtree: true });\n            Array.prototype.forEach.call(document.querySelectorAll('style'), function (el) {\n                observer.observe(el, { characterData: true, childList: true, attributes: true, subtree: true });\n            });\n        };\n        return component;\n    };\n}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\n/***/ }),\n/* 3 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*jslint browser: true, unparam: true, todo: true*/\n/*globals XMLSerializer: false, define: true, Blob: false, MutationObserver: false, requestAnimationFrame: false, performance: false, btoa: false*/\n!(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = (function () {\n    'use strict';\n    return function (self) {\n        var perfCounters = [],\n            cachedImagesDrawn = false,\n            drawCount = 0,\n            perfWindowSize = 300,\n            entityCount = [],\n            hiddenFrozenColumnCount = 0,\n            scrollDebugCounters = [],\n            touchPPSCounters = [];\n        self.htmlImageCache = {};\n        // more heavyweight version than fillArray defined in intf.js\n        function fillArray(low, high, step, def) {\n            step = step || 1;\n            var i = [], x;\n            for (x = low; x <= high; x += step) {\n                i[x] = def === undefined ? x : (typeof def === 'function' ? def(x) : def);\n            }\n            return i;\n        }\n        function drawPerfLine(w, h, x, y, perfArr, arrIndex, max, color, useAbs) {\n            var i = w / perfArr.length,\n                r = h / max;\n            x += self.canvasOffsetLeft;\n            y += self.canvasOffsetTop;\n            self.ctx.beginPath();\n            self.ctx.moveTo(x, y + h);\n            perfArr.forEach(function (n) {\n                var val = (arrIndex === undefined ? n : n[arrIndex]),\n                    cx,\n                    cy;\n                if (useAbs) {\n                    val = Math.abs(val);\n                }\n                cx = x + i;\n                cy = y + h - (val * r);\n                self.ctx.lineTo(cx, cy);\n                x += i;\n            });\n            self.ctx.moveTo(x + w, y + h);\n            self.ctx.strokeStyle = color;\n            self.ctx.stroke();\n        }\n        function drawOnAllImagesLoaded() {\n            var loaded = true;\n            Object.keys(self.htmlImageCache).forEach(function (html) {\n                if (!self.htmlImageCache[html].complete) {\n                    loaded = false;\n                }\n            });\n            if (loaded && !cachedImagesDrawn) {\n                cachedImagesDrawn = true;\n                self.draw();\n            }\n        }\n        function drawHtml(cell) {\n            var img,\n                v = cell.innerHTML || cell.formattedValue,\n                cacheKey = v.toString() + cell.rowIndex.toString() + cell.columnIndex.toString(), \n                x = cell.x + self.canvasOffsetLeft,\n                y = cell.y + self.canvasOffsetTop;\n            if (self.htmlImageCache[cacheKey]) {\n                img = self.htmlImageCache[cacheKey];\n                if (img.height !== cell.height || img.width !== cell.width) {\n                    // height and width of the cell has changed, invalidate cache\n                    self.htmlImageCache[cacheKey] = undefined;\n                } else {\n                    if (!img.complete) {\n                        return;\n                    }\n                    return self.ctx.drawImage(img, x, y);\n                }\n            } else {\n                cachedImagesDrawn = false;\n            }\n            img = new Image(cell.width, cell.height);\n            self.htmlImageCache[cacheKey] = img;\n            img.onload = function () {\n                self.ctx.drawImage(img, x, y);\n                drawOnAllImagesLoaded();\n            };\n            img.src = 'data:image/svg+xml;base64,' + btoa(\n                '<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"' + cell.width + '\" height=\"' + cell.height + '\">\\n' +\n                    '<foreignObject class=\"node\" x=\"0\" y=\"0\" width=\"100%\" height=\"100%\">\\n' +\n                    '<body xmlns=\"http://www.w3.org/1999/xhtml\" style=\"margin:0;padding:0;\">\\n' +\n                    v + '\\n' +\n                    '</body>' +\n                    '</foreignObject>\\n' +\n                    '</svg>\\n'\n            );\n        }\n        function drawOrderByArrow(x, y) {\n            var mt = self.style.columnHeaderOrderByArrowMarginTop * self.scale,\n                ml = self.style.columnHeaderOrderByArrowMarginLeft * self.scale,\n                mr = self.style.columnHeaderOrderByArrowMarginRight * self.scale,\n                aw = self.style.columnHeaderOrderByArrowWidth * self.scale,\n                ah = self.style.columnHeaderOrderByArrowHeight * self.scale;\n            x += self.canvasOffsetLeft;\n            y += self.canvasOffsetTop;\n            self.ctx.fillStyle = self.style.columnHeaderOrderByArrowColor;\n            self.ctx.strokeStyle = self.style.columnHeaderOrderByArrowBorderColor;\n            self.ctx.beginPath();\n            x = x + ml;\n            y = y + mt;\n            if (self.orderDirection === 'asc') {\n                self.ctx.moveTo(x, y);\n                self.ctx.lineTo(x + aw, y);\n                self.ctx.lineTo(x + (aw * 0.5), y + ah);\n                self.ctx.moveTo(x, y);\n            } else {\n                self.ctx.lineTo(x, y + ah);\n                self.ctx.lineTo(x + aw, y + ah);\n                self.ctx.lineTo(x + (aw * 0.5), y);\n                self.ctx.lineTo(x, y + ah);\n            }\n            self.ctx.stroke();\n            self.ctx.fill();\n            return ml + aw + mr;\n        }\n        function drawTreeArrow(cell, x, y) {\n            var mt = self.style.treeArrowMarginTop * self.scale,\n                mr = self.style.treeArrowMarginRight * self.scale,\n                ml = self.style.treeArrowMarginLeft * self.scale,\n                aw = self.style.treeArrowWidth * self.scale,\n                ah = self.style.treeArrowHeight * self.scale;\n            x += self.canvasOffsetLeft;\n            y += self.canvasOffsetTop;\n            self.ctx.fillStyle = self.style.treeArrowColor;\n            self.ctx.strokeStyle = self.style.treeArrowBorderColor;\n            self.ctx.beginPath();\n            x = x + ml;\n            y = y + mt;\n            if (self.openChildren[cell.rowIndex]) {\n                self.ctx.moveTo(x, y);\n                self.ctx.lineTo(x + aw, y);\n                self.ctx.lineTo(x + (aw * 0.5), y + ah);\n                self.ctx.moveTo(x, y);\n            } else {\n                self.ctx.lineTo(x, y);\n                self.ctx.lineTo(x + ah, y + (aw * 0.5));\n                self.ctx.lineTo(x, y + aw);\n                self.ctx.lineTo(x, y);\n            }\n            self.ctx.stroke();\n            self.ctx.fill();\n            return ml + aw + mr;\n        }\n        function radiusRect(x, y, w, h, radius) {\n            x += self.canvasOffsetLeft;\n            y += self.canvasOffsetTop;\n            var r = x + w, b = y + h;\n            self.ctx.beginPath();\n            self.ctx.moveTo(x + radius, y);\n            self.ctx.lineTo(r - radius, y);\n            self.ctx.quadraticCurveTo(r, y, r, y + radius);\n            self.ctx.lineTo(r, y + h - radius);\n            self.ctx.quadraticCurveTo(r, b, r - radius, b);\n            self.ctx.lineTo(x + radius, b);\n            self.ctx.quadraticCurveTo(x, b, x, b - radius);\n            self.ctx.lineTo(x, y + radius);\n            self.ctx.quadraticCurveTo(x, y, x + radius, y);\n        }\n        function fillRect(x, y, w, h) {\n            x += self.canvasOffsetLeft;\n            y += self.canvasOffsetTop;\n            self.ctx.fillRect(x, y, w, h);\n        }\n        function strokeRect(x, y, w, h) {\n            x += self.canvasOffsetLeft;\n            y += self.canvasOffsetTop;\n            self.ctx.strokeRect(x, y, w, h);\n        }\n        function fillText(text, x, y) {\n            x += self.canvasOffsetLeft;\n            y += self.canvasOffsetTop;\n            self.ctx.fillText(text, x, y);\n        }\n        function fillCircle(x, y, r) {\n            x += self.canvasOffsetLeft;\n            y += self.canvasOffsetTop;\n            self.ctx.beginPath();\n            self.ctx.arc(x, y, r, 0, 2 * Math.PI);\n            self.ctx.fill();\n        }\n        function strokeCircle(x, y, r) {\n            x += self.canvasOffsetLeft;\n            y += self.canvasOffsetTop;\n            self.ctx.beginPath();\n            self.ctx.arc(x, y, r, 0, 2 * Math.PI);\n            self.ctx.stroke();\n        }\n        function clipFrozenArea(mode) {\n            // 0 both, 1 rows, 2 cols\n            // self.lastFrozenColumnPixel;\n            // self.lastFrozenRowPixel;\n            self.ctx.beginPath();\n            if (mode === 0) {\n                self.ctx.moveTo(self.lastFrozenColumnPixel, self.lastFrozenRowPixel);\n                self.ctx.lineTo(self.lastFrozenColumnPixel, self.height);\n                self.ctx.lineTo(self.width, self.height);\n                self.ctx.lineTo(self.width, self.lastFrozenRowPixel);\n            }\n            if (mode === 1) {\n                self.ctx.moveTo(0, self.lastFrozenRowPixel);\n                self.ctx.lineTo(0, self.height);\n                self.ctx.lineTo(self.width, self.height);\n                self.ctx.lineTo(self.width, self.lastFrozenRowPixel);\n            }\n            if (mode === 2) {\n                self.ctx.moveTo(self.lastFrozenColumnPixel, 0);\n                self.ctx.lineTo(self.width, 0);\n                self.ctx.lineTo(self.width, self.height);\n                self.ctx.lineTo(self.lastFrozenColumnPixel, self.height);\n            }\n            self.ctx.clip();\n        }\n        function fillHandle(x, y, r) {\n            if (self.style.selectionHandleType === 'circle') {\n                return fillCircle(x, y, r * 0.5);\n            }\n            fillRect(x - r * 0.5, y - r * 0.5, r, r);\n        }\n        function strokeHandle(x, y, r) {\n            if (self.style.selectionHandleType === 'circle') {\n                return strokeCircle(x, y, r * 0.5);\n            }\n            strokeRect(x - r * 0.5, y - r * 0.5, r, r);\n        }\n        function addselectionHandle(c, pos) {\n            var hw = self.style.selectionHandleSize,\n                p = {\n                    tr: function () {\n                        fillHandle(c.x + c.width, c.y, hw);\n                        strokeHandle(c.x + c.width, c.y, hw);\n                    },\n                    br: function () {\n                        fillHandle(c.x + c.width, c.y + c.height, hw);\n                        strokeHandle(c.x + c.width, c.y + c.height, hw);\n                    },\n                    tl: function () {\n                        fillHandle(c.x, c.y, hw);\n                        strokeHandle(c.x, c.y, hw);\n                    },\n                    bl: function () {\n                        fillHandle(c.x, c.y + c.height, hw);\n                        strokeHandle(c.x, c.y + c.height, hw);\n                    }\n                };\n            p[pos]();\n        }\n        function addBorderLine(c, pos) {\n            self.ctx.beginPath();\n            var p = {\n                t: function () {\n                    self.ctx.moveTo(c.x + self.canvasOffsetLeft, c.y + self.canvasOffsetTop);\n                    self.ctx.lineTo(c.x + self.canvasOffsetLeft + c.width, c.y + self.canvasOffsetTop);\n                },\n                r: function () {\n                    self.ctx.moveTo(c.x + self.canvasOffsetLeft + c.width, c.y + self.canvasOffsetTop);\n                    self.ctx.lineTo(c.x + self.canvasOffsetLeft + c.width, c.y + self.canvasOffsetTop + c.height);\n                },\n                b: function () {\n                    self.ctx.moveTo(c.x + self.canvasOffsetLeft, c.y + self.canvasOffsetTop + c.height);\n                    self.ctx.lineTo(c.x + self.canvasOffsetLeft + c.width, c.y + self.canvasOffsetTop + c.height);\n                },\n                l: function () {\n                    self.ctx.moveTo(c.x + self.canvasOffsetLeft, c.y + self.canvasOffsetTop);\n                    self.ctx.lineTo(c.x + self.canvasOffsetLeft, c.y + self.canvasOffsetTop + c.height);\n                }\n            };\n            p[pos]();\n            self.ctx.stroke();\n        }\n        function addEllipsis(text, width) {\n            var c, w = 0;\n            if (self.ellipsisCache[text] && self.ellipsisCache[text][width]) {\n                return self.ellipsisCache[text][width];\n            }\n            //TODO Add ellipsis back when there is a fast way to do it\n            w = self.ctx.measureText(text).width;\n            self.ellipsisCache[text] = self.ellipsisCache[text] || {};\n            c = {value: text, width: w};\n            self.ellipsisCache[text][width] = c;\n            return c;\n        }\n        function wrapText(cell, splitChar) {\n            if (!cell.formattedValue) {\n                return { lines: [{width: 0, value: ''}], width: 0, height: cell.calculatedLineHeight };\n            }\n            var max = 0,\n                n = '\\n',\n                x,\n                word,\n                words = cell.formattedValue.split(splitChar),\n                textHeight = cell.calculatedLineHeight,\n                lines = [],\n                out = [],\n                wrap = self.style.cellWhiteSpace !== 'nowrap',\n                elWidth,\n                et = self.attributes.ellipsisText,\n                elClipLength,\n                plWidth,\n                clippedVal,\n                ogWordWidth,\n                previousLine,\n                line = {\n                    width: 0,\n                    value: ''\n                },\n                cHeight = wrap ? cell.paddedHeight : cell.calculatedLineHeight;\n            lines.push(line);\n            elWidth = self.ctx.measureText(' ' + et).width;\n            for (x = 0; x < words.length; x += 1) {\n                word = words[x];\n                var measure = self.ctx.measureText(word + splitChar);\n                if (line.width + measure.width + elWidth < cell.paddedWidth) {\n                    line.value += word + splitChar;\n                    line.width += measure.width;\n                    continue;\n                }\n                // if there is a hyphenated word that is too long\n                // split it and add the split set to the array\n                // then back up and re-read new split set\n                // this behavior seems right, it might not be\n                if (/\\w-\\w/.test(word) && cell.paddedWidth < measure.width) {\n                    words.splice(x, 1, word.split('-')[0] + '-', word.split('-')[1]);\n                    x -= 1;\n                    continue;\n                }\n                line = {\n                    width: measure.width,\n                    value: word + splitChar\n                };\n                if (x === 0) {\n                    lines = [];\n                    lines.push(line);\n                }\n                textHeight += cell.calculatedLineHeight;\n                if (textHeight > cHeight) {\n                    if (lines.length === 0) { break; }\n                    elClipLength = 1;\n                    previousLine = lines[lines.length - 1];\n                    if (previousLine.width < cell.paddedWidth && words.length === 1) { break; }\n                    clippedVal = previousLine.value + word;\n                    plWidth = self.ctx.measureText(clippedVal + et).width;\n                    var originText = clippedVal;\n                    if (plWidth > cell.paddedWidth) {\n                        var stepLength = parseInt(clippedVal.length / 2);\n                        var direction = -1;\n                        while (stepLength > 0) {\n                            clippedVal = originText.substr(0, stepLength * direction + clippedVal.length);\n                            plWidth = self.ctx.measureText(clippedVal + et).width;\n                            direction = plWidth > cell.paddedWidth ? -1 : 1;\n                            stepLength = parseInt(stepLength / 2);\n                        }\n                    }\n                    clippedVal = clippedVal + (originText.length != clippedVal.length ? et : '');\n                    previousLine.value = clippedVal;\n                    previousLine.width = plWidth;\n                    break;\n                }\n                if (x > 0) {\n                    lines.push(line);\n                }\n            }\n            return {\n                lines: lines,\n                width: max,\n                height: cell.calculatedLineHeight * lines.length\n            }\n        }\n        function drawText(cell) {\n            var ll = cell.text.lines.length,\n                h = (cell.fontHeight * cell.lineHeight),\n                x,\n                line,\n                wrap = self.style.cellWhiteSpace !== 'nowrap',\n                textHeight = 0;\n            for (x = 0; x < cell.text.lines.length; x += 1) {\n                line = cell.text.lines[x];\n                var vPos = Math.max((cell.height - (wrap ? cell.text.height : cell.calculatedLineHeight)) * 0.5, 0) + h,\n                    hPos = cell.paddingLeft + cell.treeArrowWidth + cell.orderByArrowWidth;\n                if (cell.horizontalAlignment === 'right') {\n                    hPos = cell.paddingLeft + cell.paddedWidth - line.width;\n                } else if (cell.horizontalAlignment === 'center') {\n                    hPos = cell.paddingLeft + ((cell.paddedWidth + cell.paddingRight) / 2) - (line.width / 2);\n                }\n                if (cell.verticalAlignment === 'top') {\n                    vPos = cell.calculatedLineHeight;\n                } else if (cell.verticalAlignment === 'bottom') {\n                    vPos = cell.height - cell.paddingBottom - cell.text.height;\n                }\n                line.height = h + cell.lineSpacing;\n                line.offsetLeft = hPos;\n                line.offsetTop = vPos;\n                line.x = cell.x + hPos;\n                line.y = cell.y + textHeight + vPos;\n                textHeight += line.height;\n                fillText(line.value, line.x, line.y);\n            }\n            if (self.attributes.debug && cell.active) {\n                requestAnimationFrame(function () {\n                    self.ctx.font = self.style.debugFont;\n                    self.ctx.fillStyle = self.style.debugColor;\n                    fillText(JSON.stringify({\n                        x: cell.x,\n                        y: cell.y,\n                        h: cell.height,\n                        w: cell.width,\n                        pw: cell.paddedWidth,\n                        idx: cell.columnIndex,\n                        idx_ord: cell.sortColumnIndex\n                    }, null, '\\t'),\n                        cell.x + 14, cell.y + 14);\n                    fillText(JSON.stringify(cell.text.lines.map(function (l) { return {w: l.width, v: l.value.length }; }), null, '\\t'),\n                        cell.x + 14, cell.y + 30);\n                });\n            }\n        }\n        function getFrozenColumnsWidth() {\n            var w = 0,\n                s = self.getSchema(),\n                x = 0,\n                n = Math.min(self.frozenColumn, s.length),\n                column;\n            hiddenFrozenColumnCount = 0;\n            while (x < n) {\n                column = s[x];\n                if (column.hidden) {\n                    hiddenFrozenColumnCount += 1;\n                } else {\n                    w += self.getColummnWidth(x);\n                }\n                x += 1;\n            }\n            return w;\n        }\n        /**\n         * Redraws the grid. No matter what the change, this is the only method required to refresh everything.\n         * @memberof canvasDatagrid\n         * @name draw\n         * @method\n         */\n         // r = literal row index\n         // rd = row data array\n         // i = user order index\n         // o = literal data index\n         // y = y drawing cursor\n         // x = x drawing cursor\n         // s = visible schema array\n         // cx = current x drawing cursor sub calculation var\n         // cy = current y drawing cursor sub calculation var\n         // a = static cell (like corner cell)\n         // p = perf counter\n         // l = data length\n         // u = current cell\n         // h = current height\n         // w = current width\n        self.draw = function (internal) {\n            if (self.dispatchEvent('beforedraw', {})) { return; }\n            if (!self.isChildGrid && (!self.height || !self.width)) {\n                return;\n            }\n            if (self.isChildGrid && internal) {\n                requestAnimationFrame(self.parentGrid.draw);\n                return;\n            }\n            if (self.intf.visible === false) {\n                return;\n            }\n            // initial values\n            var checkScrollHeight, rowHeaderCell, p, cx, cy, treeGrid, rowOpen,\n                rowHeight, cornerCell, y, x, c, h, w, s, r, rd, aCell,\n                data = (self.data || []),\n                bc = self.style.gridBorderCollapse === 'collapse',\n                selectionBorders = [],\n                moveBorders = [],\n                selectionHandles = [],\n                rowHeaders = [],\n                l = data.length,\n                u = self.currentCell || {},\n                columnHeaderCellHeight = self.getColumnHeaderCellHeight(),\n                rowHeaderCellWidth = self.getRowHeaderCellWidth(),\n                cellHeight = self.style.cellHeight;\n            drawCount += 1;\n            p = performance.now();\n            self.visibleRowHeights = [];\n            // if data length has changed, there is no way to know\n            if (data.length > self.orders.rows.length) {\n                self.createRowOrders();\n            }\n            function drawScrollBars() {\n                var drawCorner,\n                    en = self.scrollBox.entities,\n                    m = (self.style.scrollBarBoxMargin * 2);\n                self.ctx.strokeStyle = self.style.scrollBarBorderColor;\n                self.ctx.lineWidth = self.style.scrollBarBorderWidth;\n                en.horizontalBox.x = rowHeaderCellWidth + self.style.scrollBarBoxMargin\n                    + ((en.horizontalBar.width - self.scrollBox.scrollBoxWidth)\n                        * (self.scrollBox.scrollLeft / self.scrollBox.scrollWidth));\n                en.verticalBox.y = columnHeaderCellHeight + self.style.scrollBarBoxMargin\n                    + ((en.verticalBar.height - self.scrollBox.scrollBoxHeight)\n                        * (self.scrollBox.scrollTop / self.scrollBox.scrollHeight));\n                if (self.scrollBox.horizontalBarVisible) {\n                    self.ctx.fillStyle = self.style.scrollBarBackgroundColor;\n                    fillRect(en.horizontalBar.x, en.horizontalBar.y, en.horizontalBar.width + m, en.horizontalBar.height);\n                    strokeRect(en.horizontalBar.x, en.horizontalBar.y, en.horizontalBar.width + m, en.horizontalBar.height);\n                    self.ctx.fillStyle = self.style.scrollBarBoxColor;\n                    if (self.scrollBox.horizontalBoxVisible) {\n                        if (/horizontal/.test(u.context)) {\n                            self.ctx.fillStyle = self.style.scrollBarActiveColor;\n                        }\n                        radiusRect(en.horizontalBox.x, en.horizontalBox.y,\n                            en.horizontalBox.width, en.horizontalBox.height, self.style.scrollBarBoxBorderRadius);\n                        self.ctx.stroke();\n                        self.ctx.fill();\n                    }\n                    drawCorner = true;\n                    self.visibleCells.unshift(en.horizontalBar);\n                    self.visibleCells.unshift(en.horizontalBox);\n                }\n                if (self.scrollBox.verticalBarVisible) {\n                    self.ctx.fillStyle = self.style.scrollBarBackgroundColor;\n                    fillRect(en.verticalBar.x, en.verticalBar.y, en.verticalBar.width, en.verticalBar.height + m);\n                    strokeRect(en.verticalBar.x, en.verticalBar.y, en.verticalBar.width, en.verticalBar.height + m);\n                    if (self.scrollBox.verticalBoxVisible) {\n                        self.ctx.fillStyle = self.style.scrollBarBoxColor;\n                        if (/vertical/.test(u.context)) {\n                            self.ctx.fillStyle = self.style.scrollBarActiveColor;\n                        }\n                        radiusRect(en.verticalBox.x, en.verticalBox.y, en.verticalBox.width,\n                            en.verticalBox.height, self.style.scrollBarBoxBorderRadius);\n                        self.ctx.stroke();\n                        self.ctx.fill();\n                    }\n                    drawCorner = true;\n                    self.visibleCells.unshift(en.verticalBar);\n                    self.visibleCells.unshift(en.verticalBox);\n                }\n                if (drawCorner) {\n                    //corner\n                    self.ctx.strokeStyle = self.style.scrollBarCornerBorderColor;\n                    self.ctx.fillStyle = self.style.scrollBarCornerBackgroundColor;\n                    radiusRect(en.corner.x, en.corner.y, en.corner.width, en.corner.height, 0);\n                    self.ctx.stroke();\n                    self.ctx.fill();\n                    self.visibleCells.unshift(en.corner);\n                }\n            }\n            function createHandlesOverlayArray(cell) {\n                if (self.attributes.allowMovingSelection || self.mobile) {\n                    if (cell.selectionBorderTop && cell.selectionBorderRight && self.mobile) {\n                        selectionHandles.push([cell, 'tr']);\n                        cell.selectionHandle = 'tr';\n                    }\n                    if (cell.selectionBorderTop && cell.selectionBorderLeft && self.mobile) {\n                        selectionHandles.push([cell, 'tl']);\n                        cell.selectionHandle = 'tl';\n                    }\n                    if (cell.selectionBorderBottom && cell.selectionBorderLeft && self.mobile) {\n                        selectionHandles.push([cell, 'bl']);\n                        cell.selectionHandle = 'bl';\n                    }\n                    if (cell.selectionBorderBottom && cell.selectionBorderRight\n                            && (self.attributes.selectionHandleBehavior !== 'none' || self.mobile)) {\n                        selectionHandles.push([cell, 'br']);\n                        cell.selectionHandle = 'br';\n                    }\n                }\n            }\n            function createBorderOverlayArray(cell, drawArray, propPrefix, offsetPoint) {\n                offsetPoint = offsetPoint || {x: 0, y: 0};\n                cell.selectionBorder = '';\n                if (!cell.isRowHeader\n                        && self.selections[cell.rowIndex + -offsetPoint.y]\n                        && self.selections[cell.rowIndex + -offsetPoint.y].indexOf(cell.columnIndex + -offsetPoint.x) !== -1) {\n                    if ((!self.selections[cell.rowIndex - 1 + -offsetPoint.y]\n                            || self.selections[cell.rowIndex - 1 + -offsetPoint.y].indexOf(cell.columnIndex + -offsetPoint.x) === -1\n                            || cell.rowIndex === 0)\n                            && !cell.isHeader) {\n                        drawArray.push([cell, 't']);\n                        cell[propPrefix + 'BorderTop'] = true;\n                        cell[propPrefix + 'Border'] += 't';\n                    }\n                    if (!self.selections[cell.rowIndex + 1 + -offsetPoint.y]\n                            || self.selections[cell.rowIndex + 1 + -offsetPoint.y].indexOf(cell.columnIndex + -offsetPoint.x) === -1) {\n                        drawArray.push([cell, 'b']);\n                        cell[propPrefix + 'BorderBottom'] = true;\n                        cell[propPrefix + 'Border'] += 'b';\n                    }\n                    if (!self.selections[cell.rowIndex + -offsetPoint.y] || cell.columnIndex === 0\n                            || self.selections[cell.rowIndex + -offsetPoint.y].indexOf(cell.columnIndex - 1 + -offsetPoint.x) === -1) {\n                        drawArray.push([cell, 'l']);\n                        cell[propPrefix + 'BorderLeft'] = true;\n                        cell[propPrefix + 'Border'] += 'l';\n                    }\n                    if (!self.selections[cell.rowIndex + -offsetPoint.y] || cell.columnIndex === s.length\n                            || self.selections[cell.rowIndex + -offsetPoint.y].indexOf(cell.columnIndex + 1 + -offsetPoint.x) === -1) {\n                        drawArray.push([cell, 'r']);\n                        cell[propPrefix + 'BorderRight'] = true;\n                        cell[propPrefix + 'Border'] += 'r';\n                    }\n                }\n            }\n            function drawCell(d, rowOrderIndex, rowIndex) {\n                return function drawEach(header, headerIndex, columnOrderIndex) {\n                    if (header.hidden) { return 0; }\n                    var cellStyle = header.style || 'cell',\n                        cellGridAttributes,\n                        cell,\n                        isHeader = /HeaderCell/.test(cellStyle),\n                        isCorner = /cornerCell/.test(cellStyle),\n                        isRowHeader = 'rowHeaderCell' === cellStyle,\n                        isColumnHeader = 'columnHeaderCell' === cellStyle,\n                        selected = self.selections[rowOrderIndex] && self.selections[rowOrderIndex].indexOf(columnOrderIndex) !== -1,\n                        hovered = self.hovers.rowIndex === rowOrderIndex && self.hovers.columnIndex === columnOrderIndex,\n                        active = self.activeCell.rowIndex === rowOrderIndex && self.activeCell.columnIndex === columnOrderIndex,\n                        isColumnHeaderCellCap = cellStyle === 'columnHeaderCellCap',\n                        rawValue = d ? d[header.name] : undefined,\n                        isGrid = header.type === 'canvas-datagrid',\n                        activeHeader = (self.orders.rows[self.activeCell.rowIndex] === rowOrderIndex\n                                || self.orders.columns[self.activeCell.columnIndex] === headerIndex)\n                            && (columnOrderIndex === -1 || rowOrderIndex === -1)\n                            ? (isRowHeader ? 'activeRowHeaderCell' : 'activeColumnHeaderCell') : false,\n                        val,\n                        f = self.formatters[header.type || 'string'],\n                        orderByArrowSize = 0,\n                        treeArrowSize = 0,\n                        cellWidth = self.sizes.columns[headerIndex] || header.width,\n                        ev = {\n                            value: rawValue,\n                            row: d,\n                            header: header\n                        };\n                    if (isColumnHeaderCellCap) {\n                        cellWidth = w - x;\n                    }\n                    // if no data or schema are defined, a width is provided to the stub column\n                    if (cellWidth === undefined) {\n                        cellWidth = self.style.cellWidth;\n                    }\n                    cellWidth = cellWidth * self.scale;\n                    if (x + cellWidth + self.style.cellBorderWidth < 0) {\n                        x += cellWidth + self.style.cellBorderWidth;\n                    }\n                    if (active && cellStyle !== 'cornerCell') {\n                        cellStyle = 'activeCell';\n                    }\n                    if (self.visibleRows.indexOf(rowIndex) === -1 && !isHeader) {\n                        self.visibleRows.push(rowIndex);\n                    }\n                    val = self.dispatchEvent('formatcellvalue', ev);\n                    cx = x;\n                    cy = y;\n                    if (cellStyle === 'cornerCell') {\n                        cx = 0;\n                        cy = 0;\n                    } else if (isRowHeader) {\n                        cx = 0;\n                    } else if (isHeader) {\n                        cy = 0;\n                    }\n                    cell = {\n                        type: isGrid ? 'canvas-datagrid-cell' : header.type,\n                        style: cellStyle,\n                        nodeType: 'canvas-datagrid-cell',\n                        x: cx,\n                        y: cy,\n                        fontHeight: (self.style[cellStyle + 'FontHeight'] || 0) * self.scale,\n                        horizontalAlignment: self.style[cellStyle + 'HorizontalAlignment'],\n                        verticalAlignment: self.style[cellStyle + 'VerticalAlignment'],\n                        paddingLeft: (self.style[cellStyle + 'PaddingLeft'] || 0) * self.scale,\n                        paddingTop: (self.style[cellStyle + 'PaddingTop'] || 0) * self.scale,\n                        paddingRight: (self.style[cellStyle + 'PaddingRight'] || 0) * self.scale,\n                        paddingBottom: (self.style[cellStyle + 'PaddingBottom'] || 0) * self.scale,\n                        whiteSpace: self.style.cellWhiteSpace,\n                        lineHeight: self.style.cellLineHeight,\n                        lineSpacing: self.style.cellLineSpacing,\n                        offsetTop: self.canvasOffsetTop + cy,\n                        offsetLeft: self.canvasOffsetLeft + cx,\n                        scrollTop: self.scrollBox.scrollTop,\n                        scrollLeft: self.scrollBox.scrollLeft,\n                        active: active || activeHeader,\n                        hovered: hovered,\n                        selected: selected,\n                        width: cellWidth,\n                        height: cellHeight,\n                        offsetWidth: cellWidth,\n                        offsetHeight: cellHeight,\n                        parentNode: self.intf.parentNode,\n                        offsetParent: self.intf.parentNode,\n                        data: d,\n                        isCorner: isCorner,\n                        isHeader: isHeader,\n                        isColumnHeader: isColumnHeader,\n                        isColumnHeaderCellCap: isColumnHeaderCellCap,\n                        isRowHeader: isRowHeader,\n                        rowOpen: rowOpen,\n                        header: header,\n                        columnIndex: columnOrderIndex,\n                        rowIndex: rowOrderIndex,\n                        sortColumnIndex: headerIndex,\n                        sortRowIndex: rowIndex,\n                        isGrid: isGrid,\n                        isNormal: !isGrid && !isCorner && !isHeader,\n                        gridId: (self.attributes.name || '') + rowIndex + ':' + headerIndex,\n                        parentGrid: self.intf,\n                        innerHTML: '',\n                        activeHeader: activeHeader,\n                        value: isHeader && !isRowHeader ? (header.title || header.name) : rawValue\n                    };\n                    cell.calculatedLineHeight = (cell.fontHeight * cell.lineHeight) + cell.lineSpacing;\n                    cell.paddedWidth = cell.width - cell.paddingRight - cell.paddingLeft;\n                    cell.paddedHeight = cell.height - cell.paddingTop - cell.paddingBottom;\n                    ev.cell = cell;\n                    cell.userHeight = cell.isHeader ? self.sizes.rows[-1] : rowHeight;\n                    cell.userWidth = cell.isHeader ? self.sizes.columns.cornerCell : self.sizes.columns[headerIndex];\n                    self.visibleCells.unshift(cell);\n                    if (self.dispatchEvent('beforerendercell', ev)) { return; }\n                    self.ctx.fillStyle = self.style[cellStyle + 'BackgroundColor'];\n                    self.ctx.strokeStyle = self.style[cellStyle + 'BorderColor'];\n                    self.ctx.lineWidth = self.style[cellStyle + 'BorderWidth'];\n                    if (hovered) {\n                        self.ctx.fillStyle = self.style[cellStyle + 'HoverBackgroundColor'];\n                        self.ctx.strokeStyle = self.style[cellStyle + 'HoverBorderColor'];\n                    }\n                    if (selected) {\n                        self.ctx.fillStyle = self.style[cellStyle + 'SelectedBackgroundColor'];\n                        self.ctx.strokeStyle = self.style[cellStyle + 'SelectedBorderColor'];\n                    }\n                    if (activeHeader) {\n                        self.ctx.fillStyle = self.style[activeHeader + 'BackgroundColor'];\n                    }\n                    self.dispatchEvent('rendercell', ev);\n                    if (cell.isGrid) {\n                        if (cell.height !== rowHeight) {\n                            cell.height = rowHeight || self.style.cellHeightWithChildGrid;\n                            checkScrollHeight = true;\n                        }\n                        cell.width = self.sizes.columns[headerIndex] || self.style.cellWidthWithChildGrid;\n                    }\n                    if (rowOpen && !cell.isRowHeader) {\n                        cell.height = self.sizes.rows[rowIndex] || self.style.cellHeight;\n                    }\n                    if (!cell.isGrid) {\n                        fillRect(cx, cy, cell.width, cell.height);\n                        strokeRect(cx, cy, cell.width, cell.height);\n                    }\n                    self.ctx.save();\n                    radiusRect(cell.x, cell.y, cell.width, cell.height, 0);\n                    self.ctx.clip();\n                    self.dispatchEvent('afterrendercell', ev);\n                    if (cell.height !== cellHeight && !(rowOpen && !cell.isRowHeader)) {\n                        self.sizes.rows[isHeader ? -1 : rowIndex] = cell.height;\n                        checkScrollHeight = true;\n                    }\n                    if (cell.width !== cellWidth) {\n                        self.sizes.columns[headerIndex] = cell.width;\n                        checkScrollHeight = true;\n                    }\n                    if (isRowHeader && self.attributes.tree) {\n                        if (!self.dispatchEvent('rendertreearrow', ev)) {\n                            treeArrowSize = drawTreeArrow(cell, self.style[cellStyle + 'PaddingLeft'], cy, 0);\n                        }\n                    }\n                    if ((self.attributes.showRowNumbers && isRowHeader)\n                            || !isRowHeader) {\n                        if (cell.isGrid && !self.dispatchEvent('beforerendercellgrid', ev)) {\n                            if (!self.childGrids[cell.gridId]) {\n                                // HACK: this only allows setting of the child grids styles if data is set _after_\n                                // this is less than desirable.  An interface needs to be made to effect the\n                                // style of all cell grids.  One for individual grids already exists.\n                                cellGridAttributes = self.cellGridAttributes;\n                                cellGridAttributes.name = self.attributes.saveAppearance ? cell.gridId : undefined;\n                                cellGridAttributes.component = false;\n                                cellGridAttributes.parentNode = cell;\n                                cellGridAttributes.data = rawValue;\n                                ev.cellGridAttributes = cellGridAttributes;\n                                if (self.dispatchEvent('beforecreatecellgrid', ev)) { return; }\n                                self.childGrids[cell.gridId] = self.createGrid(cellGridAttributes);\n                                self.sizes.rows[rowIndex]\n                                    = self.sizes.rows[rowIndex] || self.style.cellGridHeight;\n                                checkScrollHeight = true;\n                            }\n                            cell.grid = self.childGrids[cell.gridId];\n                            cell.grid.parentNode = cell;\n                            cell.grid.visible = true;\n                            cell.grid.draw();\n                            self.dispatchEvent('rendercellgrid', ev);\n                        } else if (!cell.isGrid) {\n                            if (self.childGrids[cell.gridId]) {\n                                self.childGrids[cell.gridId].parentNode.offsetHeight = 0;\n                            }\n                            if (isHeader && self.orderBy === header.name) {\n                                if (!self.dispatchEvent('renderorderbyarrow', ev)) {\n                                    orderByArrowSize = drawOrderByArrow(cx + self.style[cellStyle + 'PaddingLeft'], 0);\n                                }\n                            }\n                            self.ctx.fillStyle = self.style[cellStyle + 'Color'];\n                            if (hovered) {\n                                self.ctx.fillStyle = self.style[cellStyle + 'HoverColor'];\n                            }\n                            if (selected) {\n                                self.ctx.fillStyle = self.style[cellStyle + 'SelectedColor'];\n                            }\n                            if (activeHeader) {\n                                self.ctx.fillStyle = self.style[activeHeader + 'Color'];\n                            }\n                            cell.treeArrowWidth = treeArrowSize;\n                            cell.orderByArrowWidth = orderByArrowSize;\n                            // create text ref to see if height needs to expand\n                            val = val !== undefined ? val : f\n                                ? f(ev) : '';\n                            if (val === undefined && !f) {\n                                val = '';\n                                console.warn('canvas-datagrid: Unknown format '\n                                    + header.type + ' add a cellFormater');\n                            }\n                            cell.formattedValue = ((val !== undefined && val !== null) ? val : '').toString();\n                            if (self.columnFilters && self.columnFilters[val] !== undefined && isHeader) {\n                                cell.formattedValue = self.attributes.filterTextPrefix + val;\n                            }\n                            self.ctx.font = (self.style[cellStyle + 'FontHeight'] * self.scale) + 'px ' + self.style[cellStyle + 'FontName'];\n                            if (!self.dispatchEvent('formattext', ev)) {\n                                cell.text = wrapText(cell, ' ');\n                            }\n                            if (!self.dispatchEvent('rendertext', ev)) {\n                                if (cell.innerHTML || header.type === 'html') {\n                                    drawHtml(cell);\n                                } else {\n                                    drawText(cell);\n                                }\n                            }\n                        }\n                    }\n                    if (active) {\n                        aCell = cell;\n                    }\n                    createBorderOverlayArray(cell, selectionBorders, 'selection');\n                    // createBorderOverlayArray calculates data for createHandlesOverlayArray so it must go 2nd\n                    createHandlesOverlayArray(cell);\n                    if (self.movingSelection) {\n                        createBorderOverlayArray(cell, moveBorders, 'move', self.moveOffset);\n                    }\n                    self.ctx.restore();\n                    x += cell.width + (bc ? 0 : self.style.cellBorderWidth);\n                    return cell.width;\n                };\n            }\n            function drawRowHeader(rowData, index, rowOrderIndex) {\n                var a, i;\n                if (self.attributes.showRowHeaders) {\n                    x = 0;\n                    i = index + 1;\n                    rowHeaderCell = {'rowHeaderCell': i };\n                    a = {\n                        name: 'rowHeaderCell',\n                        width: self.sizes.columns[-1] || self.style.rowHeaderCellWidth,\n                        style: 'rowHeaderCell',\n                        type: 'string',\n                        data: i,\n                        index: -1\n                    };\n                    rowOpen = self.openChildren[index];\n                    drawCell(rowHeaderCell, index, rowOrderIndex)(a, -1, -1);\n                }\n            }\n            function drawHeaders() {\n                var d, g = s.length, i, o, columnHeaderCell, header, nonFrozenHeaderWidth;\n                function drawHeaderColumnRange(start, end) {\n                    end = Math.min(end, g);\n                    for (o = start; o < end; o += 1) {\n                        i = self.orders.columns[o];\n                        header = s[i];\n                        if (!header.hidden) {\n                            d = {\n                                title: header.title,\n                                name: header.name,\n                                width: header.width || self.style.cellWidth,\n                                style: 'columnHeaderCell',\n                                type: 'string',\n                                index: o,\n                                order: i\n                            };\n                            columnHeaderCell = {'columnHeaderCell': header.title || header.name};\n                            x += drawCell(columnHeaderCell, -1, -1)(d, i, o);\n                            if (x > self.width + self.scrollBox.scrollLeft) {\n                                break;\n                            }\n                        }\n                    }\n                }\n                rowHeaders.forEach(function (rArgs, rhIndex) {\n                    y = rArgs[3];\n                    cellHeight = rArgs[4];\n                    if (rhIndex === self.frozenRow) {\n                        self.ctx.save();\n                        radiusRect(0, self.lastFrozenRowPixel, self.width, self.height - self.lastFrozenRowPixel, 0);\n                        self.ctx.clip();\n                    }\n                    drawRowHeader(rArgs[0], rArgs[1], rArgs[2]);\n                });\n                self.ctx.restore();\n                if (self.attributes.showColumnHeaders) {\n                    x = -self.scrollBox.scrollLeft + self.scrollPixelLeft + self.style.columnHeaderCellBorderWidth;\n                    if (self.attributes.showRowHeaders) {\n                        x += rowHeaderCellWidth;\n                    }\n                    y = 0;\n                    // cell height might have changed during drawing\n                    cellHeight = self.getColumnHeaderCellHeight();\n                    drawHeaderColumnRange(self.scrollIndexLeft, g);\n                    nonFrozenHeaderWidth = x;\n                    x = self.style.columnHeaderCellBorderWidth;\n                    if (self.attributes.showRowHeaders) {\n                        x += rowHeaderCellWidth;\n                    }\n                    drawHeaderColumnRange(0, self.frozenColumn);\n                    // fill in the space right of the headers\n                    x = nonFrozenHeaderWidth;\n                    if (x < w) {\n                        c = {\n                            name: '',\n                            width: self.style.scrollBarWidth,\n                            style: 'columnHeaderCellCap',\n                            isColumnHeaderCell: true,\n                            isColumnHeaderCellCap: true,\n                            type: 'string',\n                            index: s.length\n                        };\n                        drawCell({endCap: ''}, -1, -1)(c, -1, -1);\n                    }\n                    // fill in the space right of the headers\n                    if (self.attributes.showRowHeaders) {\n                        cornerCell = {'cornerCell': '' };\n                        x = 0;\n                        c = {\n                            name: 'cornerCell',\n                            width: self.style.rowHeaderCellWidth,\n                            style: 'cornerCell',\n                            type: 'string',\n                            index: -1\n                        };\n                        drawCell(cornerCell, -1, -1)(c, -1, -1);\n                    }\n                }\n            }\n            function drawRow(r, d) {\n                var i, treeHeight, rowSansTreeHeight, o, g = s.length;\n                if (y - (cellHeight * 2) > h) {\n                    return false;\n                }\n                rd = data[r];\n                rowOpen = self.openChildren[r];\n                rowSansTreeHeight = (self.sizes.rows[r] || self.style.cellHeight) * self.scale;\n                treeHeight = (rowOpen ? self.sizes.trees[r] : 0) * self.scale;\n                rowHeight = (rowSansTreeHeight + treeHeight);\n                if (y < -rowHeight) {\n                    return false;\n                }\n                if (self.attributes.showRowHeaders) {\n                    x += rowHeaderCellWidth;\n                }\n                cellHeight = rowHeight;\n                //draw normal columns\n                for (o = (self.scrollIndexLeft); o < g; o += 1) {\n                    i = self.orders.columns[o];\n                    x += drawCell(rd, r, d)(s[i], i, o);\n                    if (x > self.width) {\n                        self.scrollIndexRight = o;\n                        self.scrollPixelRight = x;\n                        break;\n                    }\n                }\n                //draw frozen columns\n                x = 0;\n                if (self.attributes.showRowHeaders) {\n                    x += rowHeaderCellWidth;\n                }\n                for (o = 0; o < self.frozenColumn; o += 1) {\n                    i = self.orders.columns[o];\n                    x += drawCell(rd, r, d)(s[i], i, o);\n                    if (x > self.width) {\n                        break;\n                    }\n                }\n                self.lastFrozenColumnPixel = x;\n                // cell height might have changed during drawing\n                cellHeight = rowHeight;\n                x = -self.scrollBox.scrollLeft + self.scrollPixelLeft + self.style.cellBorderWidth;\n                // don't draw a tree for the new row\n                treeGrid = self.childGrids[r];\n                if (r !== data.length && rowOpen) {\n                    treeGrid.visible = true;\n                    treeGrid.parentNode = {\n                        offsetTop: y + rowSansTreeHeight + self.canvasOffsetTop,\n                        offsetLeft: rowHeaderCellWidth - 1 + self.canvasOffsetLeft,\n                        offsetHeight: treeHeight,\n                        offsetWidth: self.width - rowHeaderCellWidth - self.style.scrollBarWidth - 1,\n                        offsetParent: self.intf.parentNode,\n                        parentNode: self.intf.parentNode,\n                        style: self.style,\n                        nodeType: 'canvas-datagrid-tree',\n                        scrollTop: self.scrollBox.scrollTop,\n                        scrollLeft: self.scrollBox.scrollLeft,\n                        rowIndex: r\n                    };\n                    self.visibleCells.unshift({\n                        rowIndex: r,\n                        columnIndex: 0,\n                        y: treeGrid.parentNode.offsetTop,\n                        x: treeGrid.parentNode.offsetLeft,\n                        height: treeGrid.height,\n                        width: treeGrid.width,\n                        style: 'tree-grid',\n                        type: treeGrid.parentNode.nodeType\n                    });\n                    treeGrid.draw();\n                } else if (treeGrid) {\n                    treeGrid.parentNode.offsetHeight = 0;\n                    delete self.sizes.trees[r];\n                }\n                rowHeaders.push([rd, r, d, y, rowHeight]);\n                self.visibleRowHeights[r] = rowHeight;\n                y += cellHeight + (bc ? 0 : self.style.cellBorderWidth);\n                return true;\n            }\n            function initDraw() {\n                self.visibleRows = [];\n                s = self.getSchema();\n                self.visibleCells = [];\n                self.canvasOffsetTop = self.isChildGrid ? self.parentNode.offsetTop : 0;\n                self.canvasOffsetLeft = self.isChildGrid ? self.parentNode.offsetLeft : 0;\n                h = self.height;\n                w = self.width;\n            }\n            function drawBackground() {\n                radiusRect(0, 0, w, h, 0);\n                self.ctx.clip();\n                self.ctx.fillStyle = self.style.gridBackgroundColor;\n                fillRect(0, 0, w, h);\n            }\n            function drawFrozenRows() {\n                var n, ln = Math.min(data.length, self.frozenRow);\n                x = -self.scrollBox.scrollLeft + self.scrollPixelLeft + self.style.cellBorderWidth;\n                y = columnHeaderCellHeight;\n                for (r = 0; r < ln; r += 1) {\n                    n = self.orders.rows[r];\n                    if (!drawRow(n, r)) {\n                        break;\n                    }\n                }\n                if (self.attributes.allowFreezingRows) {\n                    // HACK great, another stupid magic number.\n                    // Background will appear as a 0.5px artifact behind the row freeze bar without this hack\n                    y += self.style.frozenMarkerBorderWidth + self.style.frozenMarkerWidth - 0.4999999999;\n                }\n                self.lastFrozenRowPixel = y;\n            }\n            function drawRows() {\n                self.ctx.save();\n                if (self.frozenRow > 0) {\n                    radiusRect(0, self.lastFrozenRowPixel, self.width, self.height - self.lastFrozenRowPixel, 0);\n                    self.ctx.clip();\n                }\n                var o, n, i, g = s.length;\n                x = -self.scrollBox.scrollLeft + self.scrollPixelLeft + self.style.cellBorderWidth;\n                if (!self.attributes.snapToRow) {\n                    y += -self.scrollBox.scrollTop + self.scrollPixelTop + self.style.cellBorderWidth;\n                }\n                for (r = self.frozenRow + self.scrollIndexTop; r < l; r += 1) {\n                    n = self.orders.rows[r];\n                    self.scrollIndexBottom = r;\n                    self.scrollPixelBottom = y;\n                    if (!drawRow(n, r)) {\n                        break;\n                    }\n                }\n                if (self.attributes.showNewRow) {\n                    if (self.attributes.showRowHeaders) {\n                        x += rowHeaderCellWidth;\n                    }\n                    rowHeight = cellHeight = self.style.cellHeight;\n                    rowOpen = false;\n                    for (o = self.scrollIndexLeft; o < g; o += 1) {\n                        i = self.orders.columns[o];\n                        x += drawCell(self.newRow, data.length, data.length)(s[i], i, o);\n                        if (x > self.width + self.scrollBox.scrollLeft) {\n                            break;\n                        }\n                    }\n                    rowHeaders.push([self.newRow, data.length, data.length, y, rowHeight]);\n                }\n                self.ctx.restore();\n            }\n            function drawMoveMarkers() {\n                if (!self.movingSelection) { return; }\n                self.ctx.lineWidth = self.style.moveOverlayBorderWidth;\n                self.ctx.strokeStyle = self.style.moveOverlayBorderColor;\n                self.ctx.setLineDash(self.style.moveOverlayBorderSegments);\n                moveBorders.forEach(function (c) {\n                    addBorderLine(c[0], c[1]);\n                });\n                self.ctx.setLineDash([]);\n            }\n            function drawReorderMarkers() {\n                if (!self.reorderObject) { return; }\n                var b = {\n                        height: self.reorderObject.height,\n                        width: self.reorderObject.width,\n                        x: self.reorderObject.x + self.reorderObject.dragOffset.x,\n                        y: self.reorderObject.y + self.reorderObject.dragOffset.y\n                    },\n                    m = {\n                        width: w,\n                        height: h,\n                        x: 0,\n                        y: 0\n                    };\n                self.ctx.fillStyle = self.style.reorderMarkerBackgroundColor;\n                self.ctx.lineWidth = self.style.reorderMarkerBorderWidth;\n                self.ctx.strokeStyle = self.style.reorderMarkerBorderColor;\n                if (self.dragMode === 'row-reorder') {\n                    b.width = w;\n                    b.x = 0;\n                    m.width = w;\n                    m.height = self.currentCell.height;\n                    m.y = self.currentCell.y;\n                    fillRect(b.x, b.y, b.width, b.height);\n                    strokeRect(b.x, b.y, b.width, b.height);\n                    self.ctx.lineWidth = self.style.reorderMarkerIndexBorderWidth;\n                    self.ctx.strokeStyle = self.style.reorderMarkerIndexBorderColor;\n                    if (self.currentCell.rowIndex !== self.reorderObject.rowIndex\n                            && self.currentCell.rowIndex > -1\n                            && self.currentCell.rowIndex < l) {\n                        addBorderLine(m, self.reorderTarget.sortRowIndex > self.reorderObject.sortRowIndex ? 'b' : 't');\n                    }\n                } else if (self.dragMode === 'column-reorder' && self.reorderObject) {\n                    b.height = h;\n                    b.y = 0;\n                    m.height = h;\n                    m.width = self.currentCell.width;\n                    m.y = 0;\n                    m.x = self.currentCell.x;\n                    fillRect(b.x, b.y, b.width, b.height);\n                    strokeRect(b.x, b.y, b.width, b.height);\n                    self.ctx.lineWidth = self.style.reorderMarkerIndexBorderWidth;\n                    self.ctx.strokeStyle = self.style.reorderMarkerIndexBorderColor;\n                    if (self.currentCell.sortColumnIndex !== self.reorderObject.sortColumnIndex\n                            && self.currentCell.sortColumnIndex > -1\n                            && self.currentCell.sortColumnIndex < s.length) {\n                        addBorderLine(m, self.reorderTarget.columnIndex > self.reorderObject.columnIndex ? 'r' : 'l');\n                    }\n                }\n            }\n            function drawBorder() {\n                self.ctx.lineWidth = self.style.gridBorderWidth;\n                self.ctx.strokeStyle = self.style.gridBorderColor;\n                strokeRect(0, 0, self.width, self.height);\n            }\n            function drawSelectionBorders() {\n                self.ctx.lineWidth = self.style.selectionOverlayBorderWidth;\n                self.ctx.strokeStyle = self.style.selectionOverlayBorderColor;\n                function dsb(c) {\n                    addBorderLine(c[0], c[1]);\n                }\n                selectionBorders.filter(function (c) {\n                    return c[0].rowIndex < self.frozenRow && c[0].columnIndex < self.frozenColumn;\n                }).forEach(dsb);\n                self.ctx.save();\n                clipFrozenArea(0);\n                selectionBorders.filter(function (c) {\n                    return c[0].rowIndex >= self.frozenRow && c[0].columnIndex >= self.frozenColumn;\n                }).forEach(dsb);\n                self.ctx.restore();\n                self.ctx.save();\n                clipFrozenArea(1);\n                selectionBorders.filter(function (c) {\n                    return c[0].rowIndex >= self.frozenRow && c[0].columnIndex < self.frozenColumn;\n                }).forEach(dsb);\n                self.ctx.restore();\n                self.ctx.save();\n                clipFrozenArea(2);\n                selectionBorders.filter(function (c) {\n                    return c[0].rowIndex < self.frozenRow && c[0].columnIndex >= self.frozenColumn;\n                }).forEach(dsb);\n                self.ctx.restore();\n            }\n            function drawSelectionHandles() {\n                if (self.mobile || self.attributes.allowMovingSelection) {\n                    self.ctx.lineWidth = self.style.selectionHandleBorderWidth;\n                    self.ctx.strokeStyle = self.style.selectionHandleBorderColor;\n                    self.ctx.fillStyle = self.style.selectionHandleColor;\n                    selectionHandles.forEach(function (c) {\n                        addselectionHandle(c[0], c[1]);\n                        var az = self.attributes.touchSelectHandleZone / 2,\n                            ax = c[0].x + (c[1] === 'tl' || c[1] === 'bl' ? 0 : c[0].width) - az,\n                            ay = c[0].y + (c[1] === 'bl' || c[1] === 'br' ? c[0].height : 0) - az;\n                        self.visibleCells.unshift({\n                            x: ax,\n                            y: ay,\n                            height: self.style.selectionHandleSize + az,\n                            width: self.style.selectionHandleSize + az,\n                            style: 'selection-handle-' + c[1]\n                        });\n                    });\n                }\n            }\n            function drawActiveCell() {\n                if (!aCell) { return; }\n                self.ctx.save();\n                var cl = self.activeCell.columnIndex + 1 > self.frozenColumn || self.activeCell.rowIndex + 1 > self.frozenRow,\n                    acx = cl ? self.lastFrozenColumnPixel : 0,\n                    acy = cl ? self.lastFrozenRowPixel : 0,\n                    acw = cl ? self.width - self.lastFrozenColumnPixel : self.width,\n                    ach = cl ? self.height - self.lastFrozenRowPixel : self.height;\n                radiusRect(acx, acy, acw, ach, 0);\n                self.ctx.clip();\n                if (self.attributes.selectionMode === 'row') {\n                    if (self.activeCell && self.activeCell.rowIndex === aCell.rowIndex) {\n                        self.ctx.lineWidth = self.style.activeCellOverlayBorderWidth;\n                        self.ctx.strokeStyle = self.style.activeCellOverlayBorderColor;\n                        strokeRect(0, aCell.y, self.getHeaderWidth() + rowHeaderCellWidth, self.visibleRowHeights[aCell.rowIndex]);\n                    }\n                } else {\n                    self.ctx.lineWidth = self.style.activeCellOverlayBorderWidth;\n                    self.ctx.strokeStyle = self.style.activeCellOverlayBorderColor;\n                    strokeRect(aCell.x, aCell.y, aCell.width, aCell.height);\n                }\n                self.ctx.restore();\n            }\n            function drawFrozenMarkers() {\n                var my = self.lastFrozenRowPixel - self.style.frozenMarkerWidth,\n                    mx = self.lastFrozenColumnPixel - self.style.frozenMarkerBorderWidth,\n                    xHover = self.currentCell && self.currentCell.style === 'frozen-row-marker',\n                    yHover = self.currentCell && self.currentCell.style === 'frozen-column-marker';\n                self.ctx.lineWidth = self.style.frozenMarkerBorderWidth;\n                if (self.attributes.allowFreezingColumns) {\n                    self.ctx.fillStyle = yHover ? self.style.frozenMarkerHoverColor : self.style.frozenMarkerColor;\n                    self.ctx.strokeStyle = yHover ? self.style.frozenMarkerHoverBorderColor : self.style.frozenMarkerBorderColor;\n                    fillRect(mx, 0, self.style.frozenMarkerWidth, self.height);\n                    strokeRect(mx, 0, self.style.frozenMarkerWidth, self.height);\n                    self.visibleCells.unshift({\n                        x: mx,\n                        y: 0,\n                        height: self.height,\n                        width: self.style.frozenMarkerWidth + self.style.frozenMarkerBorderWidth,\n                        style: 'frozen-column-marker'\n                    });\n                }\n                if (self.attributes.allowFreezingRows) {\n                    self.ctx.fillStyle = xHover ? self.style.frozenMarkerHoverColor : self.style.frozenMarkerColor;\n                    self.ctx.strokeStyle = xHover ? self.style.frozenMarkerHoverBorderColor : self.style.frozenMarkerBorderColor;\n                    fillRect(0, my, self.width, self.style.frozenMarkerWidth);\n                    strokeRect(0, my, self.width, self.style.frozenMarkerWidth);\n                    self.visibleCells.unshift({\n                        x: 0,\n                        y: my,\n                        height: self.style.frozenMarkerWidth + self.style.frozenMarkerBorderWidth,\n                        width: self.width,\n                        style: 'frozen-row-marker'\n                    });\n                }\n                if (self.freezeMarkerPosition) {\n                    self.ctx.fillStyle = self.style.frozenMarkerActiveColor;\n                    self.ctx.strokeStyle = self.style.frozenMarkerActiveBorderColor;\n                    if (self.dragMode === 'frozen-column-marker') {\n                        fillRect(self.freezeMarkerPosition.x, 0, self.style.frozenMarkerWidth, self.height);\n                        strokeRect(self.freezeMarkerPosition.x, 0, self.style.frozenMarkerWidth, self.height);\n                    } else {\n                        fillRect(0, self.freezeMarkerPosition.y, self.width, self.style.frozenMarkerWidth);\n                        strokeRect(0, self.freezeMarkerPosition.y, self.width, self.style.frozenMarkerWidth);\n                    }\n                }\n            }\n            function drawPerfLines() {\n                if (!self.attributes.showPerformance) { return; }\n                var pw = 250,\n                    px = self.width - pw - self.style.scrollBarWidth - (self.style.scrollBarBorderWidth * 2),\n                    py = columnHeaderCellHeight,\n                    ph = 100;\n                if (scrollDebugCounters.length === 0) { scrollDebugCounters = fillArray(0, perfWindowSize, 1, function () { return [0, 0]; }); }\n                if (touchPPSCounters.length === 0) { touchPPSCounters = fillArray(0, perfWindowSize, 1, function () { return [0, 0]; }); }\n                if (entityCount.length === 0) { entityCount = fillArray(0, perfWindowSize, 1, 0); }\n                self.ctx.lineWidth = 0.5;\n                function dpl(name, perfArr, arrIndex, max, color, useAbs, rowIndex) {\n                    var v;\n                    drawPerfLine(pw, ph, px, py, perfArr, arrIndex, max, color, useAbs);\n                    self.ctx.fillStyle = color;\n                    fillRect(3 + px, py + 9 + (rowIndex * 11), 8, 8);\n                    self.ctx.fillStyle = self.style.debugPerfChartTextColor;\n                    v = arrIndex !== undefined ? perfArr[0][arrIndex] : perfArr[0];\n                    fillText(name + ' ' + (isNaN(v) ? 0 : v).toFixed(3), 14 + px, py + 16 + (rowIndex * 11));\n                }\n                self.ctx.textAlign = 'left';\n                self.ctx.font = self.style.debugFont;\n                self.ctx.fillStyle = self.style.debugPerfChartBackground;\n                fillRect(px, py, pw, ph);\n                [['Scroll Height', scrollDebugCounters, 0, self.scrollBox.scrollHeight, self.style.debugScrollHeightColor, false],\n                    ['Scroll Width', scrollDebugCounters, 1, self.scrollBox.scrollWidth, self.style.debugScrollWidthColor, false],\n                    ['Performance', perfCounters, undefined, 200, self.style.debugPerformanceColor, false],\n                    ['Entities', entityCount, undefined, 1500, self.style.debugEntitiesColor, false],\n                    ['TouchPPSX', touchPPSCounters, 0, 1000, self.style.debugTouchPPSXColor, true],\n                    ['TouchPPSY', touchPPSCounters, 1, 1000, self.style.debugTouchPPSYColor, true]\n                    ].forEach(function (i, index) {\n                    i.push(index);\n                    dpl.apply(null, i);\n                });\n                self.ctx.fillStyle = self.style.debugPerfChartBackground;\n                entityCount.pop();\n                entityCount.unshift(self.visibleCells.length);\n                scrollDebugCounters.pop();\n                scrollDebugCounters.unshift([self.scrollBox.scrollTop, self.scrollBox.scrollLeft]);\n                touchPPSCounters.pop();\n                touchPPSCounters.unshift([self.yPPS, self.xPPS]);\n            }\n            function drawDebug() {\n                self.ctx.save();\n                var d;\n                if (self.attributes.showPerformance || self.attributes.debug) {\n                    if (perfCounters.length === 0) { perfCounters = fillArray(0, perfWindowSize, 1, 0); }\n                    perfCounters.pop();\n                    perfCounters.unshift(performance.now() - p);\n                }\n                if (!self.attributes.debug) {\n                    self.ctx.restore();\n                    return;\n                }\n                self.ctx.font = self.style.debugFont;\n                d = {};\n                d.perf = (perfCounters.reduce(function (a, b) {\n                    return a + b;\n                }, 0) / Math.min(drawCount, perfCounters.length)).toFixed(1);\n                d.perfDelta = perfCounters[0].toFixed(1);\n                d.frozenColumnsWidth = getFrozenColumnsWidth();\n                d.htmlImages = Object.keys(self.htmlImageCache).length;\n                d.reorderObject = 'x: ' + (self.reorderObject || {columnIndex: 0}).columnIndex + ', y: ' + (self.reorderObject || {rowIndex: 0}).rowIndex;\n                d.reorderTarget = 'x: ' + (self.reorderTarget || {columnIndex: 0}).columnIndex + ', y: ' + (self.reorderTarget || {rowIndex: 0}).rowIndex;\n                d.scale = self.scale;\n                d.startScale = self.startScale;\n                d.scaleDelta = self.scaleDelta;\n                d.zoomDeltaStart = self.zoomDeltaStart;\n                d.touchLength = self.touchLength;\n                d.touches = 'y0: ' + (self.touchPosition || {y: 0}).y + ' y1: ' + (self.touchPosition1 || {y: 0}).y;\n                d.scrollBox = self.scrollBox.toString();\n                d.scrollIndex = 'x: ' + self.scrollIndexLeft + ', y: ' + self.scrollIndexTop;\n                d.scrollPixel = 'x: ' + self.scrollPixelLeft + ', y: ' + self.scrollPixelTop;\n                d.canvasOffset = 'x: ' + self.canvasOffsetLeft + ', y: ' + self.canvasOffsetTop;\n                d.touchDelta = 'x: ' + self.touchDelta.x + ', y: ' + self.touchDelta.y;\n                d.touchAnimateTo = 'x: ' + self.touchAnimateTo.x + ', y: ' + self.touchAnimateTo.y;\n                d.scrollAnimation = 'x: ' + self.scrollAnimation.x + ', y: ' + self.scrollAnimation.y;\n                d.touchPPS = 'x: ' + self.xPPS + ', y: ' + self.yPPS;\n                d.touchPPST = 'x: ' + self.xPPST + ', y: ' + self.yPPST;\n                d.touchDuration = self.touchDuration;\n                d.pointerLockPosition =  self.pointerLockPosition ?\n                        self.pointerLockPosition.x + ', ' + self.pointerLockPosition.y : '';\n                d.size = 'w: ' + self.width + ', h: ' + self.height;\n                d.mouse = 'x: ' + self.mouse.x + ', y: ' + self.mouse.y;\n                d.touch = !self.touchStart\n                    ? '' : 'x: ' + self.touchStart.x + ', y: ' + self.touchStart.y;\n                d.entities = self.visibleCells.length;\n                d.hasFocus = self.hasFocus;\n                d.dragMode = self.dragMode;\n                if (self.currentCell) {\n                    d.columnIndex = self.currentCell.columnIndex;\n                    d.rowIndex = self.currentCell.rowIndex;\n                    d.sortColumnIndex = self.currentCell.sortColumnIndex;\n                    d.sortRowIndex = self.currentCell.sortRowIndex;\n                    d.context = self.currentCell.context;\n                    d.dragContext = self.currentCell.dragContext;\n                    d.style = self.currentCell.style;\n                    d.type = self.currentCell.type;\n                }\n                self.ctx.textAlign = 'right';\n                self.ctx.fillStyle = self.style.debugBackgroundColor;\n                fillRect(0, 0, self.width, self.height);\n                Object.keys(d).forEach(function (key, index) {\n                    var m = key + ': ' + d[key],\n                        lh = 14;\n                    self.ctx.fillStyle = self.style.debugColor;\n                    fillText(m, w - 20, (self.attributes.showPerformance ? 140 : 24) + (index * lh));\n                });\n                self.ctx.restore();\n            }\n            self.ctx.save();\n            initDraw();\n            drawBackground();\n            drawFrozenRows();\n            drawRows();\n            drawActiveCell();\n            drawHeaders();\n            drawFrozenMarkers();\n            drawSelectionHandles();\n            drawReorderMarkers();\n            drawMoveMarkers();\n            drawBorder();\n            drawSelectionBorders();\n            drawScrollBars();\n            if (checkScrollHeight) {\n                self.resize(true);\n            }\n            drawDebug();\n            drawPerfLines();\n            if (self.dispatchEvent('afterdraw', {})) { return; }\n            self.ctx.restore();\n        };\n    };\n}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\n\n/***/ }),\n/* 4 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*jslint browser: true, unparam: true, todo: true, plusplus: true*/\n/*globals define: true, MutationObserver: false, requestAnimationFrame: false, performance: false, btoa: false*/\n!(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = (function () {\n    'use strict';\n    return function (self) {\n        var wheeling;\n        self.stopPropagation = function (e) { e.stopPropagation(); };\n        /**\n         * Adds an event listener to the given event.\n         * @memberof canvasDatagrid\n         * @name addEventListener\n         * @method\n         * @param {string} ev The name of the event to subscribe to.\n         * @param {function} fn The event procedure to execute when the event is raised.\n         */\n        self.addEventListener = function (ev, fn) {\n            self.events[ev] = self.events[ev] || [];\n            self.events[ev].unshift(fn);\n        };\n        /**\n         * Removes the given listener function from the given event.  Must be an actual reference to the function that was bound.\n         * @memberof canvasDatagrid\n         * @name removeEventListener\n         * @method\n         * @param {string} ev The name of the event to unsubscribe from.\n         * @param {function} fn The event procedure to execute when the event is raised.\n         */\n        self.removeEventListener = function (ev, fn) {\n            (self.events[ev] || []).forEach(function removeEachListener(sfn, idx) {\n                if (fn === sfn) {\n                    self.events[ev].splice(idx, 1);\n                }\n            });\n        };\n        /**\n         * Fires the given event, padding an event object to the event subscribers.\n         * @memberof canvasDatagrid\n         * @name dispatchEvent\n         * @method\n         * @param {number} ev The name of the event to dispatch.\n         * @param {number} e The event object.\n         */\n        self.dispatchEvent = function (ev, e) {\n            e = ev.type ? ev : (e || {});\n            ev = ev.type || ev;\n            var defaultPrevented;\n            function preventDefault() {\n                defaultPrevented = true;\n            }\n            if (!self.events[ev]) { return; }\n            self.events[ev].forEach(function dispatchEachEvent(fn) {\n                e.ctx = self.ctx;\n                e.preventDefault = preventDefault;\n                fn.apply(self.intf, [e]);\n            });\n            return defaultPrevented;\n        };\n        self.getRatio = function () {\n            return Math.min(self.attributes.maxPixelRatio, (window.devicePixelRatio || 1) /\n                (self.ctx.webkitBackingStorePixelRatio ||\n                    self.ctx.mozBackingStorePixelRatio ||\n                    self.ctx.msBackingStorePixelRatio ||\n                    self.ctx.oBackingStorePixelRatio ||\n                    self.ctx.backingStorePixelRatio || 1));\n        };\n        self.resize = function (drawAfterResize) {\n            if (!self.canvas) { return; }\n            var x,\n                v = {\n                    x: 0,\n                    y: 0,\n                    height: 0,\n                    width: 0,\n                    style: 'vertical-scroll-bar'\n                },\n                n = {\n                    x: 0,\n                    y: 0,\n                    height: 0,\n                    width: 0,\n                    style: 'horizontal-scroll-bar'\n                },\n                vb = {\n                    x: 0,\n                    y: 0,\n                    height: 0,\n                    width: 0,\n                    style: 'vertical-scroll-box'\n                },\n                nb = {\n                    x: 0,\n                    y: 0,\n                    height: 0,\n                    width: 0,\n                    style: 'horizontal-scroll-box'\n                },\n                co = {\n                    x: 0,\n                    y: 0,\n                    height: 0,\n                    width: 0,\n                    isCorner: true,\n                    isScrollBoxCorner: true,\n                    style: 'scroll-box-corner'\n                },\n                m = (self.style.scrollBarBoxMargin * 2),\n                b = (self.style.scrollBarBorderWidth * 2),\n                d = self.style.scrollBarBoxMargin * 0.5,\n                sbw = self.style.scrollBarWidth + (self.style.scrollBarBorderWidth * 2),\n                ratio = self.getRatio(),\n                bm = self.style.gridBorderCollapse === 'collapse' ? 1 : 2,\n                cellBorder = self.style.cellBorderWidth * bm,\n                columnHeaderCellBorder = self.style.columnHeaderCellBorderWidth * bm,\n                dataHeight = 0,\n                dataWidth = 0,\n                dims,\n                l = (self.data || []).length,\n                columnHeaderCellHeight = self.getColumnHeaderCellHeight(),\n                rowHeaderCellWidth = self.getRowHeaderCellWidth(),\n                ch = self.style.cellHeight,\n                s = self.getSchema();\n            // sets actual DOM canvas element\n            function checkScrollBoxVisibility() {\n                self.scrollBox.horizontalBarVisible = (self.style.width !== 'auto' && dataWidth > self.scrollBox.width && self.style.overflowX !== 'hidden')\n                    || self.style.overflowX === 'scroll';\n                self.scrollBox.horizontalBoxVisible = dataWidth > self.scrollBox.width;\n                self.scrollBox.verticalBarVisible = (self.style.height !== 'auto' && dataHeight > self.scrollBox.height && self.style.overflowY !== 'hidden')\n                    || self.style.overflowY === 'scroll';\n                self.scrollBox.verticalBoxVisible = dataHeight > self.scrollBox.height;\n            }\n            function setScrollBoxSize() {\n                self.scrollBox.width = self.width - rowHeaderCellWidth;\n                self.scrollBox.height = self.height - columnHeaderCellHeight;\n            }\n            function setCanvasSize() {\n                if (self.isChildGrid) {\n                    return;\n                }\n                dims = {\n                    // HACK +1 ? maybe it's a magic cell border?  Required to line up properly in auto height mode.\n                    height: columnHeaderCellHeight + dataHeight + cellBorder + 1,\n                    width: dataWidth + rowHeaderCellWidth + cellBorder\n                };\n                ['width', 'height'].forEach(function (dim) {\n                    //TODO: support inherit\n                    if (['auto', undefined].indexOf(self.style[dim]) !== -1\n                            && ['auto', undefined].indexOf(self.appliedInlineStyles[dim]) !== -1) {\n                        self.parentNodeStyle[dim] = dims[dim] + 'px';\n                    } else {\n                        self.parentNodeStyle[dim] = self.style[dim];\n                        if (self.isComponet) {\n                            self.canvas.style[dim] = self.style[dim];\n                        }\n                    }\n                });\n            }\n            self.scrollCache.x = [];\n            self.scrollCache.y = [];\n            for (x = 0; x < l; x += 1) {\n                self.scrollCache.y[x] = dataHeight;\n                dataHeight += (((self.sizes.rows[x] || ch) + (self.sizes.trees[x] || 0)) * self.scale)\n                    // HACK? if an expanded tree row is frozen it is necessary to add the tree row's height a second time.\n                    + (self.frozenRow > x ? (self.sizes.trees[x] || 0) : 0);\n            }\n            if (l > 1) {\n                self.scrollCache.y[x] = dataHeight;\n            }\n            dataWidth = s.reduce(function reduceSchema(accumulator, column, columnIndex) {\n                // intentional redefintion of column.  This causes scrollCache to be in the correct order\n                column = s[self.orders.columns[columnIndex]];\n                if (column.hidden) {\n                    self.scrollCache.x[columnIndex] = accumulator;\n                    return accumulator;\n                }\n                var va = accumulator + self.getColummnWidth(self.orders.columns[columnIndex]);\n                self.scrollCache.x[columnIndex] = va;\n                return va;\n            }, 0) || 0;\n            if (self.attributes.showNewRow) {\n                dataHeight += ch;\n            }\n            if (self.attributes.snapToRow) {\n              dataHeight += self.style.cellHeight;\n            }\n            setCanvasSize();\n            if (self.isChildGrid) {\n                self.width = self.parentNode.offsetWidth;\n                self.height = self.parentNode.offsetHeight;\n            } else if (self.height !== self.canvas.offsetHeight || self.width !== self.canvas.offsetWidth) {\n                self.height = self.canvas.offsetHeight;\n                self.width = self.canvas.offsetWidth;\n                self.canvasOffsetLeft = self.args.canvasOffsetLeft || 0;\n                self.canvasOffsetTop = self.args.canvasOffsetTop || 0;\n            }\n            /// calculate scroll bar dimensions\n            // non-controversial\n            self.scrollBox.top = columnHeaderCellHeight + columnHeaderCellBorder;\n            self.scrollBox.left = rowHeaderCellWidth;\n            // width and height of scroll box\n            setScrollBoxSize();\n            // is the data larger than the scroll box\n            checkScrollBoxVisibility();\n            // if the scroll box is visible, make room for it by expanding the size of the element\n            // if the other dimension is set to auto\n            if (self.scrollBox.horizontalBarVisible) {\n                if (self.style.height === 'auto' && !self.isChildGrid) {\n                    self.height += sbw;\n                }\n                dataHeight += sbw;\n                setCanvasSize();\n                setScrollBoxSize();\n                checkScrollBoxVisibility();\n            }\n            if (self.scrollBox.verticalBarVisible) {\n                if (self.style.width === 'auto' && !self.isChildGrid) {\n                    self.width += sbw;\n                }\n                dataWidth += sbw;\n                setCanvasSize();\n                setScrollBoxSize();\n                checkScrollBoxVisibility();\n            }\n            // set again after bar visibility checks\n            setScrollBoxSize();\n            self.scrollBox.scrollWidth = dataWidth - self.scrollBox.width;\n            self.scrollBox.scrollHeight = dataHeight - self.scrollBox.height;\n            self.scrollBox.widthBoxRatio = self.scrollBox.width / dataWidth;\n            self.scrollBox.scrollBoxWidth = self.scrollBox.width\n                * self.scrollBox.widthBoxRatio\n                - self.style.scrollBarWidth - b - d;\n            // TODO: This heightBoxRatio number is terribly wrong.\n            // They should be a result of the size of the grid/canvas?\n            // it being off causes the scroll bar to \"slide\" under\n            // the dragged mouse.\n            // https://github.com/TonyGermaneri/canvas-datagrid/issues/97\n            self.scrollBox.heightBoxRatio = (self.scrollBox.height - columnHeaderCellHeight) / dataHeight;\n            self.scrollBox.scrollBoxHeight = self.scrollBox.height\n                * self.scrollBox.heightBoxRatio\n                - self.style.scrollBarWidth - b - d;\n            self.scrollBox.scrollBoxWidth = Math.max(self.scrollBox.scrollBoxWidth, self.style.scrollBarBoxMinSize);\n            self.scrollBox.scrollBoxHeight = Math.max(self.scrollBox.scrollBoxHeight, self.style.scrollBarBoxMinSize);\n            // horizontal\n            n.x += rowHeaderCellWidth;\n            n.y += self.height - self.style.scrollBarWidth - d;\n            n.width = self.width - self.style.scrollBarWidth - rowHeaderCellWidth - d - m;\n            n.height = self.style.scrollBarWidth + self.style.scrollBarBorderWidth + d;\n            // horizontal box\n            nb.y = n.y + self.style.scrollBarBoxMargin;\n            nb.width = self.scrollBox.scrollBoxWidth;\n            nb.height = self.style.scrollBarBoxWidth;\n            // vertical\n            v.x += self.width - self.style.scrollBarWidth - self.style.scrollBarBorderWidth - d;\n            v.y += columnHeaderCellHeight;\n            v.width = self.style.scrollBarWidth + self.style.scrollBarBorderWidth + d;\n            v.height = self.height - columnHeaderCellHeight - self.style.scrollBarWidth - d - m;\n            // vertical box\n            vb.x = v.x + self.style.scrollBarBoxMargin;\n            vb.width = self.style.scrollBarBoxWidth;\n            vb.height = self.scrollBox.scrollBoxHeight;\n            // corner\n            co.x = n.x + n.width + m;\n            co.y = v.y + v.height + m;\n            co.width = self.style.scrollBarWidth + self.style.scrollBarBorderWidth;\n            co.height = self.style.scrollBarWidth + self.style.scrollBarBorderWidth;\n            self.scrollBox.entities = {\n                horizontalBar: n,\n                horizontalBox: nb,\n                verticalBar: v,\n                verticalBox: vb,\n                corner: co\n            };\n            self.scrollBox.bar = {\n                v: v,\n                h: n\n            };\n            self.scrollBox.box = {\n                v: vb,\n                h: nb\n            };\n            /// calculate page and dom elements\n            self.page = Math.max(1, self.visibleRows.length - 3 - self.attributes.pageUpDownOverlap);\n            // set canvas drawing related items\n            if (!self.isChildGrid) {\n                self.canvas.width = self.width * ratio;\n                self.canvas.height = self.height * ratio;\n                self.ctx.scale(ratio, ratio);\n            }\n            // resize any open dom elements (input/textarea)\n            self.resizeEditInput();\n            self.scroll(true);\n            if (drawAfterResize) {\n                self.draw(true);\n            }\n            self.dispatchEvent('resize', {});\n            return true;\n        };\n        self.scroll = function (dontDraw) {\n            var s = self.getSchema(),\n                l = (self.data || []).length,\n                ch = self.style.cellHeight;\n            // go too far in leaps, then get focused\n            self.scrollIndexTop = Math.floor((l * (self.scrollBox.scrollTop / self.scrollBox.scrollHeight)) - 100);\n            self.scrollIndexTop = Math.max(self.scrollIndexTop, 0);\n            self.scrollPixelTop = self.scrollCache.y[self.scrollIndexTop];\n            // sometimes the grid is rendered but the height is zero\n            if (self.scrollBox.scrollHeight === 0) {\n                self.scrollIndexTop = 0;\n            }\n            self.scrollPixelTop = 0;\n            self.scrollIndexLeft = self.frozenColumn;\n            self.scrollPixelLeft = 0;\n            while (self.scrollPixelTop < self.scrollBox.scrollTop && self.scrollIndexTop < self.data.length) {\n                // start on index +1 since index 0 was used in \"go too far\" section above\n                self.scrollIndexTop += 1;\n                self.scrollPixelTop = self.scrollCache.y[self.scrollIndexTop];\n            }\n            while (self.scrollPixelLeft < (self.scrollBox.scrollLeft + 1) && self.scrollIndexLeft < s.length) {\n                self.scrollPixelLeft = self.scrollCache.x[self.scrollIndexLeft];\n                self.scrollIndexLeft += 1;\n            }\n            if (s.length > 0) {\n                self.scrollIndexLeft = Math.max(self.scrollIndexLeft - 1, 0);\n                self.scrollPixelLeft -= self.getColummnWidth(self.orders.columns[self.scrollIndexLeft]);\n            }\n            if ((self.data || []).length > 0) {\n                self.scrollIndexTop = Math.max(self.scrollIndexTop - 1, 0);\n                self.scrollPixelTop = Math.max((self.scrollPixelTop\n                    - (\n                        self.data[self.scrollIndexTop] ? (self.sizes.rows[self.scrollIndexTop] || ch)\n                                + (self.sizes.trees[self.scrollIndexTop] || 0)\n                        : ch\n                    ) * self.scale), 0);\n            }\n            self.ellipsisCache = {};\n            if (!dontDraw) {\n                self.draw(true);\n            }\n            //TODO: figure out why this has to be delayed for child grids\n            //BUG: wheeling event on 3rd level hierarchy fails to move input box\n            requestAnimationFrame(self.resizeEditInput);\n            self.dispatchEvent('scroll', {top: self.scrollBox.scrollTop, left: self.scrollBox.scrollLeft});\n        };\n        self.mousemove = function (e, overridePos) {\n            if (self.contextMenu || self.input) {\n                return;\n            }\n            self.mouse = overridePos || self.getLayerPos(e);\n            var ctrl = (e.ctrlKey || e.metaKey || self.attributes.persistantSelectionMode),\n                i,\n                s = self.getSchema(),\n                dragBounds,\n                sBounds,\n                x = self.mouse.x,\n                y = self.mouse.y,\n                o = self.getCellAt(x, y),\n                delta,\n                ev = {NativeEvent: e, cell: o, x: x, y: y},\n                previousCell = self.currentCell;\n            clearTimeout(self.scrollTimer);\n            if (!self.isInGrid({x: x, y: y})) {\n                self.hasFocus = false;\n            }\n            if (self.dispatchEvent('mousemove', ev)) {\n                return;\n            }\n            if (o && self.currentCell) {\n                self.rowBoundaryCrossed = self.currentCell.rowIndex !== o.rowIndex;\n                self.columnBoundaryCrossed = self.currentCell.columnIndex !== o.columnIndex;\n                self.cellBoundaryCrossed = self.rowBoundaryCrossed || self.columnBoundaryCrossed;\n                ['row', 'column', 'cell'].forEach(function (prefix) {\n                    if (self[prefix + 'BoundaryCrossed']) {\n                        ev.cell = previousCell;\n                        self.dispatchEvent(prefix + 'mouseout', ev);\n                        ev.cell = o;\n                        self.dispatchEvent(prefix + 'mouseover', ev);\n                    }\n                });\n            }\n            self.currentCell = o;\n            if (!self.hasFocus) {\n                return;\n            }\n            self.hovers = {};\n            if (!self.draggingItem\n                    && o\n                    && self.scrollModes.indexOf(o.context) === -1) {\n                self.dragItem = o;\n                self.dragMode = o.dragContext;\n                self.cursor = o.context;\n                if (o.context === 'cell') {\n                    self.cursor = 'default';\n                    self.hovers = { rowIndex: o.rowIndex, columnIndex: o.columnIndex };\n                }\n                if ((self.selecting || self.reorderObject)\n                        && o.context === 'cell') {\n                    delta = {\n                        x: Math.abs(self.dragStart.x - x),\n                        y: Math.abs(self.dragStart.y - y)\n                    };\n                    if (self.dragStartObject.columnIndex !== -1 && e.shiftKey) {\n                        self.dragStartObject = {\n                            rowIndex: self.activeCell.rowIndex,\n                            columnIndex: self.activeCell.columnIndex\n                        };\n                    }\n                    dragBounds = {\n                        top: Math.min(self.dragStartObject.rowIndex, o.rowIndex),\n                        left: Math.min(self.dragStartObject.columnIndex, o.columnIndex),\n                        bottom: Math.max(self.dragStartObject.rowIndex, o.rowIndex),\n                        right: Math.max(self.dragStartObject.columnIndex, o.columnIndex)\n                    };\n                    if (self.dragStartObject.columnIndex === -1) {\n                        sBounds = self.getSelectionBounds();\n                        dragBounds.left = -1;\n                        dragBounds.right = s.length - 1;\n                        dragBounds.top = Math.min(sBounds.top, o.rowIndex);\n                        dragBounds.bottom = Math.max(sBounds.bottom, o.rowIndex);\n                    }\n                    if (self.dragStartObject.rowIndex !== o.rowIndex\n                                || self.dragStartObject.columnIndex !== o.columnIndex) {\n                        self.ignoreNextClick = true;\n                    }\n                    if (self.cellBoundaryCrossed || (delta.x === 0 && delta.y === 0) || (self.attributes.selectionMode === 'row')) {\n                        if (((self.attributes.selectionMode === 'row') || self.dragStartObject.columnIndex === -1)\n                                && self.rowBoundaryCrossed) {\n                            self.selectRow(o.rowIndex, ctrl, null, true);\n                        } else if (self.attributes.selectionMode !== 'row') {\n                            if (!self.dragAddToSelection && o.rowIndex !== undefined) {\n                                if (self.selections[o.rowIndex] && self.selections[o.rowIndex].indexOf(o.columnIndex) !== -1) {\n                                    self.selections[o.rowIndex].splice(self.selections[o.rowIndex].indexOf(o.columnIndex), 1);\n                                }\n                            } else {\n                                self.selections[o.rowIndex] = self.selections[o.rowIndex] || [];\n                                if (self.selections[o.rowIndex].indexOf(o.columnIndex) === -1) {\n                                    self.selections[o.rowIndex].push(o.columnIndex);\n                                }\n                            }\n                        }\n                    }\n                    if ((!self.selectionBounds || (dragBounds.top !== self.selectionBounds.top\n                            || dragBounds.left !== self.selectionBounds.left\n                            || dragBounds.bottom !== self.selectionBounds.bottom\n                            || dragBounds.right !== self.selectionBounds.right)) && !ctrl) {\n                        self.selections = [];\n                        sBounds = dragBounds;\n                        if (self.attributes.selectionMode === 'row') {\n                            for (i = sBounds.top; i <= sBounds.bottom; i += 1) {\n                                self.selectRow(i, true, null, true);\n                            }\n                        } else if (dragBounds.top !== -1) {\n                            self.selectArea(sBounds, true);\n                        }\n                    }\n                    self.autoScrollZone(e, x, y, ctrl);\n                }\n            }\n            self.cellBoundaryCrossed = false;\n            self.rowBoundaryCrossed = false;\n            self.columnBoundaryCrossed = false;\n            self.draw(true);\n        };\n        self.click = function (e, overridePos) {\n            var i,\n                startingBounds = JSON.stringify(self.getSelectionBounds()),\n                ctrl = (e.ctrlKey || e.metaKey || self.attributes.persistantSelectionMode),\n                pos = overridePos || self.getLayerPos(e);\n            self.currentCell = self.getCellAt(pos.x, pos.y);\n            if (self.currentCell.grid !== undefined) {\n                return;\n            }\n            function checkSelectionChange() {\n                var ev, sb = self.getSelectionBounds();\n                if (startingBounds === JSON.stringify(sb)) {\n                    return;\n                }\n                ev = {\n                    selections: self.selections,\n                    selectionBounds: self.getSelectionBounds()\n                };\n                Object.defineProperty(ev, 'selectedData', {\n                    get: function () {\n                        return self.getSelectedData();\n                    }\n                });\n                self.dispatchEvent('selectionchanged', ev);\n            }\n            if (self.input) {\n                self.endEdit();\n            }\n            if (self.ignoreNextClick) {\n                self.ignoreNextClick = false;\n                return;\n            }\n            i = self.currentCell;\n            if (self.dispatchEvent('click', {NativeEvent: e, cell: self.currentCell})) { return; }\n            if (!self.hasFocus) {\n                return;\n            }\n            if (['rowHeaderCell', 'columnHeaderCell'].indexOf(self.currentCell.style) === -1 && !ctrl) {\n                self.setActiveCell(i.columnIndex, i.rowIndex);\n            }\n            if (self.currentCell.context === 'cell') {\n                if (self.currentCell.style === 'cornerCell') {\n                    self.selectAll();\n                    self.draw();\n                    checkSelectionChange();\n                    return;\n                }\n                if (self.currentCell.style === 'columnHeaderCell') {\n                    if (self.attributes.columnHeaderClickBehavior === 'sort') {\n                        if (self.orderBy === i.header.name) {\n                            self.orderDirection = self.orderDirection === 'asc' ? 'desc' : 'asc';\n                        } else {\n                            self.orderDirection = 'asc';\n                        }\n                        self.order(i.header.name, self.orderDirection);\n                        checkSelectionChange();\n                        return;\n                    }\n                    if (self.attributes.columnHeaderClickBehavior === 'select') {\n                        self.selectColumn(i.header.index, ctrl, e.shiftKey);\n                        self.draw();\n                        return;\n                    }\n                }\n                self.selections[i.rowIndex] = self.selections[i.rowIndex] || [];\n                if (((self.attributes.selectionMode === 'row') || self.currentCell.style === 'rowHeaderCell')) {\n                    if (self.currentCell.style === 'rowHeaderCell'\n                            && self.attributes.tree && pos.x > 0\n                            && pos.x - self.currentCell.x < self.style.treeArrowWidth\n                            + self.style.treeArrowMarginLeft\n                            + self.style.treeArrowMarginRight + self.style.treeArrowClickRadius\n                            && pos.y - self.currentCell.y < self.style.treeArrowHeight\n                            + self.style.treeArrowMarginTop + self.style.treeArrowClickRadius\n                            && pos.y > 0) {\n                        self.toggleTree(i.rowIndex);\n                        return;\n                    }\n                }\n                if (e.shiftKey && !ctrl) {\n                    self.selectionBounds = self.getSelectionBounds();\n                    self.selectArea(undefined, false);\n                }\n            }\n            checkSelectionChange();\n            self.draw(true);\n        };\n        self.dragResizeColumn = function (e) {\n            var pos, x, y;\n            pos = self.getLayerPos(e);\n            x = self.resizingStartingWidth + pos.x - self.dragStart.x;\n            y = self.resizingStartingHeight + pos.y - self.dragStart.y;\n            if (x < self.style.minColumnWidth) {\n                x = self.style.minColumnWidth;\n            }\n            if (y < self.style.minRowHeight) {\n                y = self.style.minRowHeight;\n            }\n            if (self.dispatchEvent('resizecolumn', {x: x, y: y, draggingItem: self.draggingItem})) { return false; }\n            if (self.scrollBox.scrollLeft > self.scrollBox.scrollWidth - self.attributes.resizeScrollZone\n                    && self.dragMode === 'ew-resize') {\n                self.resize(true);\n                self.scrollBox.scrollLeft += x;\n            }\n            if (self.dragMode === 'ew-resize') {\n                self.sizes.columns[self.draggingItem.header.style === 'rowHeaderCell'\n                       ? 'cornerCell' : self.draggingItem.sortColumnIndex] = x;\n                if (['rowHeaderCell', 'cornerCell'].indexOf(self.draggingItem.header.style) !== -1) {\n                    self.resize(true);\n                }\n                self.resizeChildGrids();\n                return;\n            }\n            if (self.dragMode === 'ns-resize') {\n                if (self.draggingItem.rowOpen) {\n                    self.sizes.trees[self.draggingItem.rowIndex] = y;\n                } else if (self.attributes.globalRowResize) {\n                    self.style.cellHeight = y;\n                } else {\n                    self.sizes.rows[self.draggingItem.rowIndex] = y;\n                }\n                self.dispatchEvent('resizerow', {row: y});\n                self.resizeChildGrids();\n                return;\n            }\n            self.ellipsisCache = {};\n        };\n        self.stopDragResize = function () {\n            self.resize();\n            document.body.removeEventListener('mousemove', self.dragResizeColumn, false);\n            document.body.removeEventListener('mouseup', self.stopDragResize, false);\n            self.setStorageData();\n            self.draw(true);\n            self.ignoreNextClick = true;\n        };\n        self.scrollGrid = function (e) {\n            var pos = self.getLayerPos(e);\n            if (self.attributes.scrollPointerLock && self.pointerLockPosition\n                    && ['horizontal-scroll-box', 'vertical-scroll-box'].indexOf(self.scrollStartMode) !== -1) {\n                self.pointerLockPosition.x += e.movementX;\n                self.pointerLockPosition.y += e.movementY;\n                self.pointerLockPosition.x = Math.min(self.width - self.style.scrollBarWidth, Math.max(0, self.pointerLockPosition.x));\n                self.pointerLockPosition.y = Math.min(self.height - self.style.scrollBarWidth, Math.max(0, self.pointerLockPosition.y));\n                pos = self.pointerLockPosition;\n            }\n            self.scrollMode = self.getCellAt(pos.x, pos.y).context;\n            if (self.scrollMode === 'horizontal-scroll-box' && self.scrollStartMode !== 'horizontal-scroll-box') {\n                self.scrollStartMode = 'horizontal-scroll-box';\n                self.dragStart = pos;\n                self.scrollStart.left = self.scrollBox.scrollLeft;\n                clearTimeout(self.scrollTimer);\n                return;\n            }\n            if (self.scrollMode === 'vertical-scroll-box' && self.scrollStartMode !== 'vertical-scroll-box') {\n                self.scrollStartMode = 'vertical-scroll-box';\n                self.dragStart = pos;\n                self.scrollStart.top = self.scrollBox.scrollTop;\n                clearTimeout(self.scrollTimer);\n                return;\n            }\n            if (self.scrollStartMode === 'vertical-scroll-box'\n                    && self.scrollMode !== 'vertical-scroll-box') {\n                self.scrollMode = 'vertical-scroll-box';\n            }\n            if (self.scrollStartMode === 'horizontal-scroll-box'\n                    && self.scrollMode !== 'horizontal-scroll-box') {\n                self.scrollMode = 'horizontal-scroll-box';\n            }\n            clearTimeout(self.scrollTimer);\n            if (self.scrollModes.indexOf(self.scrollMode) === -1) {\n                return;\n            }\n            if (self.scrollMode === 'vertical-scroll-box') {\n                self.scrollBox.scrollTop = self.scrollStart.top + ((pos.y - self.dragStart.y)\n                    / self.scrollBox.heightBoxRatio);\n            } else if (self.scrollMode === 'vertical-scroll-top') {\n                self.scrollBox.scrollTop -= (self.page * self.style.cellHeight);\n                self.scrollTimer = setTimeout(self.scrollGrid, self.attributes.scrollRepeatRate, e);\n            } else if (self.scrollMode === 'vertical-scroll-bottom') {\n                self.scrollBox.scrollTop += (self.page * self.style.cellHeight);\n                self.scrollTimer = setTimeout(self.scrollGrid, self.attributes.scrollRepeatRate, e);\n            }\n            if (self.scrollMode === 'horizontal-scroll-box') {\n                self.scrollBox.scrollLeft = self.scrollStart.left + ((pos.x - self.dragStart.x)\n                    / self.scrollBox.widthBoxRatio);\n            } else if (self.scrollMode === 'horizontal-scroll-right') {\n                self.scrollBox.scrollLeft += self.attributes.selectionScrollIncrement;\n                self.scrollTimer = setTimeout(self.scrollGrid, self.attributes.scrollRepeatRate, e);\n            } else if (self.scrollMode === 'horizontal-scroll-left') {\n                self.scrollBox.scrollLeft -= self.attributes.selectionScrollIncrement;\n                self.scrollTimer = setTimeout(self.scrollGrid, self.attributes.scrollRepeatRate, e);\n            }\n        };\n        self.stopScrollGrid = function () {\n            clearTimeout(self.scrollTimer);\n            if (document.exitPointerLock) {\n                document.exitPointerLock();\n            }\n            document.removeEventListener('mousemove', self.scrollGrid, false);\n        };\n        self.dragReorder = function (e) {\n            var pos, x, y,\n                columReorder = self.dragMode === 'column-reorder',\n                rowReorder = self.dragMode === 'row-reorder';\n            pos = self.getLayerPos(e);\n            x = pos.x - self.dragStart.x;\n            y = pos.y - self.dragStart.y;\n            if (!self.attributes.allowColumnReordering && columReorder) {\n                return;\n            }\n            if (!self.attributes.allowRowReordering && rowReorder) {\n                return;\n            }\n            if (self.dispatchEvent('reordering', {\n                    NativeEvent: e,\n                    source: self.dragStartObject,\n                    target: self.currentCell,\n                    dragMode: self.dragMode\n                })) {\n                return;\n            }\n            if (Math.abs(x) > self.attributes.reorderDeadZone || Math.abs(y) > self.attributes.reorderDeadZone) {\n                self.reorderObject = self.draggingItem;\n                self.reorderTarget = self.currentCell;\n                self.reorderObject.dragOffset = {\n                    x: x,\n                    y: y\n                };\n                self.autoScrollZone(e, columReorder ? pos.x : -1, rowReorder ? pos.y : -1, false);\n            }\n        };\n        self.stopDragReorder = function (e) {\n            var oIndex,\n                tIndex,\n                cr = {\n                    'row-reorder': self.orders.rows,\n                    'column-reorder': self.orders.columns\n                },\n                i = {\n                    'row-reorder': 'rowIndex',\n                    'column-reorder': 'sortColumnIndex'\n                }[self.dragMode];\n            document.body.removeEventListener('mousemove', self.dragReorder, false);\n            document.body.removeEventListener('mouseup', self.stopDragReorder, false);\n            if (self.reorderObject\n                    && self.reorderTarget\n                    && ((self.dragMode === 'column-reorder' && self.reorderTarget.sortColumnIndex > -1\n                        && self.reorderTarget.sortColumnIndex < self.getSchema().length)\n                    || (self.dragMode === 'row-reorder' && self.reorderTarget.rowIndex > -1\n                        && self.reorderTarget.rowIndex < self.data.length))\n                    && self.reorderObject[i] !== self.reorderTarget[i]\n                    && !self.dispatchEvent('reorder', {\n                        NativeEvent: e,\n                        source: self.reorderObject,\n                        target: self.reorderTarget,\n                        dragMode: self.dragMode\n                    })) {\n                self.ignoreNextClick = true;\n                oIndex = cr[self.dragMode].indexOf(self.reorderObject[i]);\n                tIndex = cr[self.dragMode].indexOf(self.reorderTarget[i]);\n                cr[self.dragMode].splice(oIndex, 1);\n                cr[self.dragMode].splice(tIndex, 0, self.reorderObject[i]);\n                if(self.dragMode === 'column-reorder') {\n                  self.orders.columns = cr[self.dragMode];\n                } else {\n                  self.orders.rows = cr[self.dragMode];\n                }\n                self.resize();\n                self.setStorageData();\n            }\n            self.reorderObject = undefined;\n            self.reorderTarget = undefined;\n            self.draw(true);\n        };\n        self.dragMove = function (e) {\n            if (self.dispatchEvent('moving', {NativeEvent: e, cell: self.currentCell})) { return; }\n            var pos = self.getLayerPos(e);\n            self.moveOffset = {\n                x: self.currentCell.columnIndex - self.dragStartObject.columnIndex,\n                y: self.currentCell.rowIndex - self.dragStartObject.rowIndex\n            };\n            if (Math.abs(pos.x) > self.attributes.reorderDeadZone || Math.abs(pos.y) > self.attributes.reorderDeadZone) {\n                setTimeout(function () {\n                    self.autoScrollZone(e, pos.x, pos.y, false);\n                }, 1);\n            }\n        };\n        self.stopDragMove = function (e) {\n            document.body.removeEventListener('mousemove', self.dragMove, false);\n            document.body.removeEventListener('mouseup', self.stopDragMove, false);\n            var b = self.getSelectionBounds();\n            if (self.dispatchEvent('endmove', {NativeEvent: e, cell: self.currentCell})) {\n                self.movingSelection = undefined;\n                self.moveOffset = undefined;\n                self.draw(true);\n                return;\n            }\n            if (self.moveOffset) {\n                self.moveTo(self.movingSelection, b.left + self.moveOffset.x, b.top + self.moveOffset.y);\n                self.moveSelection(self.moveOffset.x, self.moveOffset.y);\n            }\n            self.movingSelection = undefined;\n            self.moveOffset = undefined;\n            self.draw(true);\n        };\n        self.freezeMove = function (e) {\n            if (self.dispatchEvent('freezemoving', {NativeEvent: e, cell: self.currentCell})) { return; }\n            var pos = self.getLayerPos(e);\n            self.ignoreNextClick = true;\n            self.freezeMarkerPosition = pos;\n            if (self.currentCell && self.currentCell.rowIndex !== undefined && self.dragMode === 'frozen-row-marker') {\n                self.scrollBox.scrollTop = 0;\n                self.frozenRow = self.currentCell.rowIndex + 1;\n            }\n            if (self.currentCell && self.currentCell.columnIndex !== undefined && self.dragMode === 'frozen-column-marker') {\n                self.scrollBox.scrollLeft = 0;\n                self.frozenColumn = self.currentCell.columnIndex + 1;\n            }\n            if (Math.abs(pos.x) > self.attributes.reorderDeadZone || Math.abs(pos.y) > self.attributes.reorderDeadZone) {\n                setTimeout(function () {\n                    self.autoScrollZone(e, pos.x, pos.y, false);\n                }, 1);\n            }\n        };\n        self.stopFreezeMove = function (e) {\n            document.body.removeEventListener('mousemove', self.freezeMove, false);\n            document.body.removeEventListener('mouseup', self.stopFreezeMove, false);\n            self.freezeMarkerPosition = undefined;\n            if (self.dispatchEvent('endfreezemove', {NativeEvent: e})) {\n                self.frozenRow = self.startFreezeMove.x;\n                self.frozenColumn = self.startFreezeMove.y;\n                self.draw(true);\n                return;\n            }\n            self.draw(true);\n        };\n        self.mousedown = function (e, overridePos) {\n            self.lastMouseDownTarget = e.target;\n            if (self.dispatchEvent('mousedown', {NativeEvent: e, cell: self.currentCell})) { return; }\n            if (!self.hasFocus) {\n                return;\n            }\n            if (e.button === 2 || self.input) { return; }\n            var ctrl = (e.ctrlKey || e.metaKey),\n                move = /-move/.test(self.dragMode),\n                freeze = /frozen-row-marker|frozen-column-marker/.test(self.dragMode),\n                resize = /-resize/.test(self.dragMode);\n            self.dragStart = overridePos || self.getLayerPos(e);\n            self.scrollStart = {\n                left: self.scrollBox.scrollLeft,\n                top: self.scrollBox.scrollTop\n            };\n            self.dragStartObject = self.getCellAt(self.dragStart.x, self.dragStart.y);\n            self.dragAddToSelection = !self.dragStartObject.selected;\n            if (!ctrl && !e.shiftKey && !/(vertical|horizontal)-scroll-(bar|box)/\n                    .test(self.dragStartObject.context)\n                    && self.currentCell\n                    && !self.currentCell.isColumnHeader\n                    && !move\n                    && !freeze\n                    && !resize) {\n                self.selections = [];\n            }\n            if (self.dragStartObject.isGrid) {\n                return;\n            }\n            if (self.scrollModes.indexOf(self.dragStartObject.context) !== -1) {\n                self.scrollMode = self.dragStartObject.context;\n                self.scrollStartMode = self.dragStartObject.context;\n                self.scrollGrid(e);\n                if (self.attributes.scrollPointerLock\n                        && ['horizontal-scroll-box', 'vertical-scroll-box'].indexOf(self.scrollStartMode) !== -1) {\n                    self.pointerLockPosition = {\n                        x: self.dragStart.x,\n                        y: self.dragStart.y\n                    };\n                    self.canvas.requestPointerLock();\n                }\n                document.addEventListener('mousemove', self.scrollGrid, false);\n                document.addEventListener('mouseup', self.stopScrollGrid, false);\n                self.ignoreNextClick = true;\n                return;\n            }\n            if (self.dragMode === 'cell') {\n                self.selecting = true;\n                if ((self.attributes.selectionMode === 'row' || self.dragStartObject.columnIndex === -1)\n                        && self.dragStartObject.rowIndex > -1) {\n                    self.selectRow(self.dragStartObject.rowIndex, ctrl, null);\n                } else if (self.attributes.selectionMode !== 'row') {\n                    self.mousemove(e);\n                }\n                return;\n            }\n            if (move) {\n                self.draggingItem = self.dragItem;\n                self.movingSelection = self.selections.concat([]);\n                self.dragging = self.dragStartObject;\n                if (self.dispatchEvent('beginmove', {NativeEvent: e, cell: self.currentCell})) { return; }\n                document.body.addEventListener('mousemove', self.dragMove, false);\n                document.body.addEventListener('mouseup', self.stopDragMove, false);\n                return self.mousemove(e);\n            }\n            if (freeze) {\n                self.draggingItem = self.dragItem;\n                self.startFreezeMove = {\n                    x: self.frozenRow,\n                    y: self.frozenColumn\n                };\n                if (self.dispatchEvent('beginfreezemove', {NativeEvent: e})) { return; }\n                document.body.addEventListener('mousemove', self.freezeMove, false);\n                document.body.addEventListener('mouseup', self.stopFreezeMove, false);\n                return self.mousemove(e);\n            }\n            if (resize) {\n                self.draggingItem = self.dragItem;\n                if (self.draggingItem.rowOpen) {\n                    self.resizingStartingHeight = self.sizes.trees[self.draggingItem.rowIndex];\n                } else {\n                    self.resizingStartingHeight = self.sizes.rows[self.draggingItem.rowIndex] || self.style.cellHeight;\n                }\n                self.resizingStartingWidth = self.sizes.columns[self.draggingItem.header.style === 'rowHeaderCell'\n                       ? 'cornerCell' : self.draggingItem.sortColumnIndex] || self.draggingItem.width;\n                document.body.addEventListener('mousemove', self.dragResizeColumn, false);\n                document.body.addEventListener('mouseup', self.stopDragResize, false);\n                return;\n            }\n            if (['row-reorder', 'column-reorder'].indexOf(self.dragMode) !== -1) {\n                self.draggingItem = self.dragStartObject;\n                document.body.addEventListener('mousemove', self.dragReorder, false);\n                document.body.addEventListener('mouseup', self.stopDragReorder, false);\n                return;\n            }\n        };\n        self.mouseup = function (e) {\n            clearTimeout(self.scrollTimer);\n            self.cellBoundaryCrossed = true;\n            self.rowBoundaryCrossed = true;\n            self.columnBoundaryCrossed = true;\n            self.selecting = undefined;\n            self.draggingItem = undefined;\n            self.dragStartObject = undefined;\n            if (self.dispatchEvent('mouseup', {NativeEvent: e, cell: self.currentCell})) { return; }\n            if (!self.hasFocus && e.target !== self.canvas) {\n                return;\n            }\n            if (self.currentCell && self.currentCell.grid !== undefined) {\n                return;\n            }\n            if (self.contextMenu || self.input) { return; }\n            if (self.dragStart && self.isInGrid(self.dragStart)) {\n                self.controlInput.focus();\n            }\n            e.preventDefault();\n        };\n        // gets the horizontal adjacent cells as well as first/last based on column visibility\n        self.getAdjacentCells = function () {\n            var x,\n                i,\n                s = self.getSchema(),\n                o = {};\n            for (x = 0; x < s.length; x += 1) {\n                i = self.orders.columns[x];\n                if (!s[i].hidden) {\n                    if (o.first === undefined) {\n                        o.first = x;\n                        o.left = x;\n                    }\n                    o.last = x;\n                    if (x > self.activeCell.columnIndex && o.right === undefined) {\n                        o.right = x;\n                    }\n                    if (x < self.activeCell.columnIndex) {\n                        o.left = x;\n                    }\n                }\n            }\n            if (o.right === undefined) {\n                o.right = o.last;\n            }\n            return o;\n        };\n        self.keydown = function (e) {\n            var i,\n                ev,\n                adjacentCells = self.getAdjacentCells(),\n                x = self.activeCell.columnIndex,\n                y = self.activeCell.rowIndex,\n                ctrl = (e.ctrlKey || e.metaKey),\n                last = self.data.length - 1,\n                s = self.getSchema(),\n                cols = s.length - 1;\n            if (self.dispatchEvent('keydown', {NativeEvent: e, cell: self.currentCell})) { return; }\n            if (!self.hasFocus) {\n                return;\n            }\n            if (self.attributes.showNewRow) {\n                last += 1;\n            }\n            if (e.keyCode === 9) {\n                e.preventDefault();\n            }\n            // esc\n            if (e.keyCode === 27) {\n                self.selections = [];\n                self.draw(true);\n            // ctrl + a\n            } else if (ctrl && e.keyCode === 65) {\n                self.selectAll();\n            //ArrowDown\n            } else if (e.keyCode === 40) {\n                y += 1;\n            //ArrowUp\n            } else if (e.keyCode === 38) {\n                y -= 1;\n            //ArrowLeft Tab\n            } else if (e.keyCode === 37 || (e.shiftKey && e.keyCode === 9)) {\n                x = adjacentCells.left;\n            //ArrowRight Tab\n            } else if (e.keyCode === 39 || (!e.shiftKey && e.keyCode === 9)) {\n                x = adjacentCells.right;\n            //PageUp\n            } else if (e.keyCode === 33) {\n                y -= self.page;\n                e.preventDefault();\n            //PageDown\n            } else if (e.keyCode === 34) {\n                y += self.page;\n                e.preventDefault();\n            //Home ArrowUp\n            } else if (e.keyCode === 36 || (ctrl && e.keyCode === 38)) {\n                y = 0;\n            //End ArrowDown\n            } else if (e.keyCode === 35 || (ctrl && e.keyCode === 40)) {\n                y = self.data.length - 1;\n            //ArrowRight\n            } else if (ctrl && e.keyCode === 39) {\n                x = adjacentCells.last;\n            //ArrowLeft\n            } else if (ctrl && e.keyCode === 37) {\n                x = adjacentCells.first;\n            }\n            //Enter\n            if (e.keyCode === 13) {\n                return self.beginEditAt(x, y, e);\n            }\n            //Space\n            if (e.keyCode === 32) {\n                self.selections = [];\n                self.selections[Math.max(y, 0)] = [];\n                self.selections[Math.max(y, 0)].push(x);\n                self.selectionBounds = self.getSelectionBounds();\n                if (self.attributes.selectionMode === 'row') {\n                    for (i = self.selectionBounds.top; i <= self.selectionBounds.bottom; i += 1) {\n                        self.selectRow(i, ctrl, null, true);\n                    }\n                } else {\n                    self.selectArea(undefined, ctrl);\n                }\n                e.preventDefault();\n                self.draw(true);\n                return;\n            }\n            if (x < 0 || Number.isNaN(x)) {\n                x = adjacentCells.first;\n            }\n            if (y > last) {\n                y = last;\n            }\n            if (y < 0 || Number.isNaN(y)) {\n                y = 0;\n            }\n            if (x > cols) {\n                x = adjacentCells.last;\n            }\n            // TODO - most likley some column order related bugs in key based selection\n            // Arrows\n            if (e.shiftKey && [37, 38, 39, 40].indexOf(e.keyCode) !== -1) {\n                self.selections[Math.max(y, 0)] = self.selections[Math.max(y, 0)] || [];\n                self.selections[Math.max(y, 0)].push(x);\n                self.selectionBounds = self.getSelectionBounds();\n                self.selectArea(undefined, ctrl);\n                self.draw(true);\n            }\n            if (x !== self.activeCell.columnIndex || y !== self.activeCell.rowIndex) {\n                self.scrollIntoView(\n                  x !== self.activeCell.columnIndex ? x : undefined,\n                  y !== self.activeCell.rowIndex && !Number.isNaN(y) ? y : undefined\n                );\n\n                self.setActiveCell(x, y);\n                if (!e.shiftKey && self.attributes.selectionFollowsActiveCell) {\n                    if (!ctrl) {\n                        self.selections = [];\n                    }\n                    self.selections[y] = self.selections[y] || [];\n                    self.selections[y].push(x);\n                    ev = {\n                        selectedData: self.getSelectedData(),\n                        selections: self.selections,\n                        selectionBounds: self.getSelectionBounds()\n                    };\n                    Object.defineProperty(ev, 'selectedData', {\n                        get: function () {\n                            return self.getSelectedData();\n                        }\n                    });\n                    self.dispatchEvent('selectionchanged', ev);\n                }\n                self.draw(true);\n            }\n        };\n        self.keyup = function (e) {\n            if (self.dispatchEvent('keyup', {NativeEvent: e, cell: self.currentCell})) { return; }\n            if (!self.hasFocus) {\n                return;\n            }\n        };\n        self.keypress = function (e) {\n            if (!self.hasFocus) {\n                return;\n            }\n            if (self.dispatchEvent('keypress', {NativeEvent: e, cell: self.currentCell})) { return; }\n        };\n        self.dblclick = function (e) {\n            if (self.dispatchEvent('dblclick', {NativeEvent: e, cell: self.currentCell})) { return; }\n            if (!self.hasFocus) {\n                return;\n            }\n            if (self.currentCell.context === 'ew-resize'\n                    && self.currentCell.style === 'columnHeaderCell') {\n                self.fitColumnToValues(self.currentCell.header.name);\n            } else if (self.currentCell.context === 'ew-resize'\n                    && self.currentCell.style === 'cornerCell') {\n                self.autosize();\n            } else if (['cell', 'activeCell'].indexOf(self.currentCell.style) !== -1) {\n                self.beginEditAt(self.currentCell.columnIndex, self.currentCell.rowIndex);\n            }\n        };\n        self.scrollWheel = function (e) {\n            var l,\n                t,\n                ev = e,\n                deltaX = e.deltaX === undefined ? e.NativeEvent.deltaX : e.deltaX,\n                deltaY = e.deltaY === undefined ? e.NativeEvent.deltaY : e.deltaY,\n                deltaMode = e.deltaMode === undefined ? e.NativeEvent.deltaMode : e.deltaMode;\n            if (wheeling) {\n                return;\n            }\n            if (self.dispatchEvent('wheel', {NativeEvent: e})) {\n                return;\n            }\n            var e = e.NativeEvent || e;\n            self.touchHaltAnimation = true;\n            l = self.scrollBox.scrollLeft;\n            t = self.scrollBox.scrollTop;\n            if (self.hasFocus) {\n                //BUG Issue 42: https://github.com/TonyGermaneri/canvas-datagrid/issues/42\n                //https://stackoverflow.com/questions/20110224/what-is-the-height-of-a-line-in-a-wheel-event-deltamode-dom-delta-line\n                if (deltaMode === 1) {\n                    // line mode = 17 pixels per line\n                    deltaY = deltaY * 17;\n                }\n                if ((self.scrollBox.scrollTop  < self.scrollBox.scrollHeight && deltaY > 0)\n                        || (self.scrollBox.scrollLeft < self.scrollBox.scrollWidth && deltaX > 0)\n                        || (self.scrollBox.scrollTop > 0 && deltaY < 0)\n                        || (self.scrollBox.scrollLeft > 0 && deltaX < 0)) {\n                    ev.preventDefault(e);\n                }\n                wheeling = setTimeout(function () {\n                    wheeling = undefined;\n                    self.scrollBox.scrollTo(deltaX + l, deltaY + t);\n                }, 1);\n            }\n        };\n        self.pasteItem = function (clipData, x, y, mimeType) {\n            var l, s = self.getVisibleSchema(), yi = y - 1, sel = [];\n            function normalizeRowData(importingRow, existingRow, offsetX, schema, mimeType, rowIndex) {\n                var r = existingRow;\n                if (!Array.isArray(importingRow) && importingRow !== null && typeof importingRow === 'object') {\n                    importingRow = Object.keys(importingRow).map(function (colKey) {\n                        return importingRow[colKey];\n                    });\n                }\n                if (/^text\\/html/.test(mimeType)) {\n                    importingRow = importingRow.substring(4, importingRow.length - 5).split('</td><td>');\n                }\n                if (typeof importingRow === 'string') {\n                    importingRow = [importingRow];\n                }\n                sel[rowIndex] = [];\n                importingRow.forEach(function (cellData, colIndex) {\n                    var cName = schema[colIndex + offsetX].name;\n                    if (importingRow[colIndex] === undefined || importingRow[colIndex] === null) {\n                        r[cName] = existingRow[cName];\n                        return;\n                    }\n                    sel[rowIndex].push(colIndex + offsetX);\n                    r[cName] = importingRow[colIndex];\n                });\n                return r;\n            }\n            if (/^text\\/html/.test(mimeType)) {\n                if (!/^(<meta[^>]+>)?<table>/.test(clipData.substring(0, 29))) {\n                    console.warn('Unrecognized HTML format.  HTML must be a simple table, e.g.: <table><tr><td>data</td></tr></table>.  Data with the mime type text/html not in this format will not be imported as row data.');\n                    return;\n                }\n                // strip table beginning and ending off, then split at rows\n                clipData = clipData.substring(clipData.indexOf('<table><tr>') + 11, clipData.length - 13).split('</tr><tr>');\n                // ditch any headers on the table\n                clipData = clipData.filter(function (row) {\n                    return !/^<th>|^<thead>/.test(row);\n                });\n            } else {\n                clipData = clipData.split('\\n');\n            }\n            l = clipData.length;\n            clipData.forEach(function (rowData) {\n                yi += 1;\n                var i = self.orders.rows[yi];\n                self.data[i] = normalizeRowData(rowData, self.data[i], x, s, mimeType, i);\n            });\n            self.selections = sel;\n            return l;\n        };\n        self.getNextVisibleColumnIndex = function (visibleColumnIndex) {\n            var x, s = self.getVisibleSchema();\n            for (x = 0; x < s.length; x += 1) {\n                if (s[x].columnIndex === visibleColumnIndex) {\n                    return s[x + 1].columnIndex;\n                }\n            }\n            return -1;\n        };\n        self.getVisibleColumnIndexOf = function (columnIndex) {\n            var x, s = self.getVisibleSchema();\n            for (x = 0; x < s.length; x += 1) {\n                if (s[x].columnIndex === columnIndex) {\n                    return x;\n                }\n            }\n            return -1;\n        };\n        self.paste = function (e) {\n            var d;\n            function getItem(dti) {\n                var type = dti.type;\n                dti.getAsString(function (s) {\n                    self.pasteItem(s, self.getVisibleColumnIndexOf(self.activeCell.columnIndex), self.activeCell.rowIndex, type);\n                    self.draw();\n                });\n            }\n            d = Array.prototype.filter.call(e.clipboardData.items, function (dti) {\n                return dti.type === 'text/html';\n            })[0] || Array.prototype.filter(function (dti) {\n                return dti.type === 'text/csv';\n            })[0] || Array.prototype.filter(function (dti) {\n                return dti.type === 'text/plain';\n            })[0];\n            if (!d) {\n                console.warn('Cannot find supported clipboard data type.  Supported types are text/html, text/csv, text/plain.');\n                return;\n            }\n            getItem(d);\n        };\n        self.cut = function (e) {\n            self.copy(e);\n            self.forEachSelectedCell(function (data, index, colName) {\n                data[index][colName] = '';\n            });\n        };\n        self.copy = function (e) {\n            if (self.dispatchEvent('copy', {NativeEvent: e})) { return; }\n            if (!self.hasFocus || !e.clipboardData) { return; }\n            var t,\n                d,\n                data = (self.data || []),\n                tableRows = [],\n                textRows = [],\n                outputHeaders = {},\n                outputHeaderKeys,\n                sData = self.getSelectedData(),\n                s = self.getSchema();\n            function htmlSafe(v) {\n                return v.replace(/</g, '&lt;').replace(/>/g, '&gt;');\n            }\n            function fCopyCell(v) {\n                v = v === null || v === undefined ? '' : v;\n                return '<td>' + (typeof v === 'string' ? htmlSafe(v) : v) + '</td>';\n            }\n            function addHeaders(headers, useHtml) {\n                if (!s.length || headers.length < 2) { return ''; }\n                var h = [];\n                if (useHtml) {\n                    h.push('<tr>');\n                }\n                s.forEach(function (column, columnIndex) {\n                    // intentional redefinition of column\n                    column = s[self.orders.columns[columnIndex]];\n                    if (!column.hidden && headers.indexOf(column.name) !== -1) {\n                        var hVal = (column.name || column.title) || '';\n                        if (useHtml) {\n                            h.push('<th>' + htmlSafe(hVal) + '</th>');\n                        } else {\n                            h.push('\"' + hVal.replace(/\"/g, '\"\"') + '\"');\n                        }\n                    }\n                });\n                h.push(useHtml ? '</tr>' : '\\n');\n                return h.join(useHtml ? '' : ',');\n            }\n            function addCellValue(val, trRow, textRow, column) {\n                // escape strings\n                if (val !== null\n                        && val !== false\n                        && val !== undefined\n                        && val.replace) {\n                    trRow.push(fCopyCell(val));\n                    textRow.push('\"' + val.replace(/\"/g, '\"\"') + '\"');\n                    return;\n                }\n                if (val !== undefined) {\n                    textRow.push(val);\n                    trRow.push(fCopyCell(val));\n                    return;\n                }\n                // issue #66\n                textRow.push('');\n                trRow.push('<td>&nbsp;</td>');\n            }\n            if (sData.length > 0) {\n                sData.forEach(function (row) {\n                    var rowKeys = Object.keys(row);\n                    if (row) {\n                        var trRow = [],\n                            textRow = [],\n                            sSorted = [];\n                        // HACK: https://github.com/TonyGermaneri/canvas-datagrid/issues/181\n                        // I can't use sort here or O(1), so hacks\n                        s.forEach(function (column, columnIndex) {\n                            sSorted.push(s[self.orders.columns[columnIndex]]);\n                        });\n                        sSorted.forEach(function (column, columnIndex) {\n                            if (rowKeys.indexOf(column.name) !== -1) {\n                                outputHeaders[column.name] = true;\n                                // escape strings\n                                addCellValue(row[column.name], trRow, textRow, column);\n                            }\n                        });\n                        tableRows.push(trRow.join(''));\n                        textRows.push(textRow.join(','));\n                    }\n                });\n                outputHeaderKeys = Object.keys(outputHeaders);\n                t = addHeaders(outputHeaderKeys) + textRows.join('\\n');\n                d = '<table>' + addHeaders(outputHeaderKeys, true) + '<tr>' + tableRows.join('</tr><tr>') + '</tr></table>';\n                if (outputHeaderKeys.length === 1) {\n                    // if there was only one cell selected, remove the quotes from the string\n                    t = t.substring(1, t.length -1);\n                }\n                e.clipboardData.setData('text/html', d);\n                e.clipboardData.setData('text/plain', t);\n                e.clipboardData.setData('text/csv', t);\n                e.clipboardData.setData('application/json', JSON.stringify(sData));\n                e.preventDefault();\n            }\n        };\n        return;\n    };\n}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\n\n/***/ }),\n/* 5 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*jslint browser: true, unparam: true, todo: true, plusplus: true*/\n/*globals define: true, MutationObserver: false, requestAnimationFrame: false, performance: false, btoa: false*/\n!(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = (function () {\n    'use strict';\n    return function (self) {\n        var touchTimerMs = 50,\n            debounceTouchMove,\n            touchMoving,\n            touchScrollTimeout;\n        self.scrollAnimation = {};\n        self.touchDelta = {};\n        self.touchAnimateTo = {};\n        self.animationFrames = 0;\n        self.getTouchPos = function (e, touchIndex) {\n            var t = touchIndex ? e.touches[touchIndex] : e.touches[0],\n                rect = self.canvas.getBoundingClientRect(),\n                pos;\n            if (!t) { return; }\n            pos = {\n                x: t.clientX - rect.left,\n                y: t.clientY - rect.top\n            };\n            if (self.isChildGrid) {\n                pos.x -= self.canvasOffsetLeft;\n                pos.y -= self.canvasOffsetTop;\n            }\n            return {\n                x: pos.x,\n                y: pos.y,\n                rect: rect\n            };\n        };\n        // shamelessly stolen from from https://gist.github.com/gre/1650294\n        self.easingFunctions = {\n            linear: function (t) { return t; },\n            easeInQuad: function (t) { return t * t; },\n            easeOutQuad: function (t) { return t * (2 - t); },\n            easeInOutQuad: function (t) { return t < 0.5 ? 2 * t * t : -1 + (4 - 2 * t) * t; },\n            easeInCubic: function (t) { return t * t * t; },\n            easeOutCubic: function (t) { return (--t) * t * t + 1; },\n            easeInOutCubic: function (t) { return t < 0.5 ? 4 * t * t * t : (t - 1) * (2 * t - 2) * (2 * t - 2) + 1; },\n            easeInQuart: function (t) { return t * t * t * t; },\n            easeOutQuart: function (t) { return 1 - (--t) * t * t * t; },\n            easeInOutQuart: function (t) { return t < 0.5 ? 8 * t  * t  * t * t : 1 - 8 * (--t) * t * t * t; },\n            easeInQuint: function (t) { return t * t * t * t * t; },\n            easeOutQuint: function (t) { return 1 + (--t) * t *  t * t * t; },\n            easeInOutQuint: function (t) { return t < 0.5 ? 16 * t * t * t * t * t : 1 + 16 * (--t) * t * t * t * t; }\n        };\n        self.easing = function (t, b, c, d) {\n            return c * self.easingFunctions[self.attributes.touchEasingMethod](t / d) + b;\n        };\n        self.calculatePPSTimed = function () {\n            self.xPPST = -((self.touchDelta.x - self.touchSigmaTimed.x) / (self.touchDelta.t - self.touchSigmaTimed.t));\n            self.yPPST = -((self.touchDelta.y - self.touchSigmaTimed.y) / (self.touchDelta.t - self.touchSigmaTimed.t));\n            self.touchSigmaTimed = {\n                x: self.touchDelta.x,\n                y: self.touchDelta.y,\n                t: performance.now()\n            };\n        };\n        self.calculatePPS = function () {\n            self.xPPS = -((self.touchDelta.x - self.touchSigma.x) / (self.touchDelta.t - self.touchSigma.t));\n            self.yPPS = -((self.touchDelta.y - self.touchSigma.y) / (self.touchDelta.t - self.touchSigma.t));\n            self.touchSigma = {\n                x: self.touchDelta.x,\n                y: self.touchDelta.y,\n                t: performance.now()\n            };\n        };\n        self.touchEndAnimation = function () {\n            if (!self.canvas || !self.scrollBox.scrollTo) { return requestAnimationFrame(self.touchEndAnimation); }\n            var n = performance.now(),\n                d = self.attributes.touchReleaseAnimationDurationMs,\n                t;\n            t = n - self.touchDelta.t;\n            self.animationFrames += 1;\n            self.scrollAnimation.x = self.easing(t, self.touchDelta.scrollLeft, self.touchAnimateTo.x, d);\n            self.scrollAnimation.y = self.easing(t, self.touchDelta.scrollTop, self.touchAnimateTo.y, d);\n            if (t > d || (self.scrollAnimation.y === self.scrollBox.scrollTop\n                    && self.scrollAnimation.x === self.scrollBox.scrollLeft) || self.stopAnimation) {\n                return;\n            }\n            self.scrollBox.scrollTo(self.scrollAnimation.x, self.scrollAnimation.y);\n            requestAnimationFrame(self.touchEndAnimation);\n        };\n        self.touchEditCell = function (cell) {\n            self.beginEditAt(cell.columnIndex, cell.rowIndex);\n        };\n        self.touchCell = function (e) {\n            return function () {\n                clearInterval(self.calculatePPSTimer);\n                var i, pos = self.getTouchPos(e);\n                if (Math.abs(self.touchDelta.x) + Math.abs(self.touchDelta.y) < self.attributes.touchDeadZone) {\n                    i = self.getCellAt(pos.x, pos.y);\n                    if (!i) { return; }\n                    if (self.touchingCell && self.touchingCell.rowIndex === i.rowIndex\n                            && self.touchingCell.columnIndex === i.columnIndex) {\n                        self.touchEditCell(i);\n                        return;\n                    }\n                    if (self.input && self.input.editCell) {\n                        self.endEdit();\n                    }\n                    self.touchingCell = i;\n                    self.selectArea({\n                        top: i.rowIndex,\n                        bottom: i.rowIndex,\n                        left: i.columnIndex,\n                        right: i.columnIndex\n                    });\n                    self.draw(true);\n                }\n            };\n        };\n        self.touchstart = function (e) {\n            if (e.changedTouches[0]) {\n                self.touchStart = self.getTouchPos(e);\n                self.startingCell = self.getCellAt(self.touchStart.x, self.touchStart.y, true);\n            }\n            if (self.dispatchEvent('touchstart', {NativeEvent: e, cell: self.startingCell})) { return; }\n            self.disposeContextMenu();\n            clearInterval(self.calculatePPSTimer);\n            clearTimeout(self.touchContextTimeout);\n            self.touchStartEvent = e;\n            self.stopAnimation = true;\n            self.animationFrames = 0;\n            self.stopPropagation(e);\n            e.preventDefault();\n            if (e.touches.length === 1 && e.changedTouches[0] && !self.zoomAltered) {\n                self.touchLength = 1;\n                self.touchStart = self.touchStart || self.touchStart1;\n                self.touchScrollStart = {\n                    x: self.scrollBox.scrollLeft,\n                    y: self.scrollBox.scrollTop,\n                    t: performance.now()\n                };\n                self.touchDelta = {\n                    x: 0,\n                    y: 0,\n                    scrollLeft: self.scrollBox.scrollLeft,\n                    scrollTop: self.scrollBox.scrollTop,\n                    t: self.touchScrollStart.t\n                };\n                self.touchSigma = {\n                    x: self.touchDelta.x,\n                    y: self.touchDelta.y,\n                    t: self.touchDelta.t\n                };\n                self.touchSigmaTimed = {\n                    x: self.touchDelta.x,\n                    y: self.touchDelta.y,\n                    t: self.touchDelta.t\n                };\n                self.touchContextTimeout = setTimeout(function () {\n                    self.contextmenuEvent(e, self.touchStart);\n                }, self.attributes.touchContextMenuTimeMs);\n                self.calculatePPSTimer = setInterval(self.calculatePPSTimed, touchTimerMs);\n                if (self.startingCell && (self.startingCell.isGrid || ['tree', 'inherit'].indexOf(self.startingCell.context) !== -1)) {\n                    self.hasFocus = false;\n                    return;\n                }\n                self.hasFocus = true;\n                if (self.startingCell.isHeader) {\n                    if (self.startingCell.isRowHeader) {\n                        self.selectArea({\n                            top: self.startingCell.rowIndex,\n                            bottom: self.startingCell.rowIndex,\n                            left: 0,\n                            right: self.getVisibleSchema().length - 1,\n                        });\n                        self.draw(true);\n                    } else if (self.startingCell.isColumnHeader) {\n                        if (self.attributes.columnHeaderClickBehavior === 'sort') {\n                            if (self.orderBy === self.startingCell.header.name) {\n                                self.orderDirection = self.orderDirection === 'asc' ? 'desc' : 'asc';\n                            } else {\n                                self.orderDirection = 'asc';\n                            }\n                            self.order(self.startingCell.header.name, self.orderDirection);\n                        }\n                        if (self.attributes.columnHeaderClickBehavior === 'select') {\n                            self.selectArea({\n                                top: 0,\n                                bottom: self.data.length - 1,\n                                left: self.startingCell.columnIndex,\n                                right: self.startingCell.columnIndex,\n                            });\n                            self.draw(true);\n                        }\n                    }\n                    self.touchEndEvents(e);\n                    return;\n                }\n            }\n            if (self.zoomAltered) { return; }\n            document.body.addEventListener('touchmove', self.touchmove, {passive: false});\n            document.body.addEventListener('touchend', self.touchend, false);\n            document.body.addEventListener('touchcancel', self.touchcancel, false);\n            self.draw(true);\n        };\n        self.touchSelect = function (cell, handleType) {\n            if (cell.rowIndex === undefined || cell.columnIndex === undefined) { return; }\n            self.touchSelecting = true;\n            var bounds = self.getSelectionBounds();\n            if (handleType === 'selection-handle-bl'\n                    && cell.rowIndex >= bounds.top\n                    && cell.columnIndex <= bounds.right) {\n                bounds.bottom = cell.rowIndex;\n                bounds.left = cell.columnIndex;\n            } else if (handleType === 'selection-handle-tl'\n                    && cell.rowIndex <= bounds.bottom\n                    && cell.columnIndex <= bounds.right) {\n                bounds.top = cell.rowIndex;\n                bounds.left = cell.columnIndex;\n            } else if (handleType === 'selection-handle-tr'\n                    && cell.rowIndex <= bounds.bottom\n                    && cell.columnIndex >= bounds.left) {\n                bounds.top = cell.rowIndex;\n                bounds.right = cell.columnIndex;\n            } else if (handleType === 'selection-handle-br'\n                    && cell.rowIndex >= bounds.top\n                    && cell.columnIndex >= bounds.left) {\n                bounds.bottom = cell.rowIndex;\n                bounds.right = cell.columnIndex;\n            }\n            if (self.attributes.selectionMode === 'row' || cell.rowIndex === -1) {\n                bounds.left = 0;\n                bounds.right = self.getSchema().length - 1;\n            } else {\n                bounds.left = Math.max(0, bounds.left);\n            }\n            self.selectArea(bounds);\n            self.draw(true);\n        };\n        function touchMove(e) {\n            var ch, rw, rScrollZone, lScrollZone, bScrollZone, tScrollZone, sbw, t1, t2;\n            if (self.dispatchEvent('beforetouchmove', {NativeEvent: e})) { return; }\n            clearTimeout(touchScrollTimeout);\n            if (e.changedTouches[0]) {\n                self.touchPosition = self.getTouchPos(e);\n            }\n            if (e.changedTouches[1]) {\n                self.touchPosition1 = self.getTouchPos(e, 1);\n            }\n            if (Math.abs(self.touchDelta.x) + Math.abs(self.touchDelta.y) > self.attributes.touchDeadZone) {\n                clearTimeout(self.touchContextTimeout);\n            }\n            if (e.touches.length === 2 && self.touchPosition && self.touchPosition1) {\n                t1 = self.touchPosition.y;\n                t2 = self.touchPosition1.y;\n                if (!self.zoomDeltaStart) {\n                    self.zoomDeltaStart = Math.abs(t1 - t2);\n                    self.startScale = self.scale;\n                }\n                self.touchLength = 2;\n                self.scaleDelta = self.zoomDeltaStart - Math.abs(t1 - t2);\n                self.scale = self.startScale - (self.scaleDelta * self.attributes.touchZoomSensitivity);\n                self.scale = Math.min(Math.max(self.scale, self.attributes.touchZoomMin), self.attributes.touchZoomMax);\n                self.zoomAltered = true;\n                self.resize(true);\n                self.resizeChildGrids();\n                return;\n            }\n            if (self.zoomAltered) { return; }\n            self.touchLength = 1;\n            self.touchPosition = self.touchPosition || self.touchPosition1;\n            ch = self.getColumnHeaderCellHeight();\n            rw = self.getRowHeaderCellWidth();\n            rScrollZone = self.width - self.style.scrollBarWidth - self.touchPosition.x < self.attributes.selectionScrollZone;\n            lScrollZone = self.touchPosition.x - rw < self.attributes.selectionScrollZone;\n            bScrollZone = self.height - self.style.scrollBarWidth - self.touchPosition.y < self.attributes.selectionScrollZone;\n            tScrollZone = self.touchPosition.y - ch < self.attributes.selectionScrollZone;\n            sbw = self.style.scrollBarWidth;\n            function touchScroll() {\n                var x = self.scrollBox.scrollLeft,\n                    y = self.scrollBox.scrollTop;\n                x += (rScrollZone ? self.attributes.selectionScrollIncrement : 0);\n                y += (bScrollZone ? self.attributes.selectionScrollIncrement : 0);\n                y -= (tScrollZone ? self.attributes.selectionScrollIncrement : 0);\n                x -= (lScrollZone ? self.attributes.selectionScrollIncrement : 0);\n                self.scrollBox.scrollTo(x, y);\n                touchScrollTimeout = setTimeout(touchScroll, self.attributes.scrollRepeatRate);\n            }\n            e.stopPropagation();\n            self.touchDelta = {\n                x: self.touchPosition.x - self.touchStart.x,\n                y: self.touchPosition.y - self.touchStart.y,\n                scrollLeft: self.scrollBox.scrollLeft,\n                scrollTop: self.scrollBox.scrollTop,\n                t: performance.now()\n            };\n            self.currentCell = self.getCellAt(self.touchPosition.x, self.touchPosition.y);\n            self.dispatchEvent('touchmove', {NativeEvent: e, cell: self.currentCell});\n            self.calculatePPS();\n            self.touchDuration = performance.now() - self.touchScrollStart.t;\n            self.stopAnimation = true;\n            self.animationFrames = 0;\n            if (self.touchSelecting && (rScrollZone || lScrollZone || tScrollZone || bScrollZone)) {\n                touchScroll();\n            }\n            if (/vertical-scroll-/.test(self.startingCell.style)) {\n                self.scrollBox.scrollTop = self.scrollBox.scrollHeight\n                    * ((self.touchPosition.y - ch - sbw) / (self.scrollBox.height - sbw - ch));\n                return;\n            }\n            if (/horizontal-scroll-/.test(self.startingCell.style)) {\n                self.scrollBox.scrollLeft = self.scrollBox.scrollWidth\n                    * ((self.touchPosition.x - rw - sbw) / (self.scrollBox.width - sbw - rw));\n                return;\n            }\n            if (/selection-handle-/.test(self.startingCell.style)) {\n                self.touchSelect(self.currentCell, self.startingCell.style);\n                return;\n            }\n            self.scrollBox.scrollTo(self.touchScrollStart.x - self.touchDelta.x,\n                self.touchScrollStart.y - self.touchDelta.y);\n        };\n        self.touchmove = function (e) {\n            if (touchMoving) {\n                return;\n            }\n            requestAnimationFrame(function () {\n                touchMoving = true;\n                touchMove(e);\n                touchMoving = false;\n            });\n        };\n        self.touchEndEvents = function (e) {\n            self.zoomDeltaStart = undefined;\n            self.touchSelecting = false;\n            clearInterval(self.touchScrollTimeout);\n            clearInterval(self.touchContextTimeout);\n            clearInterval(self.calculatePPSTimer);\n            e.stopPropagation();\n            document.body.removeEventListener('touchmove', self.touchmove, {passive: false});\n            document.body.removeEventListener('touchend', self.touchend, false);\n            document.body.removeEventListener('touchcancel', self.touchcancel, false);\n        };\n        self.touchend = function (e) {\n            if (self.dispatchEvent('touchend', {NativeEvent: e, cell: self.currentCell})) { return; }\n            self.zoomDeltaStart = undefined;\n            if (e.changedTouches[0]) {\n                self.touchPosition = undefined;\n            }\n            if (e.changedTouches[1]) {\n                self.touchPosition1 = undefined;\n            }\n            if (self.zoomAltered) {\n                if (e.touches.length === 0) {\n                    self.zoomAltered = false;\n                }\n                return;\n            }\n            var dz = Math.abs(self.touchDelta.x) + Math.abs(self.touchDelta.y) < self.attributes.touchDeadZone;\n            if (isNaN(self.xPPS)) {\n                self.xPPS = 0;\n            }\n            if (isNaN(self.yPPS)) {\n                self.yPPS = 0;\n            }\n            if (isNaN(self.xPPST)) {\n                self.xPPST = 0;\n            }\n            if (isNaN(self.yPPST)) {\n                self.yPPST = 0;\n            }\n            self.touchAnimateTo.x = self.xPPS * self.attributes.touchReleaseAcceleration;\n            self.touchAnimateTo.y = self.yPPS * self.attributes.touchReleaseAcceleration;\n            self.calculatePPSTimed();\n            if (dz && !self.contextMenu) {\n                self.touchCell(self.touchStartEvent)();\n            } else if (self.animationFrames === 0\n                    && (Math.abs(self.xPPST) > self.attributes.scrollAnimationPPSThreshold\n                        || Math.abs(self.yPPST) > self.attributes.scrollAnimationPPSThreshold)\n                    && !/-scroll-/.test(self.startingCell.style)\n                    && !dz) {\n                self.stopAnimation = false;\n                self.touchEndAnimation();\n            }\n            self.touchEndEvents(e);\n        };\n        self.touchcancel = function (e) {\n            if (self.dispatchEvent('touchcancel', {NativeEvent: e, cell: self.currentCell})) { return; }\n            self.touchEndEvents(e);\n        };\n    };\n}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\n\n/***/ }),\n/* 6 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*jslint browser: true, unparam: true, todo: true*/\n/*globals HTMLElement: false, Reflect: false, define: true, MutationObserver: false, requestAnimationFrame: false, performance: false, btoa: false*/\n!(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = (function () {\n    'use strict';\n    return function (self, ctor) {\n        self.scale = 1;\n        self.orders = {\n            rows: [],\n            columns: []\n        };\n        self.appliedInlineStyles = {};\n        self.cellGridAttributes = {};\n        self.treeGridAttributes = {};\n        self.visibleRowHeights = [];\n        self.hasFocus = false;\n        self.activeCell = {\n            columnIndex: 0,\n            rowIndex: 0\n        };\n        self.innerHTML = '';\n        self.storageName = 'canvasDataGrid';\n        self.invalidSearchExpClass = 'canvas-datagrid-invalid-search-regExp';\n        self.localStyleLibraryStorageKey = 'canvas-datagrid-user-style-library';\n        self.dataType = 'application/x-canvas-datagrid';\n        self.orderBy = null;\n        self.orderDirection = 'asc';\n        self.columnFilters = {};\n        self.filters = {};\n        self.frozenRow = 0;\n        self.frozenColumn = 0;\n        self.ellipsisCache = {};\n        self.scrollCache = { x: [], y: [] };\n        self.scrollBox = {};\n        self.visibleRows = [];\n        self.sizes = {\n            rows: {},\n            columns: {},\n            trees: {}\n        };\n        self.currentFilter = function () {\n            return true;\n        };\n        self.selections = [];\n        self.hovers = {};\n        self.attributes = {};\n        self.style = {};\n        self.formatters = {};\n        self.sorters = {};\n        self.parsers = {};\n        self.schemaHashes = {};\n        self.events = {};\n        self.changes = [];\n        self.scrollIndexTop = 0;\n        self.scrollPixelTop = 0;\n        self.scrollIndexLeft = 0;\n        self.scrollPixelLeft = 0;\n        self.childGrids = {};\n        self.openChildren = {};\n        self.scrollModes = [\n            'vertical-scroll-box',\n            'vertical-scroll-top',\n            'vertical-scroll-bottom',\n            'horizontal-scroll-box',\n            'horizontal-scroll-right',\n            'horizontal-scroll-left'\n        ];\n        self.componentL1Events = {};\n        self.eventNames = ['afterdraw', 'afterrendercell', 'attributechanged', 'beforebeginedit',\n            'beforecreatecellgrid', 'beforedraw', 'beforeendedit', 'beforerendercell', 'beforerendercellgrid',\n            'beginedit', 'cellmouseout', 'cellmouseover', 'click', 'collapsetree', 'contextmenu', 'copy',\n            'datachanged', 'dblclick', 'endedit', 'expandtree', 'formatcellvalue', 'keydown', 'keypress',\n            'keyup', 'mousedown', 'mousemove', 'mouseup', 'newrow', 'ordercolumn', 'rendercell', 'rendercellgrid',\n            'renderorderbyarrow', 'rendertext', 'rendertreearrow', 'reorder', 'reordering', 'resize',\n            'resizecolumn', 'resizerow', 'schemachanged', 'scroll', 'selectionchanged', 'stylechanged',\n            'touchcancel', 'touchend', 'touchmove', 'touchstart', 'wheel'];\n        self.mouse = { x: 0, y: 0};\n        self.getSelectedData = function (expandToRow) {\n            var d = [], s = self.getSchema(), l = self.data.length;\n            if (l === 0) { return []; }\n            self.selections.forEach(function (row, index) {\n                if (!row) { return; }\n                if (index === l) { return; }\n                if (row.length === 0) {\n                    d[index] = null;\n                    return;\n                }\n                d[index] = {};\n                row.forEach(function (col) {\n                    var orderedIndex;\n                    if (col === -1 || !s[col]) { return; }\n                    orderedIndex = self.orders.columns[col];\n                    if (!expandToRow && s[orderedIndex].hidden) { return; }\n                    if (self.data[index]) {\n                        d[index][s[orderedIndex].name] = self.data[index][s[orderedIndex].name];\n                    }\n                });\n            });\n            return d;\n        };\n        self.getColumnHeaderCellHeight = function () {\n            if (!self.attributes.showColumnHeaders) { return 0; }\n            return ((self.sizes.rows[-1] || self.style.columnHeaderCellHeight) * self.scale);\n        };\n        self.getRowHeaderCellWidth = function () {\n            if (!self.attributes.showRowHeaders) { return 0; }\n            return (self.sizes.columns[-1] || self.style.rowHeaderCellWidth) * self.scale;\n        };\n        self.setStorageData = function () {\n            if (!self.attributes.saveAppearance || !self.attributes.name) { return; }\n            var visibility = {};\n            self.getSchema().forEach(function (column) {\n                visibility[column.name] = !column.hidden;\n            });\n            localStorage.setItem(self.storageName + '-' + self.attributes.name, JSON.stringify({\n                sizes: {\n                    rows: self.sizes.rows,\n                    columns: self.sizes.columns\n                },\n                orders: {\n                    rows: self.orders.rows,\n                    columns: self.orders.columns\n                },\n                orderBy: self.orderBy,\n                orderDirection: self.orderDirection,\n                visibility: visibility\n            }));\n        };\n        self.getSchema = function () {\n            return self.schema || self.tempSchema || [];\n        };\n        function fillArray(low, high) {\n            var i = [], x;\n            for (x = low; x <= high; x += 1) {\n                i[x] = x;\n            }\n            return i;\n        }\n        self.createColumnOrders = function () {\n            var s = self.getSchema();\n            self.orders.columns = fillArray(0, s.length - 1);\n        };\n        self.createRowOrders = function () {\n            self.orders.rows = fillArray(0, self.data.length - 1);\n        };\n        self.getVisibleSchema = function () {\n            return self.getSchema().filter(function (col) {\n                return !col.hidden;\n            });\n        };\n        self.applyDefaultValue = function (row, header) {\n            var d = header.defaultValue || '';\n            if (typeof d === 'function') {\n                d = d.apply(self.intf, [header]);\n            }\n            row[header.name] = d;\n        };\n        self.createNewRowData = function () {\n            self.newRow = {};\n            self.getSchema().forEach(function forEachHeader(header) {\n                self.applyDefaultValue(self.newRow, header);\n            });\n        };\n        self.getSchemaNameHash = function (key) {\n            var n = 0;\n            while (self.schemaHashes[key]) {\n                n += 1;\n                key = key + n;\n            }\n            return key;\n        };\n        self.filter = function (type) {\n            var f = self.filters[type];\n            if (!f && type !== undefined) {\n                console.warn('Cannot find filter for type %s, falling back to substring match.', type);\n                f = self.filters.string;\n            }\n            return f;\n        };\n        self.getBestGuessDataType = function (columnName, data) {\n            var t, x, l = data.length;\n            for (x = 0; x < l; x += 1) {\n                if (data[x] !== undefined && data[x] !== null && [null, undefined].indexOf(data[x][columnName]) !== -1) {\n                    t = typeof data[x];\n                    return t === 'object' ? 'string' : t;\n                }\n            }\n            return 'string';\n        };\n        self.drawChildGrids = function () {\n            Object.keys(self.childGrids).forEach(function (gridKey) {\n                self.childGrids[gridKey].draw();\n            });\n        };\n        self.resizeChildGrids = function () {\n            Object.keys(self.childGrids).forEach(function (gridKey) {\n                self.childGrids[gridKey].resize();\n            });\n        };\n        self.autoScrollZone = function (e, x, y, ctrl) {\n            var setTimer,\n                rowHeaderCellWidth = self.getRowHeaderCellWidth(),\n                columnHeaderCellHeight = self.getColumnHeaderCellHeight();\n            if (y !== -1) {\n                if (x > self.width - self.attributes.selectionScrollZone && x < self.width) {\n                    self.scrollBox.scrollLeft += self.attributes.selectionScrollIncrement;\n                    setTimer = true;\n                }\n                if (x - self.attributes.selectionScrollZone - rowHeaderCellWidth < 0) {\n                    self.scrollBox.scrollLeft -= self.attributes.selectionScrollIncrement;\n                    setTimer = true;\n                }\n            }\n            if (y !== -1) {\n                if (y > self.height - self.attributes.selectionScrollZone && y < self.height) {\n                    self.scrollBox.scrollTop += self.attributes.selectionScrollIncrement;\n                    setTimer = true;\n                }\n                if (y - self.attributes.selectionScrollZone - columnHeaderCellHeight < 0) {\n                    self.scrollBox.scrollTop -= self.attributes.selectionScrollIncrement;\n                    setTimer = true;\n                }\n            }\n            if (setTimer && !ctrl && self.currentCell && self.currentCell.columnIndex !== -1) {\n                self.scrollTimer = setTimeout(self.mousemove, self.attributes.scrollRepeatRate, e);\n            }\n        };\n        self.refreshFromOrigialData = function () {\n            self.data = self.originalData.filter(function (row) {\n                return true;\n            });\n        };\n        self.validateColumn = function (c, s) {\n            if (!c.name) {\n                throw new Error('A column must contain at least a name.');\n            }\n            if (s.filter(function (i) { return i.name === c.name; }).length > 0) {\n                throw new Error('A column with the name '\n                    + c.name + ' already exists and cannot be added again.');\n            }\n            return true;\n        };\n        self.setDefaults = function (obj1, obj2, key, def) {\n            obj1[key] = obj2[key] === undefined ? def : obj2[key];\n        };\n        self.setAttributes = function () {\n            self.defaults.attributes.forEach(function eachAttribute(i) {\n                self.setDefaults(self.attributes, self.args, i[0], i[1]);\n            });\n        };\n        self.setStyle = function () {\n            self.defaults.styles.forEach(function eachStyle(i) {\n                self.setDefaults(self.style, self.args.style || {}, i[0], i[1]);\n            });\n        };\n        self.autosize = function (colName) {\n            self.getVisibleSchema().forEach(function (col, colIndex) {\n                if (col.name === colName || colName === undefined) {\n                    self.sizes.columns[colIndex]\n                        = Math.max(self.findColumnMaxTextLength(col.name), self.style.minColumnWidth);\n                }\n            });\n            self.sizes.columns[-1] = self.findColumnMaxTextLength('cornerCell');\n        };\n        self.dispose = function () {\n            if (!self.isChildGrid && self.canvas && self.canvas.parentNode) {\n                self.canvas.parentNode.removeChild(self.canvas);\n            }\n            if(!self.isChildGrid) {\n                document.body.removeChild(self.controlInput)\n            }\n            self.eventParent.removeEventListener('mouseup', self.mouseup, false);\n            self.eventParent.removeEventListener('mousedown', self.mousedown, false);\n            self.eventParent.removeEventListener('dblclick', self.dblclick, false);\n            self.eventParent.removeEventListener('click', self.click, false);\n            self.eventParent.removeEventListener('mousemove', self.mousemove);\n            self.eventParent.removeEventListener('wheel', self.scrollWheel, false);\n            self.canvas.removeEventListener('contextmenu', self.contextmenu, false);\n            self.canvas.removeEventListener('copy', self.copy);\n            self.controlInput.removeEventListener('copy', self.copy);\n            self.controlInput.removeEventListener('cut', self.cut);\n            self.controlInput.removeEventListener('paste', self.paste);\n            self.controlInput.removeEventListener('keypress', self.keypress, false);\n            self.controlInput.removeEventListener('keyup', self.keyup, false);\n            self.controlInput.removeEventListener('keydown', self.keydown, false);\n            window.removeEventListener('resize', self.resize);\n            if (self.observer && self.observer.disconnect) {\n                self.observer.disconnect();\n            }\n        };\n        self.tryLoadStoredSettings = function () {\n            var s;\n            self.reloadStoredValues();\n            if (self.storedSettings\n                    && typeof self.storedSettings.orders === 'object'\n                    && self.storedSettings.orders !== null) {\n                if (self.storedSettings.orders.rows.length >= (self.data || []).length) {\n                    self.orders.rows = self.storedSettings.orders.rows;\n                }\n                s = self.getSchema();\n                if (self.storedSettings.orders.columns.length === s.length) {\n                    self.orders.columns = self.storedSettings.orders.columns;\n                }\n                self.orderBy = self.storedSettings.orderBy === undefined\n                    ? s[0].name : self.storedSettings.orderBy;\n                self.orderDirection = self.storedSettings.orderDirection === undefined\n                    ? 'asc' : self.storedSettings.orderDirection;\n                if (self.storedSettings.orderBy !== undefined && self.getHeaderByName(self.orderBy) && self.orderDirection) {\n                    self.order(self.orderBy, self.orderDirection);\n                }\n            }\n        };\n        self.getDomRoot = function () {\n            return self.shadowRoot ? self.shadowRoot.host : self.parentNode;\n        };\n        self.getFontName = function (fontStyle) {\n            return fontStyle.replace(/\\d+\\.?\\d*px/, '');\n        };\n        self.getFontHeight = function (fontStyle) {\n            return parseFloat(fontStyle, 10);\n        };\n        self.parseStyleValue = function (key) {\n            if (/Font/.test(key)) {\n                self.style[key + 'Height'] = self.getFontHeight(self.style[key]);\n                self.style[key + 'Name'] = self.getFontName(self.style[key]);\n                return;\n            }\n            // when inheriting styles from already instantiated grids, don't parse already parsed values.\n            if (key === 'moveOverlayBorderSegments' && typeof self.style[key] === 'string') {\n                self.style[key] = self.style[key].split(',')\n                    .map(function (i) { return parseInt(i, 10); });\n            }\n        };\n        self.initProp = function (propName) {\n            if (!self.args[propName]) { return; }\n            Object.keys(self.args[propName]).forEach(function (key) {\n                self[propName][key] = self.args[propName][key];\n            });\n        };\n        self.getStyleProperty = function (key) {\n            if (self.styleKeys.indexOf(key) === -1) {\n                return self.parentNodeStyle[key];\n            }\n            return self.style[key];\n        };\n        self.setStyleProperty = function (key, value, supressDrawAndEvent) {\n            var isDim = ['height', 'width', 'minHeight', 'minWidth', 'maxHeight', 'maxWidth'].indexOf(key) !== -1;\n            if (self.styleKeys.indexOf(key) === -1) {\n                self.parentNodeStyle[key] = value;\n            } else {\n                if (/-/.test(key)) {\n                    key = self.dehyphenateProperty(key);\n                }\n                self.style[key] = value;\n                self.parseStyleValue(key);\n            }\n            if (isDim) {\n                self.resize();\n            }\n            if (!supressDrawAndEvent) {\n                self.draw(true);\n                self.dispatchEvent('stylechanged', {name: 'style', value: value});\n            }\n        };\n        self.reloadStoredValues = function () {\n            if (self.attributes.name && self.attributes.saveAppearance) {\n                try {\n                    self.storedSettings = localStorage.getItem(self.storageName + '-' + self.attributes.name);\n                } catch (e) {\n                    console.warn(\"Error loading stored values. \" + e.message);\n                    self.storedSettings = undefined;\n                }\n                if (self.storedSettings) {\n                    try {\n                        self.storedSettings = JSON.parse(self.storedSettings);\n                    } catch (e) {\n                        console.warn('could not read settings from localStore', e);\n                        self.storedSettings = undefined;\n                    }\n                }\n                if (self.storedSettings) {\n                    if (typeof self.storedSettings.sizes === 'object'\n                            && self.storedSettings.sizes !== null) {\n                        self.sizes.rows = self.storedSettings.sizes.rows;\n                        self.sizes.columns = self.storedSettings.sizes.columns;\n                        ['trees', 'columns', 'rows'].forEach(function (i) {\n                            if (!self.sizes[i]) {\n                                self.sizes[i] = {};\n                            }\n                        });\n                    }\n                    if (typeof self.storedSettings.visibility === 'object') {\n                        self.getSchema().forEach(function (column) {\n                            if (self.storedSettings.visibility && self.storedSettings.visibility[column.name] !== undefined) {\n                                column.hidden = !self.storedSettings.visibility[column.name];\n                            }\n                        });\n                    }\n                }\n            }\n        };\n        self.init = function () {\n            if (self.initialized) { return; }\n            function addStyleKeyIfNoneExists(key) {\n                if (self.styleKeys.indexOf(key) === -1) {\n                    self.styleKeys.push(key);\n                }\n            }\n            var publicStyleKeyIntf = {};\n            self.setAttributes();\n            self.setStyle();\n            self.initScrollBox();\n            self.setDom();\n            self.nodeType = 'canvas-datagrid';\n            self.ie = /Trident/.test(window.navigator.userAgent);\n            self.edge = /Edge/.test(window.navigator.userAgent);\n            self.webKit = /WebKit/.test(window.navigator.userAgent);\n            self.moz = /Gecko/.test(window.navigator.userAgent);\n            self.mobile = /Mobile/i.test(window.navigator.userAgent);\n            self.cursorGrab = 'grab';\n            self.cursorGrabing = 'grabbing';\n            self.cursorGrab = self.webKit ? '-webkit-grab' : self.cursorGrab;\n            self.cursorGrabing = self.moz ? '-webkit-grabbing' : self.cursorGrabbing;\n            self.pointerLockPosition = {x: 0, y: 0};\n            Object.keys(self.style).forEach(self.parseStyleValue);\n            self.intf.moveSelection = self.moveSelection;\n            self.intf.moveTo = self.moveTo;\n            self.intf.addEventListener = self.addEventListener;\n            self.intf.removeEventListener = self.removeEventListener;\n            self.intf.dispatchEvent = self.dispatchEvent;\n            /**\n             * Releases grid resources and removes grid elements.\n             * @memberof canvasDatagrid\n             * @name dispose\n             * @method\n             */\n            self.intf.dispose = self.dispose;\n            /**\n             * Appends the grid to another element later.  Not implemented.\n             * @memberof canvasDatagrid\n             * @name appendTo\n             * @method\n             * @param {number} el The element to append the grid to.\n             */\n            self.intf.appendTo = self.appendTo;\n            self.intf.getVisibleCellByIndex = self.getVisibleCellByIndex;\n            self.intf.filters = self.filters;\n            self.intf.sorters = self.sorters;\n            self.intf.autosize = self.autosize;\n            self.intf.beginEditAt = self.beginEditAt;\n            self.intf.endEdit = self.endEdit;\n            self.intf.setActiveCell = self.setActiveCell;\n            self.intf.forEachSelectedCell = self.forEachSelectedCell;\n            self.intf.scrollIntoView = self.scrollIntoView;\n            self.intf.clearChangeLog = self.clearChangeLog;\n            self.intf.gotoCell = self.gotoCell;\n            self.intf.gotoRow = self.gotoRow;\n            self.intf.getHeaderByName = self.getHeaderByName;\n            self.intf.findColumnScrollLeft = self.findColumnScrollLeft;\n            self.intf.findRowScrollTop = self.findRowScrollTop;\n            self.intf.fitColumnToValues = self.fitColumnToValues;\n            self.intf.findColumnMaxTextLength = self.findColumnMaxTextLength;\n            self.intf.disposeContextMenu = self.disposeContextMenu;\n            self.intf.getCellAt = self.getCellAt;\n            self.intf.isCellVisible = self.isCellVisible;\n            self.intf.isRowVisible = self.isRowVisible;\n            self.intf.isColumnVisible = self.isColumnVisible;\n            self.intf.order = self.order;\n            self.intf.draw = self.draw;\n            self.intf.isComponent = self.isComponent;\n            self.intf.selectArea = self.selectArea;\n            self.intf.clipElement = self.clipElement;\n            self.intf.getSchemaFromData = self.getSchemaFromData;\n            self.intf.setFilter = self.setFilter;\n            self.intf.selectRow = self.selectRow;\n            self.intf.parentGrid = self.parentGrid;\n            self.intf.toggleTree = self.toggleTree;\n            self.intf.expandTree = self.expandTree;\n            self.intf.collapseTree = self.collapseTree;\n            self.intf.canvas = self.canvas;\n            self.intf.context = self.ctx;\n            self.intf.insertRow = self.insertRow;\n            self.intf.deleteRow = self.deleteRow;\n            self.intf.addRow = self.addRow;\n            self.intf.insertColumn = self.insertColumn;\n            self.intf.deleteColumn = self.deleteColumn;\n            self.intf.addColumn = self.addColumn;\n            self.intf.getClippingRect = self.getClippingRect;\n            self.intf.setRowHeight = self.setRowHeight;\n            self.intf.setColumnWidth = self.setColumnWidth;\n            self.intf.resetColumnWidths = self.resetColumnWidths;\n            self.intf.resetRowHeights = self.resetRowHeights;\n            self.intf.resize = self.resize;\n            self.intf.selectColumn = self.selectColumn;\n            self.intf.selectRow = self.selectRow;\n            self.intf.selectAll = self.selectAll;\n            self.intf.selectNone = self.selectNone;\n            self.intf.drawChildGrids = self.drawChildGrids;\n            self.intf.assertPxColor = self.assertPxColor;\n            self.intf.clearPxColorAssertions = self.clearPxColorAssertions;\n            self.intf.integerToAlpha = self.integerToAlpha;\n            self.intf.copy = self.copy;\n            self.intf.setStyleProperty = self.setStyleProperty;\n            Object.defineProperty(self.intf, 'defaults', {\n                get: function () {\n                    return {\n                        styles: self.defaults.styles.reduce(function (a, i) { a[i[0]] = i[1]; return a; }, {}),\n                        attributes: self.defaults.attributes.reduce(function (a, i) { a[i[0]] = i[1]; return a; }, {})\n                    };\n                }\n            });\n            self.styleKeys = Object.keys(self.intf.defaults.styles);\n            self.styleKeys.map(function (i) { return self.hyphenateProperty(i, false); }).forEach(addStyleKeyIfNoneExists);\n            self.styleKeys.map(function (i) { return self.hyphenateProperty(i, true); }).forEach(addStyleKeyIfNoneExists);\n            self.DOMStyles = window.getComputedStyle(document.body, null);\n            self.styleKeys.concat(Object.keys(self.DOMStyles)).forEach(function (key) {\n                // unless this line is here, Object.keys() will not work on <instance>.style\n                publicStyleKeyIntf[key] = undefined;\n                Object.defineProperty(publicStyleKeyIntf, key, {\n                    get: function () {\n                        return self.getStyleProperty(key);\n                    },\n                    set: function (value) {\n                        if (self.initialized) {\n                            self.appliedInlineStyles[key] = value;\n                        }\n                        self.setStyleProperty(key, value);\n                    }\n                });\n            });\n            Object.defineProperty(self.intf, 'shadowRoot', {\n                get: function () {\n                    return self.shadowRoot;\n                }\n            });\n            Object.defineProperty(self.intf, 'activeCell', {\n                get: function () {\n                    return self.activeCell;\n                }\n            });\n            Object.defineProperty(self.intf, 'hasFocus', {\n                get: function () {\n                    return self.hasFocus;\n                }\n            });\n            Object.defineProperty(self.intf, 'style', {\n                get: function () {\n                    return publicStyleKeyIntf;\n                },\n                set: function (valueObject) {\n                    Object.keys(valueObject).forEach(function (key) {\n                        self.setStyleProperty(key, valueObject[key], true);\n                    });\n                    self.draw(true);\n                    self.dispatchEvent('stylechanged', {name: 'style', value: valueObject});\n                }\n            });\n            Object.defineProperty(self.intf, 'attributes', { value: {}});\n            Object.keys(self.attributes).forEach(function (key) {\n                Object.defineProperty(self.intf.attributes, key, {\n                    get: function () {\n                        return self.attributes[key];\n                    },\n                    set: function (value) {\n                        self.attributes[key] = value;\n                        if (key === 'name') {\n                            self.tryLoadStoredSettings();\n                        }\n                        self.draw(true);\n                        self.dispatchEvent('attributechanged', {name: key, value: value[key]});\n                    }\n                });\n            });\n            self.filters.string = function (value, filterFor) {\n                value = String(value);\n                var filterRegExp,\n                    regEnd = /\\/(i|g|m)*$/,\n                    pattern = regEnd.exec(filterFor),\n                    flags = pattern ? pattern[0].substring(1) : '',\n                    flagLength = flags.length;\n                self.invalidFilterRegEx = undefined;\n                if (filterFor.substring(0, 1) === '/' && pattern) {\n                    try {\n                        filterRegExp = new RegExp(filterFor.substring(1, filterFor.length - (flagLength + 1)), flags);\n                    } catch (e) {\n                        self.invalidFilterRegEx = e;\n                        return;\n                    }\n                    return filterRegExp.test(value);\n                }\n                return value.toString ? value.toString().toLocaleUpperCase()\n                    .indexOf(filterFor.toLocaleUpperCase()) !== -1 : false;\n            };\n            self.filters.number = function (value, filterFor) {\n                if (!filterFor) { return true; }\n                return value === filterFor;\n            };\n            ['formatters', 'filters', 'sorters'].forEach(self.initProp);\n            self.applyComponentStyle(false, self.intf);\n            self.reloadStoredValues();\n            if (self.args.data) {\n                self.intf.data = self.args.data;\n            }\n            if (self.intf.innerText || self.intf.textContent) {\n                if (self.intf.dataType === 'application/x-canvas-datagrid') {\n                    self.intf.dataType = 'application/json+x-canvas-datagrid';\n                }\n                self.intf.data = self.intf.innerText || self.intf.textContent;\n            }\n            if (self.args.schema) {\n                self.intf.schema = self.args.schema;\n            }\n            if (self.isChildGrid || !self.isComponent) {\n                requestAnimationFrame(function () { self.resize(true); });\n            } else {\n                self.resize(true);\n            }\n            self.initialized = true;\n            return self;\n        };\n        /**\n         * Removes focus from the grid.\n         * @memberof canvasDatagrid\n         * @name blur\n         * @method\n         */\n        self.intf.blur = function (e) {\n            self.hasFocus = false;\n        };\n        /**\n         * Focuses on the grid.\n         * @memberof canvasDatagrid\n         * @name focus\n         * @method\n         */\n        self.intf.focus = function () {\n            self.hasFocus = true;\n            self.controlInput.focus();\n        };\n        if (self.shadowRoot || self.isChildGrid) {\n            Object.defineProperty(self.intf, 'height', {\n                get: function () {\n                    if (self.shadowRoot) {\n                        return self.shadowRoot.height;\n                    }\n                    return self.parentNode.height;\n                },\n                set: function (value) {\n                    if (self.shadowRoot) {\n                        self.shadowRoot.height = value;\n                    } else {\n                        self.parentNode.height = value;\n                    }\n                    self.resize(true);\n                }\n            });\n            Object.defineProperty(self.intf, 'width', {\n                get: function () {\n                    if (self.shadowRoot) {\n                        return self.shadowRoot.width;\n                    }\n                    return self.parentNode.width;\n                },\n                set: function (value) {\n                    if (self.shadowRoot) {\n                        self.shadowRoot.width = value;\n                    } else {\n                        self.parentNode.width = value;\n                    }\n                    self.resize(true);\n                }\n            });\n            Object.defineProperty(self.intf, 'parentNode', {\n                get: function () {\n                    return self.parentNode;\n                },\n                set: function (value) {\n                    if (!self.isChildGrid) {\n                        throw new TypeError('Cannot set property parentNode which has only a getter');\n                    }\n                    self.parentNode = value;\n                }\n            });\n        }\n        Object.defineProperty(self.intf, 'visibleRowHeights', {\n            get: function () {\n                return self.visibleRowHeights;\n            }\n        });\n        Object.defineProperty(self.intf, 'openChildren', {\n            get: function () {\n                return self.openChildren;\n            }\n        });\n        Object.defineProperty(self.intf, 'childGrids', {\n            get: function () {\n                return Object.keys(self.childGrids).map(function (gridId) {\n                    return self.childGrids[gridId];\n                });\n            }\n        });\n        Object.defineProperty(self.intf, 'isChildGrid', {\n            get: function () {\n                return self.isChildGrid;\n            }\n        });\n        Object.defineProperty(self, 'cursor', {\n            get: function () {\n                return self.parentNodeStyle.cursor;\n            },\n            set: function (value) {\n                if (value === 'cell') { value = 'default'; }\n                if (self.currentCursor !== value) {\n                    self.parentNodeStyle.cursor = value;\n                    self.currentCursor = value;\n                }\n            }\n        });\n        Object.defineProperty(self.intf, 'orderDirection', {\n            get: function () {\n                return self.orderDirection;\n            },\n            set: function (value) {\n                if (value !== 'desc') {\n                    value = 'asc';\n                }\n                self.orderDirection = value;\n                self.order(self.orderBy, self.orderDirection);\n            }\n        });\n        Object.defineProperty(self.intf, 'orderBy', {\n            get: function () {\n                return self.orderBy;\n            },\n            set: function (value) {\n                if (self.getSchema().find(function (col) {\n                        return col.name === value;\n                    }) === undefined) {\n                    throw new Error('Cannot sort by unknown column name.');\n                }\n                self.orderBy = value;\n                self.order(self.orderBy, self.orderDirection);\n            }\n        });\n        if (self.isComponent) {\n            Object.defineProperty(self.intf, 'offsetHeight', {\n                get: function () {\n                    return self.canvas.offsetHeight;\n                }\n            });\n            Object.defineProperty(self.intf, 'offsetWidth', {\n                get: function () {\n                    return self.canvas.offsetWidth;\n                }\n            });\n        }\n        Object.defineProperty(self.intf, 'scrollHeight', {\n            get: function () {\n                return self.scrollBox.scrollHeight;\n            }\n        });\n        Object.defineProperty(self.intf, 'scrollWidth', {\n            get: function () {\n                return self.scrollBox.scrollWidth;\n            }\n        });\n        Object.defineProperty(self.intf, 'scrollTop', {\n            get: function () {\n                return self.scrollBox.scrollTop;\n            },\n            set: function (value) {\n                self.scrollBox.scrollTop = value;\n            }\n        });\n        Object.defineProperty(self.intf, 'scrollLeft', {\n            get: function () {\n                return self.scrollBox.scrollLeft;\n            },\n            set: function (value) {\n                self.scrollBox.scrollLeft = value;\n            }\n        });\n        Object.defineProperty(self.intf, 'sizes', {\n            get: function () {\n                return self.sizes;\n            }\n        });\n        Object.defineProperty(self.intf, 'parentDOMNode', {\n            get: function () {\n                return self.parentDOMNode;\n            }\n        });\n        Object.defineProperty(self.intf, 'input', {\n            get: function () {\n                return self.input;\n            }\n        });\n        Object.defineProperty(self.intf, 'controlInput', {\n            get: function () {\n                return self.controlInput;\n            }\n        });\n        Object.defineProperty(self.intf, 'currentCell', {\n            get: function () {\n                return self.currentCell;\n            }\n        });\n        Object.defineProperty(self.intf, 'visibleCells', {\n            get: function () {\n                return self.visibleCells;\n            }\n        });\n        Object.defineProperty(self.intf, 'visibleRows', {\n            get: function () {\n                return self.visibleRows;\n            }\n        });\n        Object.defineProperty(self.intf, 'selections', {\n            get: function () {\n                return self.selections;\n            }\n        });\n        Object.defineProperty(self.intf, 'dragMode', {\n            get: function () {\n                return self.dragMode;\n            }\n        });\n        Object.defineProperty(self.intf, 'changes', {\n            get: function () {\n                return self.changes;\n            }\n        });\n        self.intf.formatters = self.formatters;\n        Object.defineProperty(self.intf, 'dataType', {\n            get: function () {\n                return self.dataType;\n            },\n            set: function (value) {\n                if (!self.parsers[value]) {\n                    throw new Error('No parser for MIME type ' + value);\n                }\n                self.dataType = value;\n            }\n        });\n        self.eventNames.forEach(function (eventName) {\n            Object.defineProperty(self.intf, 'on' + eventName, {\n                get: function () {\n                    return self.componentL1Events[eventName];\n                },\n                set: function (value) {\n                    self.events[eventName] = [];\n                    self.componentL1Events[eventName] = value;\n                    if (!value) { return; }\n                    self.addEventListener(eventName, value);\n                }\n            });\n        });\n        Object.defineProperty(self.intf, 'frozenRow', {\n            get: function () {\n                return self.frozenRow;\n            },\n            set: function (val) {\n                if (isNaN(val)) {\n                    throw new TypeError('Expected value for frozenRow to be a number.');\n                }\n                if (self.visibleRows.length < val) {\n                    throw new RangeError('Cannot set a value larger than the number of visible rows.');\n                }\n                self.frozenRow = val;\n            }\n        });\n        Object.defineProperty(self.intf, 'frozenColumn', {\n            get: function () {\n                return self.frozenColumn;\n            },\n            set: function (val) {\n                if (isNaN(val)) {\n                    throw new TypeError('Expected value for frozenRow to be a number.');\n                }\n                if (self.getVisibleSchema().length < val) {\n                    throw new RangeError('Cannot set a value larger than the number of visible columns.');\n                }\n                self.frozenColumn = val;\n            }\n        });\n        Object.defineProperty(self.intf, 'scrollIndexRect', {\n            get: function () {\n                return {\n                    top: self.scrollIndexTop,\n                    right: self.scrollIndexRight,\n                    bottom: self.scrollIndexBottom,\n                    left: self.scrollIndexLeft\n                };\n            }\n        });\n        Object.defineProperty(self.intf, 'scrollPixelRect', {\n            get: function () {\n                return {\n                    top: self.scrollPixelTop,\n                    right: self.scrollPixelRight,\n                    bottom: self.scrollPixelBottom,\n                    left: self.scrollPixelLeft\n                };\n            }\n        });\n        Object.defineProperty(self.intf, 'rowOrder', {\n            get: function () {\n                return self.orders.rows;\n            },\n            set: function (val) {\n                if (!Array.isArray(val)) {\n                    throw new TypeError('Value must be an array.');\n                }\n                if (!self.data || val.length < self.data.length) {\n                    throw new RangeError('Array length must be equal to or greater than number of rows.');\n                }\n                self.orders.rows = val;\n            }\n        });\n        Object.defineProperty(self.intf, 'columnOrder', {\n            get: function () {\n                return self.orders.columns;\n            },\n            set: function (val) {\n                if (!Array.isArray(val)) {\n                    throw new TypeError('Value must be an array.');\n                }\n                if (val.length < self.getSchema().length) {\n                    throw new RangeError('Array length must be equal to or greater than number of columns.');\n                }\n                self.orders.columns = val;\n            }\n        });\n        Object.defineProperty(self.intf, 'selectionBounds', {\n            get: function () {\n                return self.getSelectionBounds();\n            }\n        });\n        Object.defineProperty(self.intf, 'selectedRows', {\n            get: function () {\n                return self.getSelectedData(true);\n            }\n        });\n        Object.defineProperty(self.intf, 'selectedCells', {\n            get: function () {\n                return self.getSelectedData();\n            }\n        });\n        Object.defineProperty(self.intf, 'visibleSchema', {\n            get: function () {\n                return self.getVisibleSchema().map(function eachDataRow(col) {\n                    return col;\n                });\n            }\n        });\n        Object.defineProperty(self.intf, 'treeGridAttributes', {\n            get: function () {\n                return self.treeGridAttributes;\n            },\n            set: function setTreeGridAttributes(value) {\n                self.treeGridAttributes = value;\n            }\n        });\n        Object.defineProperty(self.intf, 'cellGridAttributes', {\n            get: function () {\n                return self.cellGridAttributes;\n            },\n            set: function setCellGridAttributes(value) {\n                self.cellGridAttributes = value;\n            }\n        });\n        Object.defineProperty(self.intf, 'ctx', {\n            get: function () {\n                return self.ctx;\n            }\n        });\n        Object.defineProperty(self.intf, 'schema', {\n            get: function schemaGetter() {\n                return self.getSchema();\n            },\n            set: function schemaSetter(value) {\n                if (value === undefined) {\n                    // Issue #89 - allow schema to be set to initialized state\n                    self.schema = undefined;\n                    self.tempSchema = undefined;\n                    self.dispatchEvent('schemachanged', {schema: undefined});\n                    return;\n                }\n                if (!Array.isArray(value) || typeof value[0] !== 'object') {\n                    throw new Error('Schema must be an array of objects.');\n                }\n                if (value[0].name === undefined) {\n                    throw new Error('Expected schema to contain an object with at least a name property.');\n                }\n                self.schema = value.map(function eachSchemaColumn(column, index) {\n                    column.width = column.width || self.style.cellWidth;\n                    column.filter = column.filter || self.filter(column.type);\n                    column.type = column.type || 'string';\n                    column.index = index;\n                    column.columnIndex = index;\n                    column.rowIndex = -1;\n                    return column;\n                });\n                self.tempSchema = undefined;\n                self.createNewRowData();\n                self.createColumnOrders();\n                self.tryLoadStoredSettings();\n                if (self.storedSettings && typeof self.storedSettings.visibility === 'object') {\n                    self.schema.forEach(function hideEachSchemaColumn(column, index) {\n                        if (self.storedSettings && self.storedSettings.visibility[column.name] !== undefined) {\n                            column.hidden = !self.storedSettings.visibility[column.name];\n                        }\n                    });\n                }\n                self.resize(true);\n                self.dispatchEvent('schemachanged', {schema: self.schema});\n            }\n        });\n        /**\n         * Gets an array of currently registered MIME types.\n         * @memberof canvasDatagrid\n         * @name getDataTypes\n         * @method\n         */\n        self.intf.getTypes = function () {\n            return Object.keys(self.parsers);\n        };\n        self.parseInnerHtml = function (data) {\n            if (!data || /^ +$/.test(data)) {\n                return [];\n            }\n            try {\n                data = JSON.parse(data);\n            } catch (e) {\n                console.warn(Error('Cannot parse application/json+x-canvas-datagrid formated data. '\n                    + e.message + '  \\nNote: canvas-datagrid.innerHTML is for string data only.  '\n                    + 'Use the canvas-datagrid.data property to set object data.'));\n            }\n            return data;\n        };\n        self.parsers['application/json+x-canvas-datagrid'] = function (data, callback) {\n            self.parsers['application/x-canvas-datagrid'](self.parseInnerHtml(data), function (data, schema) {\n                return callback(data, schema);\n            });\n        };\n        self.parsers['application/x-canvas-datagrid'] = function (data, callback) {\n            return callback(data);\n        };\n        self.intf.parsers = self.parsers;\n        // send to dataType ETL function to extract from input data\n        // and transform into native [{}, {}] format\n        self.etl = function (data, callback) {\n            if (!self.intf.parsers[self.dataType]) {\n                throw new Error('Unsupported data type.');\n            }\n            self.intf.parsers[self.dataType](data, function (data, schema) {\n                if (Array.isArray(schema)) {\n                    self.schema = schema;\n                }\n                // Issue #89 - allow schema to be auto-created every time data is set\n                if (self.attributes.autoGenerateSchema) {\n                    self.schema = self.getSchemaFromData(data);\n                }\n                if (!self.schema) {\n                    self.tempSchema = self.getSchemaFromData(data);\n                }\n                if (self.getSchema()) {\n                    self.createColumnOrders();\n                }\n                // set the unfiltered/sorted data array\n                self.originalData = data;\n                //TODO apply filter to incoming dataset\n                self.data = self.originalData;\n                // empty data was set\n                if (!self.schema && (self.data || []).length === 0) {\n                    self.tempSchema = [{name: ''}];\n                }\n                self.fitColumnToValues('cornerCell', true);\n                if ((self.tempSchema && !self.schema) || self.attributes.autoGenerateSchema) {\n                    self.createColumnOrders();\n                    self.dispatchEvent('schemachanged', {schema: self.tempSchema});\n                }\n                callback();\n            });\n        };\n        Object.defineProperty(self.intf, 'data', {\n            get: function dataGetter() {\n                return self.data;\n            },\n            set: function dataSetter(value) {\n                self.etl(value, function () {\n                    self.changes = [];\n                    self.createNewRowData();\n                    if (self.attributes.autoResizeColumns && self.data.length > 0\n                            && self.storedSettings === undefined) {\n                        self.autosize();\n                    }\n                    // set the header column to fit the numbers in it\n                    self.fitColumnToValues('cornerCell', true);\n                    self.createRowOrders();\n                    self.tryLoadStoredSettings();\n                    self.dispatchEvent('datachanged', {data: self.data});\n                    self.resize(true);\n                });\n            }\n        });\n        self.initScrollBox = function () {\n            var sHeight = 0,\n                sWidth = 0,\n                scrollTop = 0,\n                scrollLeft = 0,\n                scrollHeight = 0,\n                scrollWidth = 0,\n                scrollBoxHeight = 20,\n                scrollBoxWidth = 20;\n            function setScrollTop(value, preventScrollEvent) {\n                if (isNaN(value)) {\n                    throw new Error('ScrollTop value must be a number');\n                }\n                if (value < 0) {\n                    value = 0;\n                }\n                if (value > scrollHeight) {\n                    value = scrollHeight;\n                }\n                if (scrollHeight < 0) {\n                    value = 0;\n                }\n                scrollTop = value;\n                if (!preventScrollEvent) {\n                    self.scroll();\n                }\n            }\n            function setScrollLeft(value, preventScrollEvent) {\n                if (isNaN(value)) {\n                    throw new Error('ScrollLeft value must be a number');\n                }\n                if (value < 0) {\n                    value = 0;\n                }\n                if (value > scrollWidth) {\n                    value = scrollWidth;\n                }\n                if (scrollWidth < 0) {\n                    value = 0;\n                }\n                scrollLeft = value;\n                if (!preventScrollEvent) {\n                    self.scroll();\n                }\n            }\n            self.scrollBox.toString = function () {\n                return '{\"width\": ' + scrollWidth.toFixed(2)\n                    + ', \"height\": ' + scrollHeight.toFixed(2)\n                    + ', \"left\": ' + scrollLeft.toFixed(2)\n                    + ', \"top\": ' + scrollTop.toFixed(2)\n                    + ', \"widthRatio\": ' + self.scrollBox.widthBoxRatio.toFixed(5)\n                    + ', \"heightRatio\": ' + self.scrollBox.heightBoxRatio.toFixed(5) + '}';\n            };\n            self.scrollBox.scrollTo = function (x, y, supressDrawEvent) {\n                setScrollLeft(x, true);\n                setScrollTop(y, supressDrawEvent);\n            };\n            Object.defineProperty(self.scrollBox, 'scrollBoxHeight', {\n                get: function () {\n                    return scrollBoxHeight;\n                },\n                set: function (value) {\n                    scrollBoxHeight = value;\n                }\n            });\n            Object.defineProperty(self.scrollBox, 'scrollBoxWidth', {\n                get: function () {\n                    return scrollBoxWidth;\n                },\n                set: function (value) {\n                    scrollBoxWidth = value;\n                }\n            });\n            Object.defineProperty(self.scrollBox, 'height', {\n                get: function () {\n                    return sHeight;\n                },\n                set: function (value) {\n                    sHeight = value;\n                }\n            });\n            Object.defineProperty(self.scrollBox, 'width', {\n                get: function () {\n                    return sWidth;\n                },\n                set: function (value) {\n                    sWidth = value;\n                }\n            });\n            Object.defineProperty(self.scrollBox, 'scrollTop', {\n                get: function () {\n                    return scrollTop;\n                },\n                set: setScrollTop\n            });\n            Object.defineProperty(self.scrollBox, 'scrollLeft', {\n                get: function () {\n                    return scrollLeft;\n                },\n                set: setScrollLeft\n            });\n            Object.defineProperty(self.scrollBox, 'scrollHeight', {\n                get: function () {\n                    return scrollHeight;\n                },\n                set: function (value) {\n                    if (scrollTop > value) {\n                        scrollTop = Math.max(value, 0);\n                    }\n                    scrollHeight = value;\n                }\n            });\n            Object.defineProperty(self.scrollBox, 'scrollWidth', {\n                get: function () {\n                    return scrollWidth;\n                },\n                set: function (value) {\n                    if (scrollLeft > value) {\n                        scrollLeft = Math.max(value, 0);\n                    }\n                    scrollWidth = value;\n                }\n            });\n        };\n        return;\n    };\n}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\n\n/***/ }),\n/* 7 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*jslint browser: true, unparam: true, todo: true*/\n/*globals define: true, MutationObserver: false, requestAnimationFrame: false, performance: false, btoa: false, Event: false*/\n!(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = (function () {\n    'use strict';\n    return function (self) {\n        var zIndexTop, hoverScrollTimeout, autoCompleteContext;\n        function applyContextItemStyle(contextItemContainer) {\n            self.createInlineStyle(contextItemContainer, 'canvas-datagrid-context-menu-item' + (self.mobile ? '-mobile' : ''));\n            contextItemContainer.addEventListener('mouseover', function () {\n                self.createInlineStyle(contextItemContainer, 'canvas-datagrid-context-menu-item:hover');\n            });\n            contextItemContainer.addEventListener('mouseout', function () {\n                self.createInlineStyle(contextItemContainer, 'canvas-datagrid-context-menu-item');\n            });\n        }\n        function createContextMenu(ev, pos, items, parentContextMenu) {\n            var container = document.createElement('div'),\n                upArrow = document.createElement('div'),\n                downArrow = document.createElement('div'),\n                children = [],\n                selectedIndex = -1,\n                intf = {},\n                rect;\n            if (!Array.isArray(items)) { throw new Error('createContextMenu expects an array.'); }\n            function createItems() {\n                items.forEach(function (item) {\n                    var contextItemContainer = document.createElement('div'),\n                        childMenuArrow;\n                    function removeChildContext(e) {\n                        if (e.relatedTarget === container\n                                || item.contextMenu.container === e.relatedTarget\n                                || childMenuArrow === e.relatedTarget\n                                || (contextItemContainer === e.relatedTarget)\n                                || item.contextMenu.container.contains(e.relatedTarget)\n                                ) { return; }\n                        item.contextMenu.dispose();\n                        children.splice(children.indexOf(item.contextMenu), 1);\n                        item.contextMenu = undefined;\n                        contextItemContainer.removeEventListener('mouseout', removeChildContext);\n                        container.removeEventListener('mouseout', removeChildContext);\n                        contextItemContainer.setAttribute('contextOpen', '0');\n                        contextItemContainer.setAttribute('opening', '0');\n                    }\n                    function contextAddCallback(items) {\n                        // check yet again if the user hasn't moved off\n                        if (contextItemContainer.getAttribute('opening') !== '1' ||\n                                contextItemContainer.getAttribute('contextOpen') === '1') {\n                            return;\n                        }\n                        var cPos = contextItemContainer.getBoundingClientRect();\n                        cPos = {\n                            left: cPos.left + self.style.childContextMenuMarginLeft + container.offsetWidth,\n                            top: cPos.top + self.style.childContextMenuMarginTop,\n                            bottom: cPos.bottom,\n                            right: cPos.right\n                        };\n                        item.contextMenu = createContextMenu(ev, cPos, items, intf);\n                        contextItemContainer.setAttribute('contextOpen', '1');\n                        contextItemContainer.addEventListener('mouseout', removeChildContext);\n                        container.addEventListener('mouseout', removeChildContext);\n                        children.push(item.contextMenu);\n                    }\n                    function createChildContext() {\n                        var i;\n                        if (contextItemContainer.getAttribute('contextOpen') === '1') {\n                            return;\n                        }\n                        contextItemContainer.setAttribute('opening', '1');\n                        if (typeof item.items === 'function') {\n                            i  = item.items.apply(intf, [function (items) {\n                                contextAddCallback(items);\n                            }]);\n                            if (i !== undefined && Array.isArray(i)) {\n                                contextAddCallback(i);\n                            }\n                            return;\n                        }\n                        contextAddCallback(item.items);\n                    }\n                    function addItem(item) {\n                        function addContent(content) {\n                            if (content === null) { return; }\n                            if (typeof content === 'function') {\n                                return addContent(content(ev));\n                            }\n                            if (typeof content === 'object') {\n                                contextItemContainer.appendChild(content);\n                                return;\n                            }\n                            applyContextItemStyle(contextItemContainer);\n                            contextItemContainer.innerHTML = content;\n                            return;\n                        }\n                        addContent(item.title);\n                        item.contextItemContainer = contextItemContainer;\n                        if ((item.items && item.items.length > 0) || typeof item.items === 'function') {\n                            childMenuArrow = document.createElement('div');\n                            self.createInlineStyle(childMenuArrow, 'canvas-datagrid-context-child-arrow');\n                            childMenuArrow.innerHTML = self.style.childContextMenuArrowHTML;\n                            contextItemContainer.appendChild(childMenuArrow);\n                            contextItemContainer.addEventListener('mouseover', createChildContext);\n                            contextItemContainer.addEventListener('mouseout', function () {\n                                contextItemContainer.setAttribute('opening', '0');\n                            });\n                        }\n                        if (item.click) {\n                            contextItemContainer.addEventListener('click', function (ev) {\n                                item.click.apply(self, [ev]);\n                            });\n                        }\n                    }\n                    addItem(item);\n                    container.appendChild(contextItemContainer);\n                });\n            }\n            function clickIndex(idx) {\n                items[idx].contextItemContainer.dispatchEvent(new Event('click'));\n            }\n            function checkArrowVisibility() {\n                if (container.scrollTop > 0) {\n                    self.parentDOMNode.appendChild(upArrow);\n                } else if (upArrow.parentNode) {\n                    upArrow.parentNode.removeChild(upArrow);\n                }\n                if (container.scrollTop >= container.scrollHeight - container.offsetHeight && downArrow.parentNode) {\n                    downArrow.parentNode.removeChild(downArrow);\n                } else if (container.scrollHeight - container.offsetHeight > 0\n                        && !(container.scrollTop >= container.scrollHeight - container.offsetHeight)) {\n                    self.parentDOMNode.appendChild(downArrow);\n                }\n            }\n            function startHoverScroll(type) {\n                return function t() {\n                    var a = self.attributes.contextHoverScrollAmount;\n                    if (type === 'up' && container.scrollTop === 0) { return; }\n                    if (type === 'down' && container.scrollTop === container.scrollHeight) { return; }\n                    container.scrollTop += (type === 'up' ? -a : a);\n                    hoverScrollTimeout = setTimeout(t, self.attributes.contextHoverScrollRateMs, type);\n                };\n            }\n            function endHoverScroll(type) {\n                return function () {\n                    clearTimeout(hoverScrollTimeout);\n                };\n            }\n            function init() {\n                var loc = {},\n                    s = self.scrollOffset(self.canvas);\n                if (zIndexTop === undefined) {\n                    zIndexTop = self.style.contextMenuZIndex;\n                }\n                createItems();\n                self.createInlineStyle(container, 'canvas-datagrid-context-menu' + (self.mobile ? '-mobile' : ''));\n                loc.x = pos.left - s.left;\n                loc.y = pos.top - s.top;\n                loc.height = 0;\n                zIndexTop += 1;\n                container.style.position = 'absolute';\n                upArrow.style.color = self.style.contextMenuArrowColor;\n                downArrow.style.color = self.style.contextMenuArrowColor;\n                [upArrow, downArrow].forEach(function (el) {\n                    el.style.textAlign = 'center';\n                    el.style.position = 'absolute';\n                    el.style.zIndex = zIndexTop + 1;\n                });\n                container.style.zIndex = zIndexTop;\n                if (parentContextMenu && parentContextMenu.inputDropdown) {\n                    container.style.maxHeight = window.innerHeight - loc.y - self.style.autocompleteBottomMargin + 'px';\n                    container.style.minWidth = pos.width + 'px';\n                    loc.y += pos.height;\n                }\n                if (self.mobile) {\n                    container.style.width = pos.width + 'px';\n                }\n                container.style.left = loc.x + 'px';\n                container.style.top = loc.y + 'px';\n                container.addEventListener('scroll', checkArrowVisibility);\n                container.addEventListener('wheel', function (e) {\n                    if (self.hasFocus) {\n                        container.scrollTop += e.deltaY;\n                        container.scrollLeft += e.deltaX;\n                    }\n                    checkArrowVisibility();\n                });\n                upArrow.innerHTML = self.style.contextMenuArrowUpHTML;\n                downArrow.innerHTML = self.style.contextMenuArrowDownHTML;\n                container.appendChild(upArrow);\n                document.body.appendChild(downArrow);\n                document.body.appendChild(container);\n                rect = container.getBoundingClientRect();\n                // TODO: fix !(parentContextMenu && parentContextMenu.inputDropdown) state (autocomplete)\n                if (rect.bottom > window.innerHeight) {\n                    if (!(parentContextMenu && parentContextMenu.inputDropdown)) {\n                        loc.y -= (rect.bottom + self.style.contextMenuWindowMargin) - window.innerHeight;\n                    }\n                    if (loc.y < 0) { loc.y = self.style.contextMenuWindowMargin; }\n                    if (container.offsetHeight > window.innerHeight - self.style.contextMenuWindowMargin) {\n                        container.style.height = window.innerHeight - (self.style.contextMenuWindowMargin * 2) + 'px';\n                    }\n                }\n                if (rect.right > window.innerWidth) {\n                    loc.x -= rect.right - window.innerWidth + self.style.contextMenuWindowMargin;\n                }\n                if (loc.x < 0) { loc.x = self.style.contextMenuWindowMargin; }\n                if (loc.y < 0) { loc.y = self.style.contextMenuWindowMargin; }\n                container.style.left = loc.x + 'px';\n                container.style.top = loc.y + 'px';\n                rect = container.getBoundingClientRect();\n                upArrow.style.top = rect.top + 'px';\n                downArrow.style.top = rect.top + rect.height - downArrow.offsetHeight + 'px';\n                upArrow.style.left = rect.left + 'px';\n                downArrow.style.left = rect.left + 'px';\n                downArrow.style.width = container.offsetWidth + 'px';\n                upArrow.style.width = container.offsetWidth + 'px';\n                downArrow.addEventListener('mouseover', startHoverScroll('down'));\n                downArrow.addEventListener('mouseout', endHoverScroll('down'));\n                upArrow.addEventListener('mouseover', startHoverScroll('up'));\n                upArrow.addEventListener('mouseout', endHoverScroll('up'));\n                checkArrowVisibility();\n            }\n            intf.parentGrid = self.intf;\n            intf.parentContextMenu = parentContextMenu;\n            intf.container = container;\n            init();\n            intf.clickIndex = clickIndex;\n            intf.rect = rect;\n            intf.items = items;\n            intf.upArrow = upArrow;\n            intf.downArrow = downArrow;\n            intf.dispose = function () {\n                clearTimeout(hoverScrollTimeout);\n                children.forEach(function (c) {\n                    c.dispose();\n                });\n                [downArrow, upArrow, container].forEach(function (el) {\n                    if (el.parentNode) { el.parentNode.removeChild(el); }\n                });\n            };\n            Object.defineProperty(intf, 'selectedIndex', {\n                get: function () {\n                    return selectedIndex;\n                },\n                set: function (value) {\n                    if (typeof value !== 'number' || isNaN(value || !isFinite(value))) {\n                        throw new Error('Context menu selected index must be a sane number.');\n                    }\n                    selectedIndex = value;\n                    if (selectedIndex > items.length - 1) {\n                        selectedIndex = items.length - 1;\n                    }\n                    if (selectedIndex < 0) {\n                        selectedIndex = 0;\n                    }\n                    items.forEach(function (item, index) {\n                        if (index === selectedIndex) {\n                            return self.createInlineStyle(item.contextItemContainer, 'canvas-datagrid-context-menu-item:hover');\n                        }\n                        self.createInlineStyle(item.contextItemContainer, 'canvas-datagrid-context-menu-item');\n                    });\n                }\n            });\n            return intf;\n        }\n        function createFilterContextMenuItems(e) {\n            var filterContainer = document.createElement('div'),\n                filterLabel = document.createElement('div'),\n                filterAutoCompleteButton = document.createElement('button'),\n                filterInput = document.createElement('input'),\n                n = e.cell && e.cell.header ? e.cell.header.title || e.cell.header.name : '',\n                autoCompleteItems,\n                iRect;\n            function checkRegExpErrorState() {\n                filterInput.style.background = self.style.contextFilterInputBackground;\n                filterInput.style.color = self.style.contextFilterInputColor;\n                if (self.invalidFilterRegEx) {\n                    filterInput.style.background = self.style.contextFilterInvalidRegExpBackground;\n                    filterInput.style.color = self.style.contextFilterInvalidRegExpColor;\n                }\n            }\n            function fillAutoComplete() {\n                var count = 0;\n                autoCompleteItems = {};\n                self.data.forEach(function (row) {\n                    var value = row[e.cell.header.name];\n                    if (autoCompleteItems[value] || count > self.attributes.maxAutoCompleteItems) { return; }\n                    count += 1;\n                    autoCompleteItems[value] = {\n                        title: self.formatters[e.cell.header.type || 'string']({ cell: { value: value }}),\n                        click: function (e) {\n                            filterInput.value = value;\n                            e.stopPropagation();\n                            filterInput.dispatchEvent(new Event('keyup'));\n                            self.disposeAutocomplete();\n                            return;\n                        }\n                    };\n                });\n                autoCompleteItems = Object.keys(autoCompleteItems).map(function (key) {\n                    return autoCompleteItems[key];\n                });\n            }\n            function createAutoCompleteContext(ev) {\n                if (ev && [40, 38, 13, 9].indexOf(ev.keyCode) !== -1) { return; }\n                fillAutoComplete();\n                iRect = filterInput.getBoundingClientRect();\n                if (autoCompleteContext) {\n                    autoCompleteContext.dispose();\n                    autoCompleteContext = undefined;\n                }\n                autoCompleteContext = createContextMenu(e, {\n                    left: iRect.left,\n                    top: iRect.top,\n                    right: iRect.right,\n                    bottom: iRect.bottom,\n                    height: iRect.height,\n                    width: iRect.width\n                }, autoCompleteItems, {inputDropdown: true});\n                autoCompleteContext.selectedIndex = 0;\n            }\n            self.createInlineStyle(filterLabel, 'canvas-datagrid-context-menu-label');\n            self.createInlineStyle(filterAutoCompleteButton, 'canvas-datagrid-context-menu-filter-button');\n            self.createInlineStyle(filterInput, 'canvas-datagrid-context-menu-filter-input');\n            checkRegExpErrorState();\n            filterInput.onclick = self.disposeAutocomplete;\n            filterInput.addEventListener('keydown', function (e) {\n                //down\n                if (e.keyCode === 40) {\n                    autoCompleteContext.selectedIndex += 1;\n                }\n                //up\n                if (e.keyCode === 38) {\n                    autoCompleteContext.selectedIndex -= 1;\n                }\n                //enter\n                if (e.keyCode === 13) {\n                    autoCompleteContext.clickIndex(autoCompleteContext.selectedIndex);\n                    self.disposeContextMenu();\n                }\n                //tab\n                if (e.keyCode === 9) {\n                    autoCompleteContext.clickIndex(autoCompleteContext.selectedIndex);\n                    e.preventDefault();\n                }\n                //esc\n                if (e.keyCode === 27) {\n                    self.disposeContextMenu();\n                }\n            });\n            filterInput.addEventListener('keyup', function () {\n                self.setFilter(e.cell.header.name, filterInput.value);\n            });\n            filterInput.addEventListener('keyup', createAutoCompleteContext);\n            ['focus', 'blur', 'keydown', 'keyup', 'change'].forEach(function (en) {\n                filterInput.addEventListener(en, checkRegExpErrorState);\n            });\n            filterInput.value = e.cell.header ? self.columnFilters[e.cell.header.name] || '' : '';\n            filterLabel.innerHTML = self.attributes.filterOptionText.replace(/%s/g, n);\n            filterAutoCompleteButton.onclick = function () {\n                if (autoCompleteContext) {\n                    return self.disposeAutocomplete();\n                }\n                createAutoCompleteContext();\n            };\n            filterAutoCompleteButton.innerHTML = self.style.contextFilterButtonHTML;\n            filterContainer.addEventListener('click', function (e) {\n                return e.stopPropagation();\n            });\n            filterContainer.appendChild(filterLabel);\n            filterContainer.appendChild(filterInput);\n            filterContainer.appendChild(filterAutoCompleteButton);\n            e.items.push({\n                title: filterContainer\n            });\n            if (Object.keys(self.columnFilters).length) {\n                Object.keys(self.columnFilters).forEach(function (cf) {\n                    var h = self.getHeaderByName(cf);\n                    e.items.push({\n                        title: self.attributes.removeFilterOptionText.replace(/%s/g, h.title || h.name),\n                        click: function removeFilterClick(e) {\n                            e.preventDefault();\n                            self.setFilter(cf, '');\n                            self.controlInput.focus();\n                        }\n                    });\n                });\n            }\n        }\n        function addDefaultContextMenuItem(e) {\n            var isNormalCell = !(e.cell.isBackground || e.cell.isColumnHeaderCellCap\n                    || e.cell.isScrollBar || e.cell.isCorner || e.cell.isRowHeader)\n                    && e.cell.header;\n            if (self.attributes.showFilter && isNormalCell) {\n                createFilterContextMenuItems(e);\n            }\n            if (self.attributes.showCopy\n                    && self.selections.reduce(function (p, r) {\n                        return p + r.length;\n                    }, 0) > 0) {\n                e.items.push({\n                    title: self.attributes.copyText,\n                    click: function () {\n                        document.execCommand('copy');\n                        self.disposeContextMenu();\n                        self.controlInput.focus();\n                    }\n                });\n            }\n            if (self.attributes.showPaste && self.clipBoardData) {\n                e.items.push({\n                    title: self.attributes.pasteText,\n                    click: function () {\n                        self.paste(self.clipBoardData, e.cell.columnIndex, e.cell.rowIndex);\n                        self.draw();\n                    }\n                });\n            }\n            if (self.attributes.showColumnSelector) {\n                e.items.push({\n                    title: self.attributes.columnSelectorText,\n                    items: function () {\n                        var d = [];\n                        self.getSchema().forEach(function (column) {\n                            function toggleColumnVisibility(e) {\n                                column.hidden = !column.hidden;\n                                self.dispatchEvent('togglecolumn', {column: column, hidden: column.hidden});\n                                e.preventDefault();\n                                self.stopPropagation(e);\n                                self.disposeContextMenu();\n                                self.resize(true);\n                                self.setStorageData();\n                            }\n                            var el = document.createElement('div');\n                            applyContextItemStyle(el);\n                            el.addEventListener('touchstart', toggleColumnVisibility);\n                            el.addEventListener('click', toggleColumnVisibility);\n                            el.innerHTML = (column.hidden ? self.attributes.columnSelectorHiddenText\n                                    : self.attributes.columnSelectorVisibleText)\n                                    + (column.title || column.name);\n                            d.push({\n                                title: el\n                            });\n                        });\n                        return d;\n                    }\n                });\n                if (e.cell && e.cell.header && e.cell.columnIndex > -1) {\n                    e.items.push({\n                        title: self.attributes.hideColumnText\n                            .replace(/%s/ig, e.cell.header.title || e.cell.header.name),\n                        click: function (ev) {\n                            self.getSchema()[e.cell.columnIndex].hidden = true;\n                            ev.preventDefault();\n                            self.stopPropagation(ev);\n                            self.disposeContextMenu();\n                            self.setStorageData();\n                            setTimeout(function () { self.resize(true); }, 10);\n                        }\n                    });\n                }\n            }\n            if (self.attributes.saveAppearance && self.attributes.showClearSettingsOption\n                    && (Object.keys(self.sizes.rows).length > 0\n                        || Object.keys(self.sizes.columns).length > 0)) {\n                e.items.push({\n                    title: self.attributes.clearSettingsOptionText,\n                    click: function (e) {\n                        e.preventDefault();\n                        self.sizes.rows = {};\n                        self.sizes.columns = {};\n                        self.createRowOrders();\n                        self.createColumnOrders();\n                        self.storedSettings = undefined;\n                        self.dispatchEvent('resizecolumn', {columnWidth: self.style.cellWidth});\n                        self.dispatchEvent('resizerow', {cellHeight: self.style.cellHeight});\n                        self.setStorageData();\n                        self.resize(true);\n                        self.disposeContextMenu();\n                        self.controlInput.focus();\n                    }\n                });\n            }\n            if (self.attributes.allowSorting && self.attributes.showOrderByOption && isNormalCell) {\n                e.items.push({\n                    title: self.attributes.showOrderByOptionTextAsc.replace('%s', e.cell.header.title || e.cell.header.name),\n                    click: function (ev) {\n                        ev.preventDefault();\n                        self.order(e.cell.header.name, 'asc');\n                        self.controlInput.focus();\n                    }\n                });\n                e.items.push({\n                    title: self.attributes.showOrderByOptionTextDesc.replace('%s', e.cell.header.title || e.cell.header.name),\n                    click: function (ev) {\n                        ev.preventDefault();\n                        self.order(e.cell.header.name, 'desc');\n                        self.disposeContextMenu();\n                        self.controlInput.focus();\n                    }\n                });\n            }\n        }\n        self.disposeAutocomplete = function () {\n            if (autoCompleteContext) {\n                autoCompleteContext.dispose();\n                autoCompleteContext = undefined;\n            }\n        };\n        self.disposeContextMenu = function () {\n            document.removeEventListener('click', self.disposeContextMenu);\n            zIndexTop = self.style.contextMenuZIndex;\n            self.disposeAutocomplete();\n            if (self.contextMenu) {\n                self.contextMenu.dispose();\n            }\n            self.contextMenu = undefined;\n        };\n        self.contextmenuEvent = function (e, overridePos) {\n            if (!self.hasFocus && e.target !== self.canvas) {\n                return;\n            }\n            function createDiposeEvent() {\n                requestAnimationFrame(function () {\n                    document.addEventListener('click', self.disposeContextMenu);\n                    document.removeEventListener('mouseup', createDiposeEvent);\n                });\n            }\n            var contextPosition,\n                items = [],\n                pos = overridePos || self.getLayerPos(e),\n                ev = {\n                    NativeEvent: e,\n                    cell: self.getCellAt(pos.x, pos.y),\n                    items: items\n                };\n            if (!ev.cell.isGrid) {\n                addDefaultContextMenuItem(ev);\n            }\n            if (self.dispatchEvent('contextmenu', ev)) {\n                return;\n            }\n            if (!ev.cell.isGrid) {\n                if (self.contextMenu) {\n                    self.disposeContextMenu();\n                }\n                contextPosition = {\n                    left: pos.x + pos.rect.left\n                        + self.style.contextMenuMarginLeft + self.canvasOffsetLeft,\n                    top: pos.y + pos.rect.top\n                        + self.style.contextMenuMarginTop + self.canvasOffsetTop,\n                    right: ev.cell.width + ev.cell.x + pos.rect.left,\n                    bottom: ev.cell.height + ev.cell.y + pos.rect.top,\n                    height: ev.cell.height,\n                    width: ev.cell.width\n                };\n                if (self.mobile) {\n                    contextPosition.left = self.style.mobileContextMenuMargin + 'px';\n                    contextPosition.width = self.width - (self.style.mobileContextMenuMargin * 2) + 'px';\n                }\n                self.contextMenu = createContextMenu(ev, contextPosition, items);\n                document.addEventListener('mouseup', createDiposeEvent);\n                e.preventDefault();\n            }\n        };\n        return;\n    };\n}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\n\n/***/ }),\n/* 8 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*jslint browser: true, unparam: true, todo: true*/\n/*globals define: true, MutationObserver: false, requestAnimationFrame: false, performance: false, btoa: false*/\n!(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = (function () {\n    'use strict';\n    return function (self) {\n        self.getClippingRect = function (ele) {\n            var boundingRect = self.position(self.parentNode),\n                eleRect = self.position(ele),\n                s = self.scrollOffset(self.canvas),\n                clipRect = {\n                    x: 0,\n                    y: 0,\n                    h: 0,\n                    w: 0\n                },\n                parentRect = {\n                    x: -Infinity,\n                    y: -Infinity,\n                    h: Infinity,\n                    w: Infinity\n                },\n                columnHeaderCellHeight = self.getColumnHeaderCellHeight(),\n                rowHeaderCellWidth = self.getRowHeaderCellWidth();\n            boundingRect.top -= s.top;\n            boundingRect.left -= s.left;\n            eleRect.top -= s.top;\n            eleRect.left -= s.left;\n            clipRect.h = boundingRect.top + boundingRect.height - ele.offsetTop - self.style.scrollBarWidth;\n            clipRect.w = boundingRect.left + boundingRect.width - ele.offsetLeft - self.style.scrollBarWidth;\n            clipRect.x = boundingRect.left + (eleRect.left * -1) + rowHeaderCellWidth;\n            clipRect.y = boundingRect.top + (eleRect.top * -1) + columnHeaderCellHeight;\n            return {\n                x: clipRect.x > parentRect.x ? clipRect.x : parentRect.x,\n                y: clipRect.y > parentRect.y ? clipRect.y : parentRect.y,\n                h: clipRect.h < parentRect.h ? clipRect.h : parentRect.h,\n                w: clipRect.w < parentRect.w ? clipRect.w : parentRect.w\n            };\n        };\n        self.clipElement = function (ele) {\n            var clipRect = self.getClippingRect(ele);\n            if (clipRect.w < 0) { clipRect.w = 0; }\n            if (clipRect.h < 0) { clipRect.h = 0; }\n            ele.style.clip = 'rect('\n                + clipRect.y + 'px,'\n                + clipRect.w + 'px,'\n                + clipRect.h + 'px,'\n                + clipRect.x + 'px'\n                + ')';\n            // INFO https://developer.mozilla.org/en-US/docs/Web/CSS/clip\n            // clip has been \"deprecated\" for clipPath.  Of course nothing but chrome\n            // supports clip path, so we'll keep using clip until someday clipPath becomes\n            // more widely support.  The code below works correctly, but setting clipPath and clip\n            // at the same time has undesirable results.\n            // ele.style.clipPath = 'polygon('\n            //     + clipRect.x + 'px ' + clipRect.y + 'px,'\n            //     + clipRect.x + 'px ' + clipRect.h + 'px,'\n            //     + clipRect.w + 'px ' + clipRect.h + 'px,'\n            //     + clipRect.w + 'px ' + clipRect.y + 'px'\n            //     + ')';\n        };\n        self.scrollOffset = function (e) {\n            var x = 0, y = 0, scrollingElement = document.scrollingElement || { scrollLeft: 0, scrollTop: 0 };\n            while (e.parentNode && e.nodeName !== 'CANVAS-DATAGRID' && e !== self.intf) {\n                if (e.nodeType !== 'canvas-datagrid-tree'\n                        && e.nodeType !== 'canvas-datagrid-cell') {\n                    x -= e.scrollLeft;\n                    y -= e.scrollTop;\n                }\n                e = e.parentNode;\n            }\n            return {\n                left: x - scrollingElement.scrollLeft,\n                top: y - scrollingElement.scrollTop\n            };\n        };\n        self.resizeEditInput = function () {\n            if (self.input && self.input.editCell) {\n                var pos = self.canvas.getBoundingClientRect(),\n                    s = self.scrollOffset(self.intf),\n                    bm = self.style.gridBorderCollapse === 'collapse' ? 1 : 2,\n                    borderWidth = (self.style.cellBorderWidth * bm),\n                    cell = self.getVisibleCellByIndex(self.input.editCell.columnIndex, self.input.editCell.rowIndex)\n                        || {x: -100, y: -100, height: 0, width: 0};\n                if (self.mobile) {\n                    self.input.style.left = '0';\n                    self.input.style.top = (self.height - self.style.mobileEditInputHeight) - borderWidth - 1 + 'px';\n                    self.input.style.height = self.style.mobileEditInputHeight + 'px';\n                    self.input.style.width = self.width - borderWidth - 1 + 'px';\n                    return;\n                }\n                self.input.style.left = pos.left + cell.x + self.canvasOffsetLeft - s.left + 'px';\n                self.input.style.top = pos.top + cell.y - self.style.cellBorderWidth + self.canvasOffsetTop - s.top + 'px';\n                self.input.style.height = cell.height - borderWidth + 'px';\n                self.input.style.width = cell.width - self.style.cellPaddingLeft + 'px';\n                self.clipElement(self.input);\n            }\n        };\n        self.position = function (e, ignoreScrollOffset) {\n            var x = 0, y = 0, s = e, h, w;\n            while (e.offsetParent && e.nodeName !== 'CANVAS-DATAGRID') {\n                x += e.offsetLeft;\n                y += e.offsetTop;\n                h = e.offsetHeight;\n                w = e.offsetWidth;\n                e = e.offsetParent;\n            }\n            if (ignoreScrollOffset) {\n                return {left: x, top: y, height: h, width: w};\n            }\n            e = s;\n            s = self.scrollOffset(e);\n            return { left: x + s.left, top: y + s.top, height: h, width: w };\n        };\n        self.getLayerPos = function (e) {\n            var rect = self.canvas.getBoundingClientRect(),\n                pos = {\n                    x: e.clientX - rect.left,\n                    y: e.clientY - rect.top\n                };\n            if (self.isChildGrid) {\n                pos.x -= self.canvasOffsetLeft;\n                pos.y -= self.canvasOffsetTop;\n            }\n            return {\n                x: pos.x,\n                y: pos.y,\n                rect: rect\n            };\n        };\n        /**\n         * Ends editing, optionally aborting the edit.\n         * @memberof canvasDatagrid\n         * @name endEdit\n         * @method\n         * @param {boolean} abort When true, abort the edit.\n         */\n        self.endEdit = function (abort) {\n            var cell = self.input.editCell,\n                y = cell.rowIndex;\n            function abortEdit() {\n                abort = true;\n            }\n            if (self.dispatchEvent('beforeendedit', {\n                    cell: cell,\n                    newValue: self.input.value,\n                    oldValue: cell.value,\n                    abort: abortEdit,\n                    input: self.input\n                })) { return false; }\n            if (self.input.value !== cell.value && !abort) {\n                self.changes[y] = self.changes[y] || {};\n                self.changes[y][cell.header.name] = self.input.value;\n                if (!cell.data) {\n                    self.data[cell.rowIndex] = {};\n                    cell.data = self.data[cell.rowIndex];\n                }\n                cell.data[cell.header.name] = self.input.value;\n                if (y === self.data.length) {\n                    if (self.dispatchEvent('newrow', {\n                            value: self.input.value,\n                            defaultValue: cell.value,\n                            aborted: abort,\n                            cell: cell,\n                            input: self.input\n                        })) { return false; }\n                    self.addRow(cell.data);\n                    self.createNewRowData();\n                }\n                self.draw(true);\n            }\n            if (self.input.parentNode) {\n                self.input.parentNode.removeChild(self.input);\n            }\n            self.intf.focus();\n            self.dispatchEvent('endedit', {\n                cell: cell,\n                value: self.input.value,\n                aborted: abort,\n                input: self.input\n            });\n            self.input = undefined;\n            return true;\n        };\n        /**\n         * Begins editing at cell x, row y.\n         * @memberof canvasDatagrid\n         * @name beginEditAt\n         * @method\n         * @param {number} x The column index of the cell to edit.\n         * @param {number} y The row index of the cell to edit.\n         */\n        self.beginEditAt = function (x, y, NativeEvent) {\n            if (!self.attributes.editable) { return; }\n            if (self.input) {\n                self.endEdit();\n            }\n            var cell = self.getVisibleCellByIndex(x, y),\n                s = self.getSchema(),\n                adjacentCells,\n                enumItems,\n                enu,\n                option,\n                valueInEnum;\n            if (!(cell && cell.header)) { return; }\n            //HACK for IE10, does not like literal enum\n            enu = cell.header['enum'];\n            if (self.dispatchEvent('beforebeginedit', {cell: cell, NativeEvent: NativeEvent})) { return false; }\n            self.scrollIntoView(x, y);\n            self.setActiveCell(x, y);\n            adjacentCells = self.getAdjacentCells();\n            if (enu) {\n                self.input = document.createElement('select');\n            } else {\n                self.input = document.createElement(self.attributes.multiLine\n                    ? 'textarea' : 'input');\n            }\n            cell = self.getVisibleCellByIndex(x, y);\n            //HACK on mobile devices sometimes edit can begin without the cell being in view, I don't know how.\n            if (!cell) { return; }\n            if (enu) {\n                // add enums\n                if (typeof enu === 'function') {\n                    enumItems = enu.apply(self.intf, [{cell: cell}]);\n                } else if (Array.isArray(enu)) {\n                    enumItems = enu;\n                }\n                enumItems.forEach(function (e) {\n                    var i = document.createElement('option'),\n                        val,\n                        title;\n                    if (Array.isArray(e)) {\n                        val = e[0];\n                        title = e[1];\n                    } else {\n                        val = e;\n                        title = e;\n                    }\n                    if (val === cell.value) { valueInEnum = true; }\n                    i.value = val;\n                    i.innerHTML = title;\n                    self.input.appendChild(i);\n                });\n                if (!valueInEnum) {\n                    option = document.createElement('option');\n                    option.value = cell.value;\n                    option.innerHTML = cell.value;\n                    self.input.appendChild(option);\n                }\n                self.input.addEventListener('change', function () {\n                    self.endEdit();\n                    self.draw(true);\n                });\n            }\n            // if the user has not prevented the default action, append to the body\n            if (!self.dispatchEvent('appendeditinput', {cell: cell, input:self.input})) { \n                document.body.appendChild(self.input);\n            }\n            self.createInlineStyle(self.input, self.mobile ? 'canvas-datagrid-edit-mobile-input' : 'canvas-datagrid-edit-input');\n            self.input.style.position = 'absolute';\n            self.input.editCell = cell;\n            self.resizeEditInput();\n            self.input.style.zIndex = self.style.editCellZIndex;\n            self.input.style.fontSize = (parseInt(self.style.editCellFontSize, 10) * self.scale) + 'px';\n            self.input.value = [null, undefined].indexOf(cell.value) !== -1 ? '' : cell.value;\n            self.input.focus();\n            self.input.addEventListener('click', self.stopPropagation);\n            self.input.addEventListener('dblclick', self.stopPropagation);\n            self.input.addEventListener('mouseup', self.stopPropagation);\n            self.input.addEventListener('mousedown', self.stopPropagation);\n            self.input.addEventListener('keydown', function (e) {\n                var nx = cell.columnIndex,\n                    ny = cell.rowIndex;\n                // esc\n                if (e.keyCode === 27) {\n                    self.endEdit(true);\n                    self.draw(true);\n                // enter\n                } else if (e.keyCode === 13\n                        && (!self.attributes.multiLine\n                            || (self.attributes.multiLine && e.shiftKey))) {\n                    self.endEdit();\n                    self.draw(true);\n                } else if (e.keyCode === 9) {\n                    e.preventDefault();\n                    if (!self.endEdit()) {\n                        return;\n                    }\n                    if (e.shiftKey) {\n                        nx = adjacentCells.left;\n                    } else {\n                        nx = adjacentCells.right;\n                    }\n                    if (adjacentCells.left === x && e.shiftKey) {\n                        nx = adjacentCells.last;\n                        ny -= 1;\n                    }\n                    if (adjacentCells.right === x && !e.shiftKey) {\n                        nx = adjacentCells.first;\n                        ny += 1;\n                    }\n                    if (ny < 0) {\n                        ny = self.data.length - 1;\n                    }\n                    if (ny > self.data.length - 1) {\n                        ny = 0;\n                    }\n                    self.scrollIntoView(nx, ny);\n                    self.beginEditAt(nx, ny, e);\n                }\n            });\n            self.dispatchEvent('beginedit', {cell: cell, input: self.input});\n        };\n        self.createInlineStyle = function (el, className) {\n            var css = {\n                'canvas-datagrid-context-menu-filter-input': {\n                    height: '19px',\n                    verticalAlign: 'bottom',\n                    marginLeft: '2px',\n                    padding: '0',\n                    background: self.style.contextFilterInputBackground,\n                    color: self.style.contextFilterInputColor,\n                    border: self.style.contextFilterInputBorder,\n                    borderRadius: self.style.contextFilterInputBorderRadius,\n                    lineHeight: 'normal',\n                    fontWeight: 'normal',\n                    fontFamily: self.style.contextFilterInputFontFamily,\n                    fontSize: self.style.contextFilterInputFontSize\n                },\n                'canvas-datagrid-context-menu-filter-button': {\n                    height: '19px',\n                    verticalAlign: 'bottom',\n                    marginLeft: '2px',\n                    padding: '0',\n                    background: self.style.contextMenuBackground,\n                    color: self.style.contextMenuColor,\n                    border: self.style.contextFilterButtonBorder,\n                    borderRadius: self.style.contextFilterButtonBorderRadius,\n                    lineHeight: 'normal',\n                    fontWeight: 'normal',\n                    fontFamily: self.style.contextMenuFilterButtonFontFamily,\n                    fontSize: self.style.contextMenuFilterButtonFontSize\n                },\n                'canvas-datagrid-context-child-arrow': {\n                    cssFloat: 'right',\n                    color: self.style.childContextMenuArrowColor,\n                    fontSize: self.style.contextMenuChildArrowFontSize,\n                    fontFamily: self.style.contextMenuFontFamily,\n                    verticalAlign: 'middle'\n                },\n                'canvas-datagrid-autocomplete': {\n                    fontFamily: self.style.contextMenuFontFamily,\n                    fontSize: self.style.contextMenuFontSize,\n                    background: self.style.contextMenuBackground,\n                    color: self.style.contextMenuColor,\n                    border: self.style.contextMenuBorder,\n                    padding: self.style.contextMenuPadding,\n                    borderRadius: self.style.contextMenuBorderRadius,\n                    opacity: self.style.contextMenuOpacity,\n                    position: 'absolute',\n                    zIndex: 9999,\n                    overflow: 'hidden'\n                },\n                'canvas-datagrid-autocomplete-item': {\n                    background: self.style.contextMenuBackground,\n                    color: self.style.contextMenuColor\n                },\n                'canvas-datagrid-autocomplete-item:hover': {\n                    background: self.style.contextMenuHoverBackground,\n                    color: self.style.contextMenuHoverColor\n                },\n                'canvas-datagrid-canvas': {\n                    position: 'absolute',\n                    zIndex: '-1'\n                },\n                'canvas-datagrid': {\n                    display: 'block'\n                },\n                'canvas-datagrid-control-input': {\n                    position: 'fixed',\n                    top: '-5px',\n                    left: '-5px',\n                    border: 'none',\n                    opacity: '0',\n                    cursor: 'pointer',\n                    width: '1px',\n                    height: '1px',\n                    lineHeight: 'normal',\n                    fontWeight: 'normal',\n                    fontFamily: self.style.contextMenuFontFamily,\n                    fontSize: self.style.contextMenuFontSize\n                },\n                'canvas-datagrid-edit-mobile-input': {\n                    boxSizing: 'content-box',\n                    outline: 'none',\n                    margin: '0',\n                    padding: '0 0 0 0',\n                    lineHeight: 'normal',\n                    fontWeight: 'normal',\n                    fontFamily: self.style.mobileEditFontFamily,\n                    fontSize: self.style.mobileEditFontSize,\n                    border: self.style.editCellBorder,\n                    color: self.style.editCellColor,\n                    background: self.style.editCellBackgroundColor,\n                    appearance: 'none',\n                    webkitAppearance: 'none',\n                    mozAppearance: 'none',\n                    borderRadius: '0'\n                },\n                'canvas-datagrid-edit-input': {\n                    boxSizing: 'content-box',\n                    outline: 'none',\n                    margin: '0',\n                    padding: '0 0 0 ' + self.style.editCellPaddingLeft + 'px',\n                    lineHeight: 'normal',\n                    fontWeight: 'normal',\n                    fontFamily: self.style.editCellFontFamily,\n                    fontSize: self.style.editCellFontSize,\n                    boxShadow: self.style.editCellBoxShadow,\n                    border: self.style.editCellBorder,\n                    color: self.style.editCellColor,\n                    background: self.style.editCellBackgroundColor,\n                    appearance: 'none',\n                    webkitAppearance: 'none',\n                    mozAppearance: 'none',\n                    borderRadius: '0'\n                },\n                'canvas-datagrid-context-menu-item-mobile': {\n                    lineHeight: 'normal',\n                    fontWeight: 'normal',\n                    fontFamily: self.style.contextMenuFontFamily,\n                    fontSize: self.style.contextMenuFontSize,\n                    color: 'inherit',\n                    background: 'inherit',\n                    margin: self.style.contextMenuItemMargin,\n                    borderRadius: self.style.contextMenuItemBorderRadius,\n                    verticalAlign: 'middle'\n                },\n                'canvas-datagrid-context-menu-item': {\n                    lineHeight: 'normal',\n                    fontWeight: 'normal',\n                    fontFamily: self.style.contextMenuFontFamily,\n                    fontSize: self.style.contextMenuFontSize,\n                    color: 'inherit',\n                    background: 'inherit',\n                    margin: self.style.contextMenuItemMargin,\n                    borderRadius: self.style.contextMenuItemBorderRadius,\n                    verticalAlign: 'middle'\n                },\n                'canvas-datagrid-context-menu-item:hover': {\n                    background: self.style.contextMenuHoverBackground,\n                    color: self.style.contextMenuHoverColor\n                },\n                'canvas-datagrid-context-menu-label': {\n                    margin: self.style.contextMenuLabelMargin,\n                    display: self.style.contextMenuLabelDisplay,\n                    minWidth: self.style.contextMenuLabelMinWidth,\n                    maxWidth: self.style.contextMenuLabelMaxWidth\n                },\n                'canvas-datagrid-context-menu-mobile': {\n                    lineHeight: 'normal',\n                    fontWeight: 'normal',\n                    fontFamily: self.style.contextMenuFontFamily,\n                    fontSize: self.style.contextMenuFontSize,\n                    background: self.style.contextMenuBackground,\n                    color: self.style.contextMenuColor,\n                    border: self.style.contextMenuBorder,\n                    padding: self.style.contextMenuPadding,\n                    borderRadius: self.style.contextMenuBorderRadius,\n                    opacity: self.style.contextMenuOpacity,\n                    overflow: 'hidden',\n                    whiteSpace: 'nowrap'\n                },\n                'canvas-datagrid-context-menu': {\n                    lineHeight: 'normal',\n                    fontWeight: 'normal',\n                    fontFamily: self.style.contextMenuFontFamily,\n                    fontSize: self.style.contextMenuFontSize,\n                    background: self.style.contextMenuBackground,\n                    color: self.style.contextMenuColor,\n                    border: self.style.contextMenuBorder,\n                    padding: self.style.contextMenuPadding,\n                    borderRadius: self.style.contextMenuBorderRadius,\n                    opacity: self.style.contextMenuOpacity,\n                    overflow: 'hidden',\n                    whiteSpace: 'nowrap',\n                    cursor: self.style.contextMenuCursor\n                },\n                'canvas-datagrid-invalid-search-regExp': {\n                    background: self.style.contextMenuFilterInvalidExpresion\n                }\n            };\n            if (css[className]) {\n                Object.keys(css[className]).map(function (prop) {\n                    el.style[prop] = css[className][prop];\n                });\n            }\n            return;\n        };\n        self.appendTo = function (e) {\n            self.parentNode = e;\n            self.setDom();\n        };\n        self.setDom = function () {\n            if (self.isChildGrid) {\n                self.parentGrid = self.parentNode.parentGrid;\n                self.ctx = self.parentGrid.context;\n                self.canvas = self.parentGrid.canvas;\n                self.controlInput = self.parentGrid.controlInput;\n                self.eventParent = self.canvas;\n            } else {\n                self.controlInput = self.controlInput || document.createElement('input');\n                self.controlInput.onblur = self.intf.blur;\n                self.createInlineStyle(self.controlInput, 'canvas-datagrid-control-input');\n                self.isChildGrid = false;\n                self.parentDOMNode = self.parentNode;\n                self.parentIsCanvas = /^canvas$/i.test(self.parentDOMNode.tagName);\n                if (self.parentIsCanvas) {\n                    self.canvas = self.parentDOMNode;\n                } else {\n                    self.canvas = document.createElement('canvas');\n                    if (self.intf.createShadowRoot) {\n                        self.parentDOMNode.appendChild(self.canvas);\n                    }\n                }\n                document.body.appendChild(self.controlInput);\n                self.createInlineStyle(self.canvas, 'canvas-datagrid');\n                self.ctx = self.canvas.getContext('2d');\n                self.ctx.textBaseline = 'alphabetic';\n                self.eventParent = self.canvas;\n            }\n            self.parentNodeStyle = self.canvas.style;\n            self.controlInput.setAttribute('readonly', true);\n            self.controlInput.addEventListener('blur', function (e) {\n                if (e.target !== self.canvas) {\n                    self.hasFocus = false;\n                }\n            });\n            self.eventParent.addEventListener('scroll', self.resize, false);\n            self.eventParent.addEventListener('touchstart', self.touchstart, false);\n            self.eventParent.addEventListener('mouseup', self.mouseup, false);\n            self.eventParent.addEventListener('mousedown', self.mousedown, false);\n            self.eventParent.addEventListener('dblclick', self.dblclick, false);\n            self.eventParent.addEventListener('click', self.click, false);\n            self.eventParent.addEventListener('mousemove', self.mousemove);\n            self[self.isChildGrid ? 'parentGrid' : 'eventParent'].addEventListener('wheel', self.scrollWheel, false);\n            self.canvas.addEventListener('contextmenu', self.contextmenuEvent, false);\n            self.controlInput.addEventListener('copy', self.copy);\n            self.controlInput.addEventListener('cut', self.cut);\n            self.controlInput.addEventListener('paste', self.paste);\n            self.controlInput.addEventListener('keypress', self.keypress, false);\n            self.controlInput.addEventListener('keyup', self.keyup, false);\n            self.controlInput.addEventListener('keydown', self.keydown, false);\n            window.addEventListener('resize', self.resize);\n        };\n    };\n}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\n\n/***/ }),\n/* 9 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*jslint browser: true, unparam: true, todo: true*/\n/*globals define: true, MutationObserver: false, requestAnimationFrame: false, performance: false, btoa: false*/\n!(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = (function () {\n    'use strict';\n    return function (self) {\n        /**\n         * Converts a integer into a letter A - ZZZZZ...\n         * @memberof canvasDatagrid\n         * @name integerToAlpha\n         * @method\n         * @param {column} n The number to convert.\n         */\n        self.integerToAlpha = function (n) {\n            var ordA = 'a'.charCodeAt(0),\n                ordZ = 'z'.charCodeAt(0),\n                len = ordZ - ordA + 1,\n                s = '';\n            while (n >= 0) {\n                s = String.fromCharCode(n % len + ordA) + s;\n                n = Math.floor(n / len) - 1;\n            }\n            return s;\n        };\n        /**\n         * Inserts a new column before the specified index into the schema.\n         * @tutorial schema\n         * @memberof canvasDatagrid\n         * @name insertColumn\n         * @method\n         * @param {column} c The column to insert into the schema.\n         * @param {number} index The index of the column to insert before.\n         */\n        self.insertColumn = function (c, index) {\n            var s = self.getSchema();\n            if (s.length < index) {\n                throw new Error('Index is beyond the length of the schema.');\n            }\n            self.validateColumn(c, s);\n            s.splice(index, 0, c);\n            self.data.forEach(function (row) {\n                self.applyDefaultValue(row, c);\n            });\n            self.intf.schema = s;\n        };\n        /**\n         * Deletes a column from the schema at the specified index.\n         * @memberof canvasDatagrid\n         * @name deleteColumn\n         * @tutorial schema\n         * @method\n         * @param {number} index The index of the column to delete.\n         */\n        self.deleteColumn = function (index) {\n            var s = self.getSchema();\n            // remove data matching this column name from data\n            self.data.forEach(function (row) {\n                delete row[s[index].name];\n            });\n            s.splice(index, 1);\n            self.intf.schema = s;\n        };\n        /**\n         * Adds a new column into the schema.\n         * @tutorial schema\n         * @memberof canvasDatagrid\n         * @name addColumn\n         * @method\n         * @param {column} c The column to add to the schema.\n         */\n        self.addColumn = function (c) {\n            var s = self.getSchema();\n            self.validateColumn(c, s);\n            s.push(c);\n            self.data.forEach(function (row) {\n                self.applyDefaultValue(row, c);\n            });\n            self.intf.schema = s;\n        };\n        /**\n         * Deletes a row from the dataset at the specified index.\n         * @memberof canvasDatagrid\n         * @name deleteRow\n         * @method\n         * @param {number} index The index of the row to delete.\n         */\n        self.deleteRow = function (index) {\n            self.originalData.splice(index, 1);\n            self.setFilter();\n            self.resize(true);\n        };\n        /**\n         * Inserts a new row into the dataset before the specified index.\n         * @memberof canvasDatagrid\n         * @name insertRow\n         * @method\n         * @param {object} d data.\n         * @param {number} index The index of the row to insert before.\n         */\n        self.insertRow = function (d, index) {\n            if (self.originalData.length < index) {\n                throw new Error('Index is beyond the length of the dataset.');\n            }\n            self.originalData.splice(index, 0, d);\n            self.getSchema().forEach(function (c) {\n                if (d[c.name] === undefined) {\n                    self.applyDefaultValue(self.originalData[index], c);\n                }\n            });\n            self.setFilter();\n            self.resize(true);\n        };\n        /**\n         * Adds a new row into the dataset.\n         * @memberof canvasDatagrid\n         * @name addRow\n         * @method\n         * @param {object} d data.\n         */\n        self.addRow = function (d) {\n            self.originalData.push(d);\n            self.getSchema().forEach(function (c) {\n                if (d[c.name] === undefined) {\n                    self.applyDefaultValue(self.originalData[self.originalData.length - 1], c);\n                }\n            });\n            self.setFilter();\n            self.resize(true);\n        };\n        /**\n         * Sets the height of a given row by index number.\n         * @memberof canvasDatagrid\n         * @name setRowHeight\n         * @method\n         * @param {number} rowIndex The index of the row to set.\n         * @param {number} height Height to set the row to.\n         */\n        self.setRowHeight = function (rowIndex, height) {\n            self.sizes.rows[rowIndex] = height;\n            self.draw(true);\n        };\n        /**\n         * Sets the width of a given column by index number.\n         * @memberof canvasDatagrid\n         * @name setColumnWidth\n         * @method\n         * @param {number} colIndex The index of the column to set.\n         * @param {number} width Width to set the column to.\n         */\n        self.setColumnWidth = function (colIndex, width) {\n            self.sizes.columns[colIndex] = width;\n            self.draw(true);\n        };\n        /**\n         * Removes any changes to the width of the columns due to user or api interaction, setting them back to the schema or style default.\n         * @memberof canvasDatagrid\n         * @name resetColumnWidths\n         * @tutorial schema\n         * @method\n         */\n        self.resetColumnWidths = function () {\n            self.sizes.columns = {};\n            self.draw(true);\n        };\n        /**\n         * Removes any changes to the height of the rows due to user or api interaction, setting them back to the schema or style default.\n         * @memberof canvasDatagrid\n         * @name resetRowHeights\n         * @tutorial schema\n         * @method\n         */\n        self.resetRowHeights = function () {\n            self.sizes.rows = {};\n            self.draw(true);\n        };\n        /**\n         * Sets the value of the filter.\n         * @memberof canvasDatagrid\n         * @name setFilter\n         * @method\n         * @param {string} column Name of the column to filter.\n         * @param {string} value The value to filter for.\n         */\n        self.setFilter = function (column, value) {\n            function applyFilter() {\n                self.refreshFromOrigialData();\n                Object.keys(self.columnFilters).forEach(function (filter) {\n                    var header = self.getHeaderByName(column);\n                    if (!header) {\n                        return;\n                    }\n                    self.currentFilter = header.filter || self.filter(column.type || 'string');\n                    self.data = self.data.filter(function (row) {\n                        return self.currentFilter(row[filter], self.columnFilters[filter]);\n                    });\n                });\n                self.resize();\n                self.draw(true);\n            }\n            if (column === undefined && value === undefined) {\n                self.columnFilters = {};\n                return applyFilter();\n            }\n            if (column && (value === '' || value === undefined)) {\n                delete self.columnFilters[column];\n            } else {\n                self.columnFilters[column] = value;\n            }\n            applyFilter();\n        };\n        /**\n         * Returns the number of pixels to scroll down to line up with row rowIndex.\n         * @memberof canvasDatagrid\n         * @name findRowScrollTop\n         * @method\n         * @param {number} rowIndex The row index of the row to scroll find.\n         */\n        self.findRowScrollTop = function (rowIndex) {\n            if (self.scrollCache.y[rowIndex] === undefined) { throw new RangeError('Row index out of range.'); }\n            return self.scrollCache.y[rowIndex];\n        };\n        /**\n         * Returns the number of pixels to scroll to the left to line up with column columnIndex.\n         * @memberof canvasDatagrid\n         * @name findColumnScrollLeft\n         * @method\n         * @param {number} columnIndex The column index of the column to find.\n         */\n        self.findColumnScrollLeft = function (columnIndex) {\n            var i = Math.max(columnIndex - 1, 0);\n            if (self.scrollCache.x[i] === undefined) { throw new Error('Column index out of range.'); }\n            return self.scrollCache.x[i] - self.getColummnWidth(self.orders.columns[columnIndex]);\n        };\n        /**\n         * Scrolls to the cell at columnIndex x, and rowIndex y.  If you define both rowIndex and columnIndex additional calculations can be made to center the cell using the target cell's height and width.  Defining only one rowIndex or only columnIndex will result in simpler calculations.\n         * @memberof canvasDatagrid\n         * @name gotoCell\n         * @method\n         * @param {number} x The column index of the cell to scroll to.\n         * @param {number} y The row index of the cell to scroll to.\n         * @param {number} [offsetX=0] Percentage offset the cell should be from the left edge (not including headers).  The default is 0, meaning the cell will appear at the left edge. Valid values are 0 through 1. 1 = Left, 0 = Right, 0.5 = Center.\n         * @param {number} [offsetY=0] Percentage offset the cell should be from the top edge (not including headers).  The default is 0, meaning the cell will appear at the top edge. Valid values are 0 through 1. 1 = Bottom, 0 = Top, 0.5 = Center.\n         */\n        self.gotoCell = function (x, y, offsetX, offsetY) {\n            var targetX = x === undefined ? undefined : self.findColumnScrollLeft(x),\n                targetY = y === undefined ? undefined : self.findRowScrollTop(y),\n                cell,\n                sbw = self.scrollBox.width - (self.scrollBox.verticalBarVisible ? self.style.scrollBarWidth : 0),\n                sbh = self.scrollBox.height - (self.scrollBox.horizontalBarVisible ? self.style.scrollBarWidth : 0);\n            offsetX = offsetX === undefined ? 0 : offsetX;\n            offsetY = offsetY === undefined ? 0 : offsetY;\n            targetX -= sbw * offsetX;\n            targetY -= sbh * offsetY;\n            if (x !== undefined && y !== undefined) {\n                self.scrollBox.scrollTo(targetX, targetY);\n                requestAnimationFrame(function () {\n                    cell = self.getVisibleCellByIndex(x, y);\n                    // HACK: just don't offset if the target cell cannot be seen\n                    // TODO: offset does not work on very small grids, not sure why\n                    if (!cell) { return; }\n                    targetX += cell.width * offsetX;\n                    targetY += cell.height * offsetY;\n                    self.scrollBox.scrollTo(targetX, targetY);\n                });\n            } else if (x !== undefined) {\n                self.scrollBox.scrollLeft = targetX;\n            } else if (y !== undefined) {\n                self.scrollBox.scrollTop = targetY;\n            }\n        };\n        /**\n         * Scrolls the row y.\n         * @memberof canvasDatagrid\n         * @name gotoRow\n         * @method\n         * @param {number} y The row index of the cell to scroll to.\n         */\n        self.gotoRow = function (y) {\n            self.gotoCell(0, y);\n        };\n        /**\n         * Scrolls the cell at cell x, row y into view if it is not already.\n         * @memberof canvasDatagrid\n         * @name scrollIntoView\n         * @method\n         * @param {number} x The column index of the cell to scroll into view.\n         * @param {number} y The row index of the cell to scroll into view.\n         * @param {number} [offsetX=0] Percentage offset the cell should be from the left edge (not including headers).  The default is 0, meaning the cell will appear at the left edge. Valid values are 0 through 1. 1 = Left, 0 = Right, 0.5 = Center.\n         * @param {number} [offsetY=0] Percentage offset the cell should be from the top edge (not including headers).  The default is 0, meaning the cell will appear at the top edge. Valid values are 0 through 1. 1 = Bottom, 0 = Top, 0.5 = Center.\n         */\n        self.scrollIntoView = function (x, y, offsetX, offsetY) {\n            if (self.visibleCells.filter(function (cell) {\n                    return (cell.rowIndex === y || y === undefined)\n                        && (cell.columnIndex === x || x === undefined)\n                        && cell.x > 0\n                        && cell.y > 0\n                        && cell.x + cell.width < self.width\n                        && cell.y + cell.height < self.height;\n                }).length === 0) {\n                self.gotoCell(x, y, offsetX, offsetY);\n            }\n        };\n        /**\n         * Sets the active cell. Requires redrawing.\n         * @memberof canvasDatagrid\n         * @name setActiveCell\n         * @method\n         * @param {number} x The column index of the cell to set active.\n         * @param {number} y The row index of the cell to set active.\n         */\n        self.setActiveCell = function (x, y) {\n            if (x < 0) { x = 0; }\n            if (y < 0) { y = 0; }\n            self.activeCell = {\n                rowIndex: y,\n                columnIndex: x\n            };\n        };\n        /**\n         * Removes the selection.\n         * @memberof canvasDatagrid\n         * @name selectNone\n         * @param {boolean} dontDraw Suppress the draw method after the selection change.\n         * @method\n         */\n        self.selectNone = function (dontDraw) {\n            self.selections = [];\n            self.dispatchEvent('selectionchanged', {\n                selectedData: self.getSelectedData(),\n                selections: self.selections,\n                selectionBounds: self.selectionBounds\n            });\n            if (dontDraw) { return; }\n            self.draw();\n        };\n        /**\n         * Selects every visible cell.\n         * @memberof canvasDatagrid\n         * @name selectAll\n         * @param {boolean} dontDraw Suppress the draw method after the selection change.\n         * @method\n         */\n        self.selectAll = function (dontDraw) {\n            self.selectArea({\n                top: 0,\n                left: -1,\n                right: self.getSchema().length - 1,\n                bottom: self.data.length - 1\n            });\n            if (dontDraw) { return; }\n            self.draw();\n        };\n        /**\n         * Returns true if the selected columnIndex is selected on every row.\n         * @memberof canvasDatagrid\n         * @name isColumnSelected\n         * @method\n         * @param {number} columnIndex The column index to check.\n         */\n        self.isColumnSelected = function (columnIndex) {\n            var colIsSelected = true;\n            self.data.forEach(function (row, rowIndex) {\n                if (!self.selections[rowIndex] || self.selections[rowIndex].indexOf(self.orders.columns[columnIndex]) === -1) {\n                    colIsSelected = false;\n                }\n            });\n            return colIsSelected;\n        };\n        /**\n         * Runs the defined method on each selected cell.\n         * @memberof canvasDatagrid\n         * @name forEachSelectedCell\n         * @method\n         * @param {number} fn The function to execute.  The signature of the function is: (data, rowIndex, columnName).\n         * @param {number} expandToRow When true the data in the array is expanded to the entire row.\n         */\n        self.forEachSelectedCell = function (fn, expandToRow) {\n            var d = [], s = expandToRow ? self.getSchema() : self.getVisibleSchema(), l = self.data.length;\n            self.selections.forEach(function (row, index) {\n                if (index === l) { return; }\n                if (row.length === 0) {\n                    d[index] = null;\n                    return;\n                }\n                d[index] = {};\n                row.forEach(function (col) {\n                    if (col === -1 || !s[col]) { return; }\n                    fn(self.data, index, s[col].name);\n                });\n            });\n        };\n        /**\n         * Selects a column.\n         * @memberof canvasDatagrid\n         * @name selectColumn\n         * @method\n         * @param {number} columnIndex The column index to select.\n         * @param {boolean} toggleSelectMode When true, behaves as if you were holding control/command when you clicked the column.\n         * @param {boolean} shift When true, behaves as if you were holding shift when you clicked the column.\n         * @param {boolean} supressSelectionchangedEvent When true, prevents the selectionchanged event from firing.\n         */\n        self.selectColumn = function (columnIndex, ctrl, shift, supressEvent) {\n            var s, e, x;\n            function addCol(i) {\n                self.data.forEach(function (row, rowIndex) {\n                    self.selections[rowIndex] = self.selections[rowIndex] || [];\n                    if (self.selections[rowIndex].indexOf(i) === -1) {\n                        self.selections[rowIndex].push(i);\n                    }\n                });\n            }\n            function removeCol(i) {\n                self.data.forEach(function (row, rowIndex) {\n                    self.selections[rowIndex] = self.selections[rowIndex] || [];\n                    if (self.selections[rowIndex].indexOf(i) !== -1) {\n                        self.selections[rowIndex].splice(self.selections[rowIndex].indexOf(i), 1);\n                    }\n                });\n            }\n            if (shift) {\n                if (!self.activeCell) { return; }\n                s = Math.min(self.activeCell.columnIndex, columnIndex);\n                e = Math.max(self.activeCell.columnIndex, columnIndex);\n                for (x = s; e > x; x += 1) {\n                    addCol(x);\n                }\n            }\n            if (!ctrl && !shift) {\n                self.selections = [];\n                self.activeCell.columnIndex = columnIndex;\n                self.activeCell.rowIndex = self.scrollIndexTop;\n            }\n            if (ctrl && self.isColumnSelected(columnIndex)) {\n                removeCol(columnIndex);\n            } else {\n                addCol(columnIndex);\n            }\n            if (supressEvent) { return; }\n            self.dispatchEvent('selectionchanged', {\n                selectedData: self.getSelectedData(),\n                selections: self.selections,\n                selectionBounds: self.getSelectionBounds()\n            });\n        };\n        /**\n         * Selects a row.\n         * @memberof canvasDatagrid\n         * @name selectRow\n         * @method\n         * @param {number} rowIndex The row index to select.\n         * @param {boolean} ctrl When true, behaves as if you were holding control/command when you clicked the row.\n         * @param {boolean} shift When true, behaves as if you were holding shift when you clicked the row.\n         * @param {boolean} supressSelectionchangedEvent When true, prevents the selectionchanged event from firing.\n         */\n        self.selectRow = function (rowIndex, ctrl, shift, supressEvent) {\n            var x, st, en, s = self.getVisibleSchema();\n            function de() {\n                if (supressEvent) { return; }\n                self.dispatchEvent('selectionchanged', {\n                    selectedData: self.getSelectedData(),\n                    selections: self.selections,\n                    selectionBounds: self.selectionBounds\n                });\n            }\n            function addRow(ri) {\n                self.selections[ri] = [];\n                self.selections[ri].push(-1);\n                s.forEach(function (col, index) {\n                    self.selections[ri].push(self.orders.columns.indexOf(col.index));\n                });\n            }\n            if (self.dragAddToSelection === false || self.dragObject === undefined) {\n                if (self.selections[rowIndex] && self.selections[rowIndex].length - 1 === s.length) {\n                    if (ctrl) {\n                        self.selections[rowIndex] = [];\n                        de();\n                        return;\n                    }\n                }\n            }\n            if (self.dragAddToSelection === true || self.dragObject === undefined) {\n                if (shift && self.dragObject === undefined) {\n                    if (!self.activeCell) { return; }\n                    st = Math.min(self.activeCell.rowIndex, rowIndex);\n                    en = Math.max(self.activeCell.rowIndex, rowIndex);\n                    for (x = st; en >= x; x += 1) {\n                        addRow(x);\n                    }\n                } else {\n                    addRow(rowIndex);\n                }\n            }\n            de();\n        };\n        /**\n         * Collapse a tree grid by row index.\n         * @memberof canvasDatagrid\n         * @name collapseTree\n         * @method\n         * @param {number} index The index of the row to collapse.\n         */\n        self.collapseTree = function (rowIndex) {\n            self.dispatchEvent('collapsetree', {\n                childGrid: self.childGrids[rowIndex],\n                data: self.data[rowIndex],\n                rowIndex: rowIndex\n            });\n            self.openChildren[rowIndex].blur();\n            self.openChildren[rowIndex].dispose();\n            delete self.openChildren[rowIndex];\n            delete self.sizes.trees[rowIndex];\n            delete self.childGrids[rowIndex];\n            self.dispatchEvent('resizerow', {\n                cellHeight: self.style.cellHeight\n            });\n            self.resize(true);\n            self.draw(true);\n        };\n        /**\n         * Expands a tree grid by row index.\n         * @memberof canvasDatagrid\n         * @name expandTree\n         * @method\n         * @param {number} index The index of the row to expand.\n         */\n        self.expandTree = function (rowIndex) {\n            var trArgs = self.args.treeGridAttributes || {},\n                columnHeaderCellHeight = self.getColumnHeaderCellHeight(),\n                rowHeaderCellWidth = self.sizes.columns.cornerCell || self.style.rowHeaderCellWidth,\n                h = self.sizes.trees[rowIndex] || self.style.treeGridHeight,\n                treeGrid;\n            if (!self.childGrids[rowIndex]) {\n                trArgs.debug = self.attributes.debug;\n                trArgs.name = self.attributes.saveAppearance ? self.attributes.name + 'tree' + rowIndex : undefined;\n                trArgs.style = trArgs.style || self.style;\n                trArgs.parentNode = {\n                    parentGrid: self.intf,\n                    nodeType: 'canvas-datagrid-tree',\n                    offsetHeight: h,\n                    offsetWidth: self.width - rowHeaderCellWidth,\n                    header: { width: self.width - rowHeaderCellWidth },\n                    offsetLeft: rowHeaderCellWidth,\n                    offsetTop: columnHeaderCellHeight,\n                    offsetParent: self.intf.parentNode,\n                    parentNode: self.intf.parentNode,\n                    style: 'tree',\n                    data: self.data[rowIndex]\n                };\n                treeGrid = self.createGrid(trArgs);\n                self.childGrids[rowIndex] = treeGrid;\n            }\n            treeGrid = self.childGrids[rowIndex];\n            treeGrid.visible = true;\n            self.dispatchEvent('expandtree', {\n                treeGrid: treeGrid,\n                data: self.data[rowIndex],\n                rowIndex: rowIndex\n            });\n            self.openChildren[rowIndex] = treeGrid;\n            self.sizes.trees[rowIndex] = h;\n            self.dispatchEvent('resizerow', {height: self.style.cellHeight});\n            self.resize(true);\n        };\n        /**\n         * Toggles tree grid open and close by row index.\n         * @memberof canvasDatagrid\n         * @name toggleTree\n         * @method\n         * @param {number} index The index of the row to toggle.\n         */\n        self.toggleTree = function (rowIndex) {\n            var i = self.openChildren[rowIndex];\n            if (i) {\n                return self.collapseTree(rowIndex);\n            }\n            self.expandTree(rowIndex);\n        };\n        /**\n         * Returns a header from the schema by name.\n         * @memberof canvasDatagrid\n         * @name getHeaderByName\n         * @tutorial schema\n         * @method\n         * @returns {header} header with the selected name, or undefined.\n         * @param {string} name The name of the column to resize.\n         */\n        self.getHeaderByName = function (name) {\n            var x, i = self.getSchema();\n            for (x = 0; x < i.length; x += 1) {\n                if (i[x].name === name) {\n                    return i[x];\n                }\n            }\n        };\n        /**\n         * Resizes a column to fit the longest value in the column. Call without a value to resize all columns.\n         * Warning, can be slow on very large record sets (1m records ~3-5 seconds on an i7).\n         * @memberof canvasDatagrid\n         * @name fitColumnToValues\n         * @method\n         * @param {string} name The name of the column to resize.\n         */\n        self.fitColumnToValues = function (name, internal) {\n            if (!self.canvas) { return; }\n            self.sizes.columns[name === 'cornerCell' ? -1 : self.getHeaderByName(name).index]\n                = Math.max(self.findColumnMaxTextLength(name), self.style.minColumnWidth);\n            if (!internal) {\n                self.resize();\n                self.draw(true);\n            }\n        };\n        /**\n         * Checks if a cell is currently visible.\n         * @memberof canvasDatagrid\n         * @name isCellVisible\n         * @overload\n         * @method\n         * @returns {boolean} when true, the cell is visible, when false the cell is not currently drawn.\n         * @param {number} columnIndex The column index of the cell to check.\n         * @param {number} rowIndex The row index of the cell to check.\n         */\n        /**\n         * Checks if a cell is currently visible.\n         * @memberof canvasDatagrid\n         * @name isCellVisible\n         * @method\n         * @returns {boolean} when true, the cell is visible, when false the cell is not currently drawn.\n         * @param {cell} cell The cell to check for.  Alternatively you can pass an object { x: <x-pixel-value>, y: <y-pixel-value> }.\n         */\n        self.isCellVisible = function (cell, rowIndex) {\n            // overload\n            if (rowIndex !== undefined) {\n                return self.visibleCells.filter(function (c) {\n                    return c.columnIndex === cell && c.rowIndex === rowIndex;\n                }).length > 0;\n            }\n            var x, l = self.visibleCells.length;\n            for (x = 0; x < l; x += 1) {\n                if (cell.x === self.visibleCells[x].x && cell.y === self.visibleCells[x].y) {\n                    return true;\n                }\n            }\n            return false;\n        };\n        /**\n         * Sets the order of the data.\n         * @memberof canvasDatagrid\n         * @name order\n         * @method\n         * @returns {cell} cell at the selected location.\n         * @param {number} columnName Name of the column to be sorted.\n         * @param {string} direction `asc` for ascending or `desc` for descending.\n         * @param {function} [sortFunction] When defined, override the default sorting method defined in the column's schema and use this one.\n         * @param {bool} [dontSetStorageData] Don't store this setting for future use.\n         */\n        self.order = function (columnName, direction, sortFunction, dontSetStorageData) {\n            var f,\n                c = self.getSchema().filter(function (col) {\n                    return col.name === columnName;\n                });\n            if (self.dispatchEvent('beforesortcolumn', {name: columnName, direction: direction})) { return; }\n            self.orderBy = columnName;\n            if (!self.data || self.data.length === 0) { return; }\n            if (c.length === 0) {\n                throw new Error('Cannot sort.  No such column name');\n            }\n            f = sortFunction || self.sorters[c[0].type];\n            if (!f && c[0].type !== undefined) {\n                console.warn('Cannot sort type \"%s\" falling back to string sort.', c[0].type);\n            }\n            self.data = self.data.sort(typeof f === 'function' ? f(columnName, direction) : self.sorters.string);\n            self.dispatchEvent('sortcolumn', {name: columnName, direction: direction});\n            self.draw(true);\n            if (dontSetStorageData) { return; }\n            self.setStorageData();\n        };\n        self.isInGrid = function (e) {\n            if (e.x < 0\n                    || e.x > self.width\n                    || e.y < 0\n                    || e.y > self.height) {\n                return false;\n            }\n            return true;\n        };\n        /**\n         * Moves the current selection relative to the its current position.  Note: this method does not move the selected data, just the selection itself.\n         * @memberof canvasDatagrid\n         * @name moveSelection\n         * @method\n         * @param {number} offsetX The number of columns to offset the selection.\n         * @param {number} offsetY The number of rows to offset the selection.\n         */\n        self.moveSelection = function (offsetX, offsetY) {\n            var sel = [];\n            self.selections.forEach(function (row, rowIndex) {\n                sel[rowIndex + offsetY] = [];\n                row.forEach(function (colIndex) {\n                    sel[rowIndex + offsetY].push(colIndex + offsetX);\n                });\n            });\n            self.selections = sel;\n        };\n        /**\n         * Moves data in the provided selection to another position in the grid.  Moving data off the edge of the schema (columns/x) will truncate data.\n         * @memberof canvasDatagrid\n         * @name moveTo\n         * @method\n         * @param {array} sel 2D array representing selected rows and columns.  `canvasDatagrid.selections` is in this format and can be used here.\n         * @param {number} x The column index to start inserting the selection at.\n         * @param {number} y The row index to start inserting the selection at.\n         */\n        self.moveTo = function (sel, x, y) {\n            var d = self.getSelectedData(),\n                s = self.getVisibleSchema(),\n                l = sel.length,\n                xi,\n                maxRowLength = -Infinity,\n                minXi = Infinity,\n                yi = y - 1;\n            sel.forEach(function (row, index) {\n                if (index === l) { return; }\n                if (row.length === 0) { return; }\n                minXi = Math.min(self.getVisibleColumnIndexOf(x), minXi);\n                maxRowLength = Math.max(maxRowLength, row.length);\n                row.forEach(function (colIndex) {\n                    // intentional redef of colIndex\n                    colIndex = self.getVisibleColumnIndexOf(colIndex);\n                    if (!s[colIndex]) { return; }\n                    if (!self.data[index]) { self.data[index] = {}; }\n                    self.data[index][s[colIndex].name] = null;\n                });\n            });\n            sel.forEach(function (row, index) {\n                var lastSourceIndex;\n                yi += 1;\n                xi = self.getVisibleColumnIndexOf(x);\n                row.forEach(function (colIndex, cidx) {\n                    colIndex = self.getVisibleColumnIndexOf(colIndex);\n                    if (cidx > 0) {\n                        // this confusing bit of nonsense figures out\n                        // if the selection has skipped cells\n                        xi += colIndex - lastSourceIndex;\n                    }\n                    lastSourceIndex = colIndex;\n                    if (colIndex === -1\n                            || !s[xi]\n                            || !s[colIndex]\n                            || self.data.length - 1 < yi\n                            || yi < 0) { return; }\n                    if (!self.data[yi]) { self.data[yi] = {}; }\n                    self.data[yi][s[xi].name] = d[index][s[colIndex].name];\n                });\n            });\n        };\n        /**\n         * Checks if a given column is visible.\n         * @memberof canvasDatagrid\n         * @name isColumnVisible\n         * @method\n         * @returns {boolean} When true, the column is visible.\n         * @param {number} columnIndex Column index.\n         */\n        self.isColumnVisible = function (columnIndex) {\n            return self.visibleCells.filter(function (c) {\n                return c.columnIndex === columnIndex;\n            }).length > 0;\n        };\n        /**\n         * Checks if a given row is visible.\n         * @memberof canvasDatagrid\n         * @name isRowVisible\n         * @method\n         * @returns {boolean} When true, the row is visible.\n         * @param {number} rowIndex Row index.\n         */\n        self.isRowVisible = function (rowIndex) {\n            return self.visibleCells.filter(function (c) {\n                return c.rowIndex === rowIndex;\n            }).length > 0;\n        };\n        /**\n         * Gets the cell at columnIndex and rowIndex.\n         * @memberof canvasDatagrid\n         * @name getVisibleCellByIndex\n         * @method\n         * @returns {cell} cell at the selected location.\n         * @param {number} x Column index.\n         * @param {number} y Row index.\n         */\n        self.getVisibleCellByIndex = function (x, y) {\n            return self.visibleCells.filter(function (c) {\n                return c.columnIndex === x && c.rowIndex === y;\n            })[0];\n        };\n        /**\n         * Gets the cell at grid pixel coordinate x and y.  Author's note.  This function ties drawing and events together.  This is a very complex function and is core to the component.\n         * @memberof canvasDatagrid\n         * @name getCellAt\n         * @method\n         * @returns {cell} cell at the selected location.\n         * @param {number} x Number of pixels from the left.\n         * @param {number} y Number of pixels from the top.\n         */\n        self.getCellAt = function (x, y, useTouchScrollZones) {\n            function getBorder(entitiy) {\n                if (entitiy.x + entitiy.width - (self.attributes.borderResizeZone * 0.4) < x && entitiy.x + entitiy.width + (self.attributes.borderResizeZone * 0.6) > x) {\n                    return 'r';\n                }\n                if (entitiy.x - (self.attributes.borderResizeZone * 0.4) < x && entitiy.x + (self.attributes.borderResizeZone * 0.6) > x) {\n                    return 'l';\n                }\n                if (entitiy.y + entitiy.height - (self.attributes.borderResizeZone * 0.4) < y && entitiy.y + entitiy.height + (self.attributes.borderResizeZone * 0.6) > y) {\n                    return 'b';\n                }\n                if (entitiy.y - (self.attributes.borderResizeZone * 0.4) < y && entitiy.y + (self.attributes.borderResizeZone * 0.6) > y) {\n                    return 't';\n                }\n            }\n            if (!self.visibleCells) { return; }\n            var border,\n                tsz = useTouchScrollZones ? self.attributes.touchScrollZone : 0,\n                moveMode = self.attributes.borderDragBehavior === 'move',\n                i,\n                l = self.visibleCells.length,\n                moveBorder,\n                xBorderBehavior = moveMode ? self.cursorGrab : 'ew-resize',\n                yBorderBehavior = moveMode ? self.cursorGrab : 'ns-resize',\n                cell,\n                entitiy;\n            if (!self.visibleCells || !self.visibleCells.length) { return; }\n            self.hasFocus = true;\n            if (!(y < self.height\n                && y > 0\n                && x < self.width\n                && x > 0)) {\n                self.hasFocus = false;\n                return {\n                    dragContext: 'inherit',\n                    context: 'inherit'\n                };\n            }\n            for (i = 0; i < l; i += 1) {\n                cell = self.visibleCells[i];\n                // interactive dimensions of the cell.  used for touch \"over size\" zones\n                entitiy = {\n                    x: cell.x,\n                    y: cell.y,\n                    height: cell.height,\n                    width: cell.width\n                };\n                if (useTouchScrollZones && /(vertical|horizontal)-scroll-/.test(cell.style)) {\n                    entitiy.x -= tsz;\n                    entitiy.y -= tsz;\n                    entitiy.height += tsz;\n                    entitiy.width += tsz;\n                }\n                if (entitiy.x - self.style.cellBorderWidth < x\n                        && entitiy.x + entitiy.width + self.style.cellBorderWidth > x\n                        && entitiy.y - self.style.cellBorderWidth < y\n                        && entitiy.y + entitiy.height + self.style.cellBorderWidth > y) {\n                    if (/frozen-row-marker/.test(cell.style)) {\n                        cell.dragContext = cell.style;\n                        cell.context = 'row-resize';\n                        return cell;\n                    }\n                    if (/frozen-column-marker/.test(cell.style)) {\n                        cell.dragContext = cell.style;\n                        cell.context = 'col-resize';\n                        return cell;\n                    }\n                    if (/selection-handle-/.test(cell.style)) {\n                        cell.dragContext = cell.style;\n                        cell.context = 'crosshair';\n                        return cell;\n                    }\n                    if (/vertical-scroll-(bar|box)/.test(cell.style)) {\n                        cell.dragContext = 'vertical-scroll-box';\n                        cell.context = 'vertical-scroll-box';\n                        cell.isScrollBar = true;\n                        cell.isVerticalScrollBar = true;\n                        if (y > self.scrollBox.box.v.y + self.scrollBox.scrollBoxHeight) {\n                            cell.dragContext = 'vertical-scroll-bottom';\n                            cell.context = 'vertical-scroll-bottom';\n                        } else if (y < self.scrollBox.box.v.y) {\n                            cell.dragContext = 'vertical-scroll-top';\n                            cell.context = 'vertical-scroll-top';\n                        }\n                        self.cursor = 'default';\n                        return cell;\n                    }\n                    if (/horizontal-scroll-(bar|box)/.test(cell.style)) {\n                        cell.dragContext = 'horizontal-scroll-box';\n                        cell.context = 'horizontal-scroll-box';\n                        cell.isScrollBar = true;\n                        cell.isHorizontalScrollBar = true;\n                        if (x > self.scrollBox.box.h.x + self.scrollBox.scrollBoxWidth) {\n                            cell.dragContext = 'horizontal-scroll-right';\n                            cell.context = 'horizontal-scroll-right';\n                        } else if (x < self.scrollBox.box.h.x) {\n                            cell.dragContext = 'horizontal-scroll-left';\n                            cell.context = 'horizontal-scroll-left';\n                        }\n                        self.cursor = 'default';\n                        return cell;\n                    }\n                    border = getBorder(entitiy);\n                    // check if the border of this cell is the border of the selection and if so show move cursor in move mode\n                    moveBorder = moveMode && cell.selectionBorder && cell.selectionBorder.indexOf(border) !== -1;\n                    if (['l', 'r'].indexOf(border) !== -1\n                            && (self.attributes.allowColumnResize || moveBorder)\n                            && ((self.attributes.allowColumnResizeFromCell && cell.isNormal) || !cell.isNormal || moveBorder)\n                            && ((self.attributes.allowRowHeaderResize && (cell.isRowHeader || cell.isCorner)) || !(cell.isRowHeader && cell.isCorner))) {\n                        if (((cell.isColumnHeader || cell.isCorner) || (self.attributes.allowColumnResizeFromCell && cell.isNormal)) && border === 'r') {\n                            cell.context = 'ew-resize';\n                            cell.dragContext = 'ew-resize';\n                            return cell;\n                        }\n                        if (!(cell.isColumnHeader || cell.isCorner) && moveBorder) {\n                            cell.context = xBorderBehavior;\n                            cell.dragContext = border + '-move';\n                            return cell;\n                        }\n                    }\n                    if (['t', 'b'].indexOf(border) !== -1\n                            && cell.rowIndex > -1\n                            && (self.attributes.allowRowResize || moveBorder)\n                            && ((self.attributes.allowRowResizeFromCell && cell.isNormal) || !cell.isNormal || moveBorder)\n                            && !cell.isColumnHeader) {\n                        if (((cell.isRowHeader || cell.isCorner) || (self.attributes.allowRowResizeFromCell && cell.isNormal)) && border === 'b') {\n                            cell.context = 'ns-resize';\n                            cell.dragContext = 'ns-resize';\n                            return cell;\n                        }\n                        if (!(cell.isRowHeader || cell.isCorner) && moveBorder) {\n                            cell.context = yBorderBehavior;\n                            cell.dragContext = border + '-move';\n                            return cell;\n                        }\n                    }\n                    if (cell.style === 'columnHeaderCell') {\n                        cell.context = 'cell';\n                        cell.dragContext = 'column-reorder';\n                        return cell;\n                    }\n                    if (cell.style === 'rowHeaderCell') {\n                        if ((self.attributes.rowGrabZoneSize + (cell.y - self.style.cellBorderWidth) < y)\n                                || !self.attributes.allowRowReordering) {\n                            cell.dragContext = 'cell';\n                            cell.context = 'cell';\n                        } else {\n                            cell.context = self.cursorGrab;\n                            cell.dragContext = 'row-reorder';\n                        }\n                        return cell;\n                    }\n                    if (cell.isGrid) {\n                        self.hasFocus = false;\n                        cell.dragContext = 'cell-grid';\n                        cell.context = 'cell-grid';\n                        return cell;\n                    }\n                    if (cell.style === 'tree-grid') {\n                        self.hasFocus = false;\n                        cell.dragContext = 'tree';\n                        cell.context = 'tree';\n                        return cell;\n                    }\n                    cell.dragContext = 'cell';\n                    cell.context = 'cell';\n                    return cell;\n                }\n            }\n            self.hasFocus = true;\n            self.cursor = 'default';\n            return {\n                dragContext: 'background',\n                context: 'background',\n                style: 'background',\n                isBackground: true\n            };\n        };\n        /**\n         * Gets the bounds of current selection. \n         * @returns {rect} selection.\n         * @memberof canvasDatagrid\n         * @name getSelectionBounds\n         * @method\n         */\n        self.getSelectionBounds = function () {\n            var low = {x: Infinity, y: Infinity},\n                high = {x: -Infinity, y: -Infinity};\n            self.selections.forEach(function (row, rowIndex) {\n                var maxCol, minCol;\n                low.y = rowIndex < low.y ? rowIndex : low.y;\n                high.y = rowIndex > high.y ? rowIndex : high.y;\n                maxCol = Math.max.apply(null, row);\n                minCol = Math.min.apply(null, row);\n                low.x = minCol < low.x ? minCol : low.x;\n                high.x = maxCol > high.x ? maxCol : high.x;\n            });\n            return {\n                top: low.y,\n                left: low.x,\n                bottom: high.y,\n                right: high.x\n            };\n        };\n        /**\n         * Returns an auto generated schema based on data structure.\n         * @memberof canvasDatagrid\n         * @name getSchemaFromData\n         * @method\n         * @tutorial schema\n         * @returns {schema} schema A schema based on the first item in the data array.\n         */\n        self.getSchemaFromData = function (d) {\n            d = d || self.data;\n            return Object.keys(d[0] || {' ': ''}).map(function mapEachSchemaColumn(key, index) {\n                var type = self.getBestGuessDataType(key, d),\n                    i = {\n                        name: key,\n                        title: isNaN(parseInt(key, 10)) ? key : self.integerToAlpha(key).toUpperCase(),\n                        index: index,\n                        type: type,\n                        filter: self.filter(type)\n                    };\n                if (self.storedSettings\n                        && self.storedSettings.visibility\n                        && self.storedSettings.visibility[i.name] !== undefined) {\n                    i.hidden = !self.storedSettings.visibility[i.name];\n                }\n                return i;\n            });\n        };\n        /**\n         * Clears the change log grid.changes that keeps track of changes to the data set.\n         * This does not undo changes or alter data it is simply a convince array to keep\n         * track of changes made to the data since last this method was called.\n         * @memberof canvasDatagrid\n         * @name clearChangeLog\n         * @method\n         */\n        self.clearChangeLog = function () {\n            self.changes = [];\n        };\n        /**\n         * Selects an area of the grid.\n         * @memberof canvasDatagrid\n         * @name selectArea\n         * @method\n         * @param {rect} bounds A rect object representing the selected values.\n         */\n        self.selectArea = function (bounds, ctrl) {\n            self.selectionBounds = bounds || self.selectionBounds;\n            var ev, x, y, s = self.getSchema();\n            if (!ctrl) {\n                self.selections = [];\n            }\n            if (self.selectionBounds.top < -1\n                    || self.selectionBounds.bottom > self.data.length\n                    || self.selectionBounds.left < -1\n                    || self.selectionBounds.right > s.length) {\n                throw new Error('Impossible selection area');\n            }\n            for (x = self.selectionBounds.top; x <= self.selectionBounds.bottom; x += 1) {\n                self.selections[x] = [];\n                for (y = self.selectionBounds.left; y <= self.selectionBounds.right; y += 1) {\n                    if (self.selections[x].indexOf(y) === -1) {\n                        self.selections[x].push(y);\n                    }\n                }\n            }\n            ev = {\n                selections: self.selections,\n                selectionBounds: self.selectionBounds\n            };\n            Object.defineProperty(ev, 'selectedData', {\n                get: function () {\n                    return self.getSelectedData();\n                }\n            });\n            self.dispatchEvent('selectionchanged', ev);\n        };\n        /**\n         * Returns the maximum text width for a given column by column name.\n         * @memberof canvasDatagrid\n         * @name findColumnMaxTextLength\n         * @method\n         * @returns {number} The number of pixels wide the maximum width value in the selected column.\n         * @param {string} name The name of the column to calculate the value's width of.\n         */\n        self.findColumnMaxTextLength = function (name) {\n            var m = -Infinity;\n            if (name === 'cornerCell') {\n                self.ctx.font = self.style.rowHeaderCellFont;\n                return self.ctx.measureText((self.data.length + (self.attributes.showNewRow ? 1 : 0)).toString()).width\n                    + self.style.autosizePadding + self.style.autosizeHeaderCellPadding\n                    + self.style.rowHeaderCellPaddingRight\n                    + self.style.rowHeaderCellPaddingLeft\n                    + (self.attributes.tree ? self.style.treeArrowWidth\n                        + self.style.treeArrowMarginLeft + self.style.treeArrowMarginRight : 0);\n            }\n            self.getSchema().forEach(function (col) {\n                if (col.name !== name) { return; }\n                self.ctx.font = self.style.columnHeaderCellFont;\n                var t = self.ctx.measureText(col.title || col.name).width\n                    + self.style.headerCellPaddingRight\n                    + self.style.headerCellPaddingLeft;\n                m = t > m ? t : m;\n            });\n            self.data.forEach(function (row) {\n                self.ctx.font = self.style.cellFont;\n                var t = self.ctx.measureText(row[name]).width\n                    + self.style.cellPaddingRight\n                    + self.style.cellPaddingLeft + self.style.cellAutoResizePadding;\n                m = t > m ? t : m;\n            });\n            return m;\n        };\n        /**\n         * Gets the total width of all header columns.\n         * @memberof canvasDatagrid\n         * @name getHeaderWidth\n         * @method\n         */\n        self.getHeaderWidth = function () {\n            return self.getVisibleSchema().reduce(function (total, header) {\n                return total + (header.width || self.style.cellWidth);\n            }, 0);\n        };\n        /**\n         * Gets the height of a row by index.\n         * @memberof canvasDatagrid\n         * @name getRowHeight\n         * @method\n         * @param {number} rowIndex The row index to lookup.\n         */\n        self.getRowHeight = function (rowIndex) {\n            return ((self.sizes.rows[rowIndex]\n                    || self.style.cellHeight) * self.scale);\n        };\n        /**\n         * Gets the width of a column by index.\n         * @memberof canvasDatagrid\n         * @name getColummnWidth\n         * @method\n         * @param {number} columnIndex The column index to lookup.\n         */\n        self.getColummnWidth = function (columnIndex) {\n            return ((self.sizes.columns[columnIndex]\n                    || self.getSchema()[columnIndex].width\n                    || self.style.cellWidth) * self.scale);\n        };\n        self.formatters.string = function cellFormatterString(e) {\n            return e.cell.value !== undefined ? e.cell.value : '';\n        };\n        self.formatters.rowHeaderCell = self.formatters.string;\n        self.formatters.headerCell = self.formatters.string;\n        self.formatters.number = self.formatters.string;\n        self.formatters.int = self.formatters.string;\n        self.formatters.html = self.formatters.string;\n        self.sorters.string = function (columnName, direction) {\n            var asc = direction === 'asc';\n            return function (a, b) {\n                if (a[columnName] === undefined || a[columnName] === null) {\n                    return 1;\n                }\n                if (b[columnName] === undefined || b[columnName] === null) {\n                    return 0;\n                }\n                if (asc) {\n                    if (!a[columnName].localeCompare) { return 1; }\n                    return a[columnName].localeCompare(b[columnName]);\n                }\n                if (!b[columnName].localeCompare) { return 1; }\n                return b[columnName].localeCompare(a[columnName]);\n            };\n        };\n        self.sorters.number = function (columnName, direction) {\n            var asc = direction === 'asc';\n            return function (a, b) {\n                if (asc) {\n                    return a[columnName] - b[columnName];\n                }\n                return b[columnName] - a[columnName];\n            };\n        };\n        self.sorters.date = function (columnName, direction) {\n            var asc = direction === 'asc';\n            return function (a, b) {\n                if (asc) {\n                    return new Date(a[columnName]).getTime()\n                        - new Date(b[columnName]).getTime();\n                }\n                return new Date(b[columnName]).getTime()\n                        - new Date(a[columnName]).getTime();\n            };\n        };\n    };\n}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\n\n/***/ })\n/******/ ]);\n});\n\n\n// WEBPACK FOOTER //\n// canvas-datagrid.js"," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, {\n \t\t\t\tconfigurable: false,\n \t\t\t\tenumerable: true,\n \t\t\t\tget: getter\n \t\t\t});\n \t\t}\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 1);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap 84d1080793981de45952","/*jslint browser: true, unparam: true, todo: true*/\n/*globals define: true, MutationObserver: false, requestAnimationFrame: false, performance: false, btoa: false*/\ndefine([], function () {\n    'use strict';\n    return function (self) {\n        self.defaults = {\n            attributes: [\n                ['allowColumnReordering', true],\n                ['allowColumnResize', true],\n                ['allowColumnResizeFromCell', false],\n                ['allowFreezingRows', false],\n                ['allowFreezingColumns', false],\n                ['allowMovingSelection', true],\n                ['allowRowHeaderResize', true],\n                ['allowRowReordering', false],\n                ['allowRowResize', true],\n                ['allowRowResizeFromCell', false],\n                ['allowSorting', true],\n                ['autoGenerateSchema', false],\n                ['autoResizeColumns', false],\n                ['borderDragBehavior', 'none'],\n                ['borderResizeZone', 10],\n                ['clearSettingsOptionText', 'Clear saved settings'],\n                ['columnHeaderClickBehavior', 'sort'],\n                ['columnSelectorHiddenText', '&nbsp;&nbsp;&nbsp;'],\n                ['columnSelectorText', 'Add/Remove columns'],\n                ['columnSelectorVisibleText', '\\u2713'],\n                ['contextHoverScrollAmount', 2],\n                ['contextHoverScrollRateMs', 5],\n                ['copyHeadersOnSelectAll', true],\n                ['copyText', 'Copy'],\n                ['debug', false],\n                ['editable', true],\n                ['ellipsisText', '...'],\n                ['filterOptionText', 'Filter %s'],\n                ['filterTextPrefix', '(filtered) '],\n                ['globalRowResize', false],\n                ['hideColumnText', 'Hide %s'],\n                ['maxAutoCompleteItems', 200],\n                ['multiLine', false],\n                ['name', ''],\n                ['pageUpDownOverlap', 1],\n                ['pasteText', 'Paste'],\n                ['persistantSelectionMode', false],\n                ['removeFilterOptionText', 'Remove filter on %s'],\n                ['reorderDeadZone', 3],\n                ['resizeScrollZone', 20],\n                ['rowGrabZoneSize', 5],\n                ['saveAppearance', true],\n                ['scrollAnimationPPSThreshold', 0.75],\n                ['scrollPointerLock', false],\n                ['scrollRepeatRate', 75],\n                ['selectionFollowsActiveCell', false],\n                ['selectionHandleBehavior', 'none'],\n                ['selectionMode', 'cell'],\n                ['selectionScrollIncrement', 20],\n                ['selectionScrollZone', 20],\n                ['showClearSettingsOption', true],\n                ['showColumnHeaders', true],\n                ['showColumnSelector', true],\n                ['showCopy', false],\n                ['showFilter', true],\n                ['showNewRow', false],\n                ['showOrderByOption', true],\n                ['showOrderByOptionTextAsc', 'Order by %s ascending'],\n                ['showOrderByOptionTextDesc', 'Order by %s descending'],\n                ['showPaste', false],\n                ['showPerformance', false],\n                ['showRowHeaders', true],\n                ['showRowNumbers', true],\n                ['snapToRow', false],\n                ['touchContextMenuTimeMs', 800],\n                ['touchDeadZone', 3],\n                ['touchEasingMethod', 'easeOutQuad'],\n                ['touchReleaseAcceleration', 1000],\n                ['touchReleaseAnimationDurationMs', 2000],\n                ['touchScrollZone', 20],\n                ['touchSelectHandleZone', 20],\n                ['touchZoomSensitivity', 0.005],\n                ['touchZoomMin', 0.5],\n                ['touchZoomMax', 1.75],\n                ['maxPixelRatio', 2],\n                ['tree', false],\n                ['treeHorizontalScroll', false]\n            ],\n            styles: [\n                ['activeCellBackgroundColor', 'rgba(255, 255, 255, 1)'],\n                ['activeCellBorderColor', 'rgba(110, 168, 255, 1)'],\n                ['activeCellBorderWidth', 1],\n                ['activeCellColor', 'rgba(0, 0, 0, 1)'],\n                ['activeCellFont', '16px sans-serif'],\n                ['activeCellHoverBackgroundColor', 'rgba(255, 255, 255, 1)'],\n                ['activeCellHorizontalAlignment', 'left'],\n                ['activeCellHoverColor', 'rgba(0, 0, 0, 1)'],\n                ['activeCellOverlayBorderColor', 'rgba(66, 133, 244, 1)'],\n                ['activeCellOverlayBorderWidth', 1],\n                ['activeCellPaddingBottom', 5],\n                ['activeCellPaddingLeft', 5],\n                ['activeCellPaddingRight', 5],\n                ['activeCellPaddingTop', 5],\n                ['activeCellSelectedBackgroundColor', 'rgba(236, 243, 255, 1)'],\n                ['activeCellSelectedColor', 'rgba(0, 0, 0, 1)'],\n                ['activeCellVerticalAlignment', 'center'],\n                ['activeColumnHeaderCellBackgroundColor', 'rgba(225, 225, 225, 1)'],\n                ['activeColumnHeaderCellColor', 'rgba(0, 0, 0, 1)'],\n                ['activeRowHeaderCellBackgroundColor', 'rgba(225, 225, 225, 1)'],\n                ['activeRowHeaderCellColor', 'rgba(0, 0, 0, 1)'],\n                ['autocompleteBottomMargin', 60],\n                ['autosizeHeaderCellPadding', 8],\n                ['autosizePadding', 5],\n                ['cellAutoResizePadding', 13],\n                ['cellBackgroundColor', 'rgba(255, 255, 255, 1)'],\n                ['cellBorderColor', 'rgba(195, 199, 202, 1)'],\n                ['cellBorderWidth', 1],\n                ['cellColor', 'rgba(0, 0, 0, 1)'],\n                ['cellFont', '16px sans-serif'],\n                ['cellGridHeight', 250],\n                ['cellHeight', 24],\n                ['cellHeightWithChildGrid', 150],\n                ['cellHorizontalAlignment', 'left'],\n                ['cellHoverBackgroundColor', 'rgba(255, 255, 255, 1)'],\n                ['cellHoverColor', 'rgba(0, 0, 0, 1)'],\n                ['cellPaddingBottom', 5],\n                ['cellPaddingLeft', 5],\n                ['cellPaddingRight', 5],\n                ['cellPaddingTop', 5],\n                ['cellSelectedBackgroundColor', 'rgba(236, 243, 255, 1)'],\n                ['cellSelectedColor', 'rgba(0, 0, 0, 1)'],\n                ['cellVerticalAlignment', 'center'],\n                ['cellWidth', 250],\n                ['cellWidthWithChildGrid', 250],\n                ['cellWhiteSpace', 'nowrap'],\n                ['cellLineHeight', 1],\n                ['cellLineSpacing', 3],\n                ['childContextMenuArrowColor', 'rgba(43, 48, 43, 1)'],\n                ['childContextMenuArrowHTML', '&#x25BA;'],\n                ['childContextMenuMarginLeft', -11],\n                ['childContextMenuMarginTop', -6],\n                ['columnHeaderCellBackgroundColor', 'rgba(240, 240, 240, 1)'],\n                ['columnHeaderCellBorderColor', 'rgba(172, 172, 172, 1)'],\n                ['columnHeaderCellBorderWidth', 1],\n                ['columnHeaderCellCapBackgroundColor', 'rgba(240, 240, 240, 1)'],\n                ['columnHeaderCellCapBorderColor', 'rgba(172, 172, 172, 1)'],\n                ['columnHeaderCellCapBorderWidth', 1],\n                ['columnHeaderCellColor', 'rgba(50, 50, 50, 1)'],\n                ['columnHeaderCellFont', '16px sans-serif'],\n                ['columnHeaderCellHeight', 25],\n                ['columnHeaderCellHorizontalAlignment', 'left'],\n                ['columnHeaderCellHoverBackgroundColor', 'rgba(235, 235, 235, 1)'],\n                ['columnHeaderCellHoverColor', 'rgba(0, 0, 0, 1)'],\n                ['columnHeaderCellPaddingBottom', 5],\n                ['columnHeaderCellPaddingLeft', 5],\n                ['columnHeaderCellPaddingRight', 5],\n                ['columnHeaderCellPaddingTop', 5],\n                ['columnHeaderCellVerticalAlignment', 'center'],\n                ['columnHeaderOrderByArrowBorderColor', 'rgba(195, 199, 202, 1)'],\n                ['columnHeaderOrderByArrowBorderWidth', 1],\n                ['columnHeaderOrderByArrowColor', 'rgba(155, 155, 155, 1)'],\n                ['columnHeaderOrderByArrowHeight', 8],\n                ['columnHeaderOrderByArrowMarginLeft', 0],\n                ['columnHeaderOrderByArrowMarginRight', 5],\n                ['columnHeaderOrderByArrowMarginTop', 6],\n                ['columnHeaderOrderByArrowWidth', 13],\n                ['contextFilterButtonBorder', 'solid 1px rgba(158, 163, 169, 1)'],\n                ['contextFilterButtonBorderRadius', '3px'],\n                ['contextFilterButtonHTML', '&#x25BC;'],\n                ['contextFilterInputBackground', 'rgba(255,255,255,1)'],\n                ['contextFilterInputBorder', 'solid 1px rgba(158, 163, 169, 1)'],\n                ['contextFilterInputBorderRadius', '0'],\n                ['contextFilterInputColor', 'rgba(0,0,0,1)'],\n                ['contextFilterInputFontFamily', 'sans-serif'],\n                ['contextFilterInputFontSize', '14px'],\n                ['contextFilterInvalidRegExpBackground', 'rgba(180, 6, 1, 1)'],\n                ['contextFilterInvalidRegExpColor', 'rgba(255, 255, 255, 1)'],\n                ['contextMenuArrowColor', 'rgba(43, 48, 43, 1)'],\n                ['contextMenuArrowDownHTML', '&#x25BC;'],\n                ['contextMenuArrowUpHTML', '&#x25B2;'],\n                ['contextMenuBackground', 'rgba(240, 240, 240, 1)'],\n                ['contextMenuBorder', 'solid 1px rgba(158, 163, 169, 1)'],\n                ['contextMenuBorderRadius', '3px'],\n                ['contextMenuChildArrowFontSize', '12px'],\n                ['contextMenuColor', 'rgba(43, 48, 43, 1)'],\n                ['contextMenuCursor', 'default'],\n                ['contextMenuFilterButtonFontFamily', 'sans-serif'],\n                ['contextMenuFilterButtonFontSize', '10px'],\n                ['contextMenuFilterInvalidExpresion', 'rgba(237, 155, 156, 1)'],\n                ['contextMenuFontFamily', 'sans-serif'],\n                ['contextMenuFontSize', '16px'],\n                ['contextMenuHoverBackground', 'rgba(182, 205, 250, 1)'],\n                ['contextMenuHoverColor', 'rgba(43, 48, 153, 1)'],\n                ['contextMenuItemBorderRadius', '3px'],\n                ['contextMenuItemMargin', '2px'],\n                ['contextMenuLabelDisplay', 'inline-block'],\n                ['contextMenuLabelMargin', '0 3px 0 0'],\n                ['contextMenuLabelMaxWidth', '700px'],\n                ['contextMenuLabelMinWidth', '75px'],\n                ['contextMenuMarginLeft', 3],\n                ['contextMenuMarginTop', -3],\n                ['contextMenuOpacity', '0.98'],\n                ['contextMenuPadding', '2px'],\n                ['contextMenuWindowMargin', 30],\n                ['contextMenuZIndex', 10000],\n                ['cornerCellBackgroundColor', 'rgba(240, 240, 240, 1)'],\n                ['cornerCellBorderColor', 'rgba(202, 202, 202, 1)'],\n                ['debugBackgroundColor', 'rgba(0, 0, 0, .0)'],\n                ['debugColor', 'rgba(255, 15, 24, 1)'],\n                ['debugEntitiesColor', 'rgba(76, 231, 239, 1.00)'],\n                ['debugFont', '11px sans-serif'],\n                ['debugPerfChartBackground', 'rgba(29, 25, 26, 1.00)'],\n                ['debugPerfChartTextColor', 'rgba(255, 255, 255, 0.8)'],\n                ['debugPerformanceColor', 'rgba(252, 255, 37, 1.00)'],\n                ['debugScrollHeightColor', 'rgba(248, 33, 103, 1.00)'],\n                ['debugScrollWidthColor', 'rgba(66, 255, 27, 1.00)'],\n                ['debugTouchPPSXColor', 'rgba(246, 102, 24, 1.00)'],\n                ['debugTouchPPSYColor', 'rgba(186, 0, 255, 1.00)'],\n                ['display', 'inline-block'],\n                ['editCellBackgroundColor', 'white'],\n                ['editCellBorder', 'solid 1px rgba(110, 168, 255, 1)'],\n                ['editCellBoxShadow', '0 2px 5px rgba(0,0,0,0.4)'],\n                ['editCellColor', 'black'],\n                ['editCellFontFamily', 'sans-serif'],\n                ['editCellFontSize', '16px'],\n                ['editCellPaddingLeft', 4],\n                ['editCellZIndex', 10000],\n                ['frozenMarkerHoverColor', 'rgba(236, 243, 255, 1)'],\n                ['frozenMarkerHoverBorderColor', 'rgba(110, 168, 255, 1)'],\n                ['frozenMarkerActiveColor', 'rgba(236, 243, 255, 1)'],\n                ['frozenMarkerActiveBorderColor', 'rgba(110, 168, 255, 1)'],\n                ['frozenMarkerColor', 'rgba(222, 222, 222, 1)'],\n                ['frozenMarkerBorderColor', 'rgba(168, 168, 168, 1)'],\n                ['frozenMarkerBorderWidth', 1],\n                ['frozenMarkerWidth', 2],\n                ['gridBackgroundColor', 'rgba(240, 240, 240, 1)'],\n                ['gridBorderCollapse', 'collapse'],\n                ['gridBorderColor', 'rgba(202, 202, 202, 1)'],\n                ['gridBorderWidth', 1],\n                ['height', 'auto'],\n                ['maxHeight', 'inherit'],\n                ['maxWidth', 'inherit'],\n                ['minColumnWidth', 45],\n                ['minHeight', 'inherit'],\n                ['minRowHeight', 24],\n                ['minWidth', 'inherit'],\n                ['mobileContextMenuMargin', 10],\n                ['mobileEditInputHeight', 30],\n                ['mobileEditFontFamily', 'sans-serif'],\n                ['mobileEditFontSize', '16px'],\n                ['moveOverlayBorderWidth', 1],\n                ['moveOverlayBorderColor', 'rgba(66, 133, 244, 1)'],\n                ['moveOverlayBorderSegments', '12, 7'],\n                ['name', 'default'],\n                ['overflowY', 'auto'],\n                ['overflowX', 'auto'],\n                ['reorderMarkerBackgroundColor', 'rgba(0, 0, 0, 0.1)'],\n                ['reorderMarkerBorderColor', 'rgba(0, 0, 0, 0.2)'],\n                ['reorderMarkerBorderWidth', 1.25],\n                ['reorderMarkerIndexBorderColor', 'rgba(66, 133, 244, 1)'],\n                ['reorderMarkerIndexBorderWidth', 2.75],\n                ['rowHeaderCellBackgroundColor', 'rgba(240, 240, 240, 1)'],\n                ['rowHeaderCellBorderColor', 'rgba(200, 200, 200, 1)'],\n                ['rowHeaderCellBorderWidth', 1],\n                ['rowHeaderCellColor', 'rgba(50, 50, 50, 1)'],\n                ['rowHeaderCellFont', '16px sans-serif'],\n                ['rowHeaderCellHeight', 25],\n                ['rowHeaderCellHorizontalAlignment', 'left'],\n                ['rowHeaderCellHoverBackgroundColor', 'rgba(235, 235, 235, 1)'],\n                ['rowHeaderCellHoverColor', 'rgba(0, 0, 0, 1)'],\n                ['rowHeaderCellPaddingBottom', 5],\n                ['rowHeaderCellPaddingLeft', 5],\n                ['rowHeaderCellPaddingRight', 5],\n                ['rowHeaderCellPaddingTop', 5],\n                ['rowHeaderCellSelectedBackgroundColor', 'rgba(217, 217, 217, 1)'],\n                ['rowHeaderCellSelectedColor', 'rgba(50, 50, 50, 1)'],\n                ['rowHeaderCellVerticalAlignment', 'center'],\n                ['rowHeaderCellWidth', 57],\n                ['scrollBarActiveColor', 'rgba(125, 125, 125, 1)'],\n                ['scrollBarBackgroundColor', 'rgba(240, 240, 240, 1)'],\n                ['scrollBarBorderColor', 'rgba(202, 202, 202, 1)'],\n                ['scrollBarBorderWidth', 0.5],\n                ['scrollBarBoxBorderRadius', 4.125],\n                ['scrollBarBoxColor', 'rgba(192, 192, 192, 1)'],\n                ['scrollBarBoxMargin', 2],\n                ['scrollBarBoxMinSize', 15],\n                ['scrollBarBoxWidth', 8],\n                ['scrollBarCornerBackgroundColor', 'rgba(240, 240, 240, 1)'],\n                ['scrollBarCornerBorderColor', 'rgba(202, 202, 202, 1)'],\n                ['scrollBarWidth', 11],\n                ['selectionHandleBorderColor', 'rgba(255, 255, 255, 1)'],\n                ['selectionHandleBorderWidth', 1.5],\n                ['selectionHandleColor', 'rgba(66, 133, 244, 1)'],\n                ['selectionHandleSize', 8],\n                ['selectionHandleType', 'square'],\n                ['selectionOverlayBorderColor', 'rgba(66, 133, 244, 1)'],\n                ['selectionOverlayBorderWidth', 1],\n                ['treeArrowBorderColor', 'rgba(195, 199, 202, 1)'],\n                ['treeArrowBorderWidth', 1],\n                ['treeArrowClickRadius', 5],\n                ['treeArrowColor', 'rgba(155, 155, 155, 1)'],\n                ['treeArrowHeight', 8],\n                ['treeArrowMarginLeft', 0],\n                ['treeArrowMarginRight', 5],\n                ['treeArrowMarginTop', 6],\n                ['treeArrowWidth', 13],\n                ['treeGridHeight', 250],\n                ['width', 'auto']\n            ]\n        };\n    };\n});\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./lib/defaults.js\n// module id = 0\n// module chunks = 0","/*jslint browser: true, unparam: true, todo: true, evil: true*/\n/*globals Reflect: false, HTMLElement: true, define: true, MutationObserver: false, requestAnimationFrame: false, performance: false, btoa: false*/\ndefine([\n    './component',\n    './defaults',\n    './draw',\n    './events',\n    './touch',\n    './intf',\n    './contextMenu',\n    './dom',\n    './publicMethods'\n], function context(component) {\n    'use strict';\n    component = component();\n    var modules = Array.prototype.slice.call(arguments);\n    function Grid(args) {\n        args = args || {};\n        var self = {};\n        self.isComponent = args.component === undefined;\n        self.isChildGrid = args.parentNode && /canvas-datagrid-(cell|tree)/.test(args.parentNode.nodeType);\n        if (self.isChildGrid) {\n            self.intf = {};\n        } else {\n            self.intf = self.isComponent ? eval('Reflect.construct(HTMLElement, [], new.target)')\n                : document.createElement('canvas');\n        }\n        self.args = args;\n        self.intf.args = args;\n        self.applyComponentStyle = component.applyComponentStyle;\n        self.hyphenateProperty = component.hyphenateProperty;\n        self.dehyphenateProperty = component.dehyphenateProperty;\n        self.createGrid = function grid(args) {\n            args.component = false;\n            return new Grid(args);\n        };\n        modules.forEach(function (module) {\n            module(self);\n        });\n        if (self.isChildGrid) {\n            self.shadowRoot = args.parentNode.shadowRoot;\n            self.parentNode = args.parentNode;\n        } else if (self.intf.createShadowRoot) {\n            self.shadowRoot = self.intf.attachShadow({mode: 'open'});\n            self.parentNode = self.shadowRoot;\n        } else {\n            self.parentNode = self.intf;\n        }\n        self.init();\n        return self.intf;\n    }\n    if (window.HTMLElement) {\n        Grid.prototype = Object.create(window.HTMLElement.prototype);\n    }\n    // export web component\n    if (window.customElements) {\n        Grid.observedAttributes = component.getObservableAttributes();\n        Grid.prototype.disconnectedCallback = component.disconnectedCallback;\n        Grid.prototype.attributeChangedCallback = component.attributeChangedCallback;\n        Grid.prototype.connectedCallback = component.connectedCallback;\n        Grid.prototype.adoptedCallback = component.adoptedCallback;\n        window.customElements.define('canvas-datagrid', Grid);\n    }\n    // export global\n    if (window && !window.canvasDatagrid && !window.require) {\n        window.canvasDatagrid = function (args) { return new Grid(args); };\n    }\n    // export amd loader\n    module.exports = function grid(args) {\n        args = args || {};\n        var i, tKeys = ['style', 'formatters', 'sorters', 'filters',\n                    'treeGridAttributes', 'cellGridAttributes', 'data', 'schema'];\n        if (window.customElements && document.body.createShadowRoot) {\n            i = document.createElement('canvas-datagrid');\n            Object.keys(args).forEach(function (argKey) {\n                // set data and parentNode after everything else\n                if (argKey === 'data') { return; }\n                if (argKey === 'parentNode') { return; }\n                // top level keys in args\n                if (tKeys.indexOf(argKey) !== -1) {\n                    tKeys.forEach(function (tKey) {\n                        if (args[tKey] === undefined || tKey !== argKey) { return; }\n                        if (['formatters', 'sorters', 'filters'].indexOf(argKey) !== -1) {\n                            if (typeof args[tKey] === 'object' && args[tKey] !== null) {\n                                Object.keys(args[tKey]).forEach(function (sKey) {\n                                    i[tKey][sKey] = args[tKey][sKey];\n                                });\n                            }\n                        } else {\n                            i[tKey] = args[tKey];\n                        }\n                    });\n                    return;\n                }\n                // all others are attribute level keys\n                i.attributes[argKey] = args[argKey];\n            });\n            if (args.data) {\n                i.data = args.data;\n            }\n            // add to the dom very last to avoid redraws\n            if (args.parentNode) {\n                args.parentNode.appendChild(i);\n            }\n            return i;\n        }\n        args.component = false;\n        i = new Grid(args);\n        if (args.parentNode && args.parentNode.appendChild) {\n            args.parentNode.appendChild(i);\n        }\n        return i;\n    };\n    return module.exports;\n});\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./lib/main.js\n// module id = 1\n// module chunks = 0","/*jslint browser: true, unparam: true, todo: true*/\n/*globals define: true, MutationObserver: false, requestAnimationFrame: false, performance: false, btoa: false*/\ndefine(['./defaults'], function (defaults) {\n    'use strict';\n    return function () {\n        var typeMap, component = {};\n        component.dehyphenateProperty = function hyphenateProperty(prop) {\n            prop = prop.replace('--cdg-', '');\n            var p = '', nextLetterCap;\n            Array.prototype.forEach.call(prop, function (char) {\n                if (nextLetterCap) {\n                    nextLetterCap = false;\n                    p += char.toUpperCase();\n                    return;\n                }\n                if (char === '-') {\n                    nextLetterCap = true;\n                    return;\n                }\n                p += char;\n            });\n            return p;\n        };\n        component.hyphenateProperty = function hyphenateProperty(prop, cust) {\n            var p = '';\n            Array.prototype.forEach.call(prop, function (char) {\n                if (char === char.toUpperCase()) {\n                    p += '-' + char.toLowerCase();\n                    return;\n                }\n                p += char;\n            });\n            return (cust ? '--cdg-' : '') + p;\n        };\n        function getDefaultItem(base, item) {\n            var i = {},\n                r;\n            defaults(i);\n            r = i.defaults[base].filter(function (i) {\n                return i[0].toLowerCase() === item.toLowerCase()\n                    || component.hyphenateProperty(i[0]) === item.toLowerCase()\n                    || component.hyphenateProperty(i[0], true) === item.toLowerCase();\n            })[0];\n            return r;\n        }\n        component.applyComponentStyle = function (supressChangeAndDrawEvents, intf) {\n            if (!intf.isComponent) { return; }\n            var cStyle = window.getComputedStyle(intf.tagName === 'CANVAS-DATAGRID' ? intf : intf.canvas, null),\n                defs = {};\n            intf.computedStyle = cStyle;\n            defaults(defs);\n            defs = defs.defaults.styles;\n            defs.forEach(function (def) {\n                var val;\n                val = cStyle.getPropertyValue(component.hyphenateProperty(def[0], true));\n                if (val === \"\") {\n                    val = cStyle.getPropertyValue(component.hyphenateProperty(def[0], false));\n                }\n                if (val !== \"\" && typeof val === 'string') {\n                    intf.setStyleProperty(def[0], typeMap[typeof def[1]](val\n                        .replace(/^\\s+/, '').replace(/\\s+$/, ''), def[1]), true);\n                }\n            });\n            if (!supressChangeAndDrawEvents && intf.dispatchEvent) {\n                requestAnimationFrame(function () { intf.resize(true); });\n                intf.dispatchEvent('stylechanged', intf.style);\n            }\n        };\n        typeMap = {\n            data: function (strData) {\n                try {\n                    return JSON.parse(strData);\n                } catch (e) {\n                    throw new Error('Cannot read JSON data in canvas-datagrid data.');\n                }\n            },\n            schema: function (strSchema) {\n                try {\n                    return JSON.parse(strSchema);\n                } catch (e) {\n                    throw new Error('Cannot read JSON data in canvas-datagrid schema attribute.');\n                }\n            },\n            number: function (strNum, def) {\n                var n = parseInt(strNum, 10);\n                return isNaN(n) ? def : n;\n            },\n            boolean: function (strBool) {\n                return (/true/i).test(strBool);\n            },\n            string: function (str) {\n                return str;\n            }\n        };\n        component.getObservableAttributes = function () {\n            var i = {}, attrs = ['data', 'schema', 'style', 'className', 'name'];\n            defaults(i);\n            i.defaults.attributes.forEach(function (attr) {\n                attrs.push(attr[0].toLowerCase());\n            });\n            return attrs;\n        };\n        component.disconnectedCallback = function () {\n            this.connected = false;\n        };\n        component.connectedCallback = function () {\n            var intf = this;\n            intf.parentDOMNode.innerHTML = \"\";\n            intf.parentDOMNode.appendChild(intf.canvas);\n            intf.connected = true;\n            component.observe(intf);\n            component.applyComponentStyle(true, intf);\n            intf.resize(true);\n        };\n        component.adoptedCallback = function () {\n            this.resize();\n        };\n        component.attributeChangedCallback = function (attrName, oldVal, newVal) {\n            var tfn, intf = this, def;\n            if (attrName === 'style') {\n                component.applyComponentStyle(false, intf);\n                return;\n            }\n            if (attrName === 'data') {\n                if (intf.dataType === 'application/x-canvas-datagrid') {\n                    intf.dataType = 'application/json+x-canvas-datagrid';\n                }\n                intf.args.data = newVal;\n                return;\n            }\n            if (attrName === 'schema') {\n                intf.args.schema = typeMap.schema(newVal);\n                return;\n            }\n            if (attrName === 'name') {\n                intf.name = newVal;\n                return;\n            }\n            if (attrName === 'class' || attrName === 'className') {\n                return;\n            }\n            def = getDefaultItem('attributes', attrName);\n            if (def) {\n                tfn = typeMap[typeof def[1]];\n                intf.attributes[def[0]] = tfn(newVal);\n                return;\n            }\n            if (/^on/.test(attrName)) {\n                intf.addEventListener('on' + attrName, function (e) {\n                    eval(newVal);\n                });\n            }\n            return;\n        };\n        component.observe = function (intf) {\n            var observer;\n            if (!window.MutationObserver) { return; }\n            intf.applyComponentStyle = function () { component.applyComponentStyle(false, intf); intf.resize(); };\n            /**\n             * Applies the computed css styles to the grid.  In some browsers, changing directives in attached style sheets does not automatically update the styles in this component.  It is necessary to call this method to update in these cases.\n             * @memberof canvasDatagrid\n             * @name applyComponentStyle\n             * @method\n             */\n            observer = new window.MutationObserver(function (mutations) {\n                var checkInnerHTML, checkStyle;\n                Array.prototype.forEach.call(mutations, function (mutation) {\n                    if (mutation.attributeName === 'class'\n                            || mutation.attributeName === 'style') {\n                        checkStyle = true;\n                        return;\n                    }\n                    if (mutation.target.parentNode\n                            && mutation.target.parentNode.nodeName === 'STYLE') {\n                        checkStyle = true;\n                        return;\n                    }\n                    if (mutation.addedNodes.length > 0 || mutation.type === 'characterData') {\n                        checkInnerHTML = true;\n                    }\n                });\n                if (checkStyle) {\n                    intf.applyComponentStyle(false, intf);\n                }\n                if (checkInnerHTML) {\n                    if (intf.dataType === 'application/x-canvas-datagrid') {\n                        intf.dataType = 'application/json+x-canvas-datagrid';\n                    }\n                    intf.data = intf.innerHTML;\n                }\n            });\n            observer.observe(intf, { characterData: true, childList: true, attributes: true, subtree: true });\n            Array.prototype.forEach.call(document.querySelectorAll('style'), function (el) {\n                observer.observe(el, { characterData: true, childList: true, attributes: true, subtree: true });\n            });\n        };\n        return component;\n    };\n});\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./lib/component.js\n// module id = 2\n// module chunks = 0","/*jslint browser: true, unparam: true, todo: true*/\n/*globals XMLSerializer: false, define: true, Blob: false, MutationObserver: false, requestAnimationFrame: false, performance: false, btoa: false*/\ndefine([], function () {\n    'use strict';\n    return function (self) {\n        var perfCounters = [],\n            cachedImagesDrawn = false,\n            drawCount = 0,\n            perfWindowSize = 300,\n            entityCount = [],\n            hiddenFrozenColumnCount = 0,\n            scrollDebugCounters = [],\n            touchPPSCounters = [];\n        self.htmlImageCache = {};\n        // more heavyweight version than fillArray defined in intf.js\n        function fillArray(low, high, step, def) {\n            step = step || 1;\n            var i = [], x;\n            for (x = low; x <= high; x += step) {\n                i[x] = def === undefined ? x : (typeof def === 'function' ? def(x) : def);\n            }\n            return i;\n        }\n        function drawPerfLine(w, h, x, y, perfArr, arrIndex, max, color, useAbs) {\n            var i = w / perfArr.length,\n                r = h / max;\n            x += self.canvasOffsetLeft;\n            y += self.canvasOffsetTop;\n            self.ctx.beginPath();\n            self.ctx.moveTo(x, y + h);\n            perfArr.forEach(function (n) {\n                var val = (arrIndex === undefined ? n : n[arrIndex]),\n                    cx,\n                    cy;\n                if (useAbs) {\n                    val = Math.abs(val);\n                }\n                cx = x + i;\n                cy = y + h - (val * r);\n                self.ctx.lineTo(cx, cy);\n                x += i;\n            });\n            self.ctx.moveTo(x + w, y + h);\n            self.ctx.strokeStyle = color;\n            self.ctx.stroke();\n        }\n        function drawOnAllImagesLoaded() {\n            var loaded = true;\n            Object.keys(self.htmlImageCache).forEach(function (html) {\n                if (!self.htmlImageCache[html].complete) {\n                    loaded = false;\n                }\n            });\n            if (loaded && !cachedImagesDrawn) {\n                cachedImagesDrawn = true;\n                self.draw();\n            }\n        }\n        function drawHtml(cell) {\n            var img,\n                v = cell.innerHTML || cell.formattedValue,\n                cacheKey = v.toString() + cell.rowIndex.toString() + cell.columnIndex.toString(), \n                x = cell.x + self.canvasOffsetLeft,\n                y = cell.y + self.canvasOffsetTop;\n            if (self.htmlImageCache[cacheKey]) {\n                img = self.htmlImageCache[cacheKey];\n                if (img.height !== cell.height || img.width !== cell.width) {\n                    // height and width of the cell has changed, invalidate cache\n                    self.htmlImageCache[cacheKey] = undefined;\n                } else {\n                    if (!img.complete) {\n                        return;\n                    }\n                    return self.ctx.drawImage(img, x, y);\n                }\n            } else {\n                cachedImagesDrawn = false;\n            }\n            img = new Image(cell.width, cell.height);\n            self.htmlImageCache[cacheKey] = img;\n            img.onload = function () {\n                self.ctx.drawImage(img, x, y);\n                drawOnAllImagesLoaded();\n            };\n            img.src = 'data:image/svg+xml;base64,' + btoa(\n                '<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"' + cell.width + '\" height=\"' + cell.height + '\">\\n' +\n                    '<foreignObject class=\"node\" x=\"0\" y=\"0\" width=\"100%\" height=\"100%\">\\n' +\n                    '<body xmlns=\"http://www.w3.org/1999/xhtml\" style=\"margin:0;padding:0;\">\\n' +\n                    v + '\\n' +\n                    '</body>' +\n                    '</foreignObject>\\n' +\n                    '</svg>\\n'\n            );\n        }\n        function drawOrderByArrow(x, y) {\n            var mt = self.style.columnHeaderOrderByArrowMarginTop * self.scale,\n                ml = self.style.columnHeaderOrderByArrowMarginLeft * self.scale,\n                mr = self.style.columnHeaderOrderByArrowMarginRight * self.scale,\n                aw = self.style.columnHeaderOrderByArrowWidth * self.scale,\n                ah = self.style.columnHeaderOrderByArrowHeight * self.scale;\n            x += self.canvasOffsetLeft;\n            y += self.canvasOffsetTop;\n            self.ctx.fillStyle = self.style.columnHeaderOrderByArrowColor;\n            self.ctx.strokeStyle = self.style.columnHeaderOrderByArrowBorderColor;\n            self.ctx.beginPath();\n            x = x + ml;\n            y = y + mt;\n            if (self.orderDirection === 'asc') {\n                self.ctx.moveTo(x, y);\n                self.ctx.lineTo(x + aw, y);\n                self.ctx.lineTo(x + (aw * 0.5), y + ah);\n                self.ctx.moveTo(x, y);\n            } else {\n                self.ctx.lineTo(x, y + ah);\n                self.ctx.lineTo(x + aw, y + ah);\n                self.ctx.lineTo(x + (aw * 0.5), y);\n                self.ctx.lineTo(x, y + ah);\n            }\n            self.ctx.stroke();\n            self.ctx.fill();\n            return ml + aw + mr;\n        }\n        function drawTreeArrow(cell, x, y) {\n            var mt = self.style.treeArrowMarginTop * self.scale,\n                mr = self.style.treeArrowMarginRight * self.scale,\n                ml = self.style.treeArrowMarginLeft * self.scale,\n                aw = self.style.treeArrowWidth * self.scale,\n                ah = self.style.treeArrowHeight * self.scale;\n            x += self.canvasOffsetLeft;\n            y += self.canvasOffsetTop;\n            self.ctx.fillStyle = self.style.treeArrowColor;\n            self.ctx.strokeStyle = self.style.treeArrowBorderColor;\n            self.ctx.beginPath();\n            x = x + ml;\n            y = y + mt;\n            if (self.openChildren[cell.rowIndex]) {\n                self.ctx.moveTo(x, y);\n                self.ctx.lineTo(x + aw, y);\n                self.ctx.lineTo(x + (aw * 0.5), y + ah);\n                self.ctx.moveTo(x, y);\n            } else {\n                self.ctx.lineTo(x, y);\n                self.ctx.lineTo(x + ah, y + (aw * 0.5));\n                self.ctx.lineTo(x, y + aw);\n                self.ctx.lineTo(x, y);\n            }\n            self.ctx.stroke();\n            self.ctx.fill();\n            return ml + aw + mr;\n        }\n        function radiusRect(x, y, w, h, radius) {\n            x += self.canvasOffsetLeft;\n            y += self.canvasOffsetTop;\n            var r = x + w, b = y + h;\n            self.ctx.beginPath();\n            self.ctx.moveTo(x + radius, y);\n            self.ctx.lineTo(r - radius, y);\n            self.ctx.quadraticCurveTo(r, y, r, y + radius);\n            self.ctx.lineTo(r, y + h - radius);\n            self.ctx.quadraticCurveTo(r, b, r - radius, b);\n            self.ctx.lineTo(x + radius, b);\n            self.ctx.quadraticCurveTo(x, b, x, b - radius);\n            self.ctx.lineTo(x, y + radius);\n            self.ctx.quadraticCurveTo(x, y, x + radius, y);\n        }\n        function fillRect(x, y, w, h) {\n            x += self.canvasOffsetLeft;\n            y += self.canvasOffsetTop;\n            self.ctx.fillRect(x, y, w, h);\n        }\n        function strokeRect(x, y, w, h) {\n            x += self.canvasOffsetLeft;\n            y += self.canvasOffsetTop;\n            self.ctx.strokeRect(x, y, w, h);\n        }\n        function fillText(text, x, y) {\n            x += self.canvasOffsetLeft;\n            y += self.canvasOffsetTop;\n            self.ctx.fillText(text, x, y);\n        }\n        function fillCircle(x, y, r) {\n            x += self.canvasOffsetLeft;\n            y += self.canvasOffsetTop;\n            self.ctx.beginPath();\n            self.ctx.arc(x, y, r, 0, 2 * Math.PI);\n            self.ctx.fill();\n        }\n        function strokeCircle(x, y, r) {\n            x += self.canvasOffsetLeft;\n            y += self.canvasOffsetTop;\n            self.ctx.beginPath();\n            self.ctx.arc(x, y, r, 0, 2 * Math.PI);\n            self.ctx.stroke();\n        }\n        function clipFrozenArea(mode) {\n            // 0 both, 1 rows, 2 cols\n            // self.lastFrozenColumnPixel;\n            // self.lastFrozenRowPixel;\n            self.ctx.beginPath();\n            if (mode === 0) {\n                self.ctx.moveTo(self.lastFrozenColumnPixel, self.lastFrozenRowPixel);\n                self.ctx.lineTo(self.lastFrozenColumnPixel, self.height);\n                self.ctx.lineTo(self.width, self.height);\n                self.ctx.lineTo(self.width, self.lastFrozenRowPixel);\n            }\n            if (mode === 1) {\n                self.ctx.moveTo(0, self.lastFrozenRowPixel);\n                self.ctx.lineTo(0, self.height);\n                self.ctx.lineTo(self.width, self.height);\n                self.ctx.lineTo(self.width, self.lastFrozenRowPixel);\n            }\n            if (mode === 2) {\n                self.ctx.moveTo(self.lastFrozenColumnPixel, 0);\n                self.ctx.lineTo(self.width, 0);\n                self.ctx.lineTo(self.width, self.height);\n                self.ctx.lineTo(self.lastFrozenColumnPixel, self.height);\n            }\n            self.ctx.clip();\n        }\n        function fillHandle(x, y, r) {\n            if (self.style.selectionHandleType === 'circle') {\n                return fillCircle(x, y, r * 0.5);\n            }\n            fillRect(x - r * 0.5, y - r * 0.5, r, r);\n        }\n        function strokeHandle(x, y, r) {\n            if (self.style.selectionHandleType === 'circle') {\n                return strokeCircle(x, y, r * 0.5);\n            }\n            strokeRect(x - r * 0.5, y - r * 0.5, r, r);\n        }\n        function addselectionHandle(c, pos) {\n            var hw = self.style.selectionHandleSize,\n                p = {\n                    tr: function () {\n                        fillHandle(c.x + c.width, c.y, hw);\n                        strokeHandle(c.x + c.width, c.y, hw);\n                    },\n                    br: function () {\n                        fillHandle(c.x + c.width, c.y + c.height, hw);\n                        strokeHandle(c.x + c.width, c.y + c.height, hw);\n                    },\n                    tl: function () {\n                        fillHandle(c.x, c.y, hw);\n                        strokeHandle(c.x, c.y, hw);\n                    },\n                    bl: function () {\n                        fillHandle(c.x, c.y + c.height, hw);\n                        strokeHandle(c.x, c.y + c.height, hw);\n                    }\n                };\n            p[pos]();\n        }\n        function addBorderLine(c, pos) {\n            self.ctx.beginPath();\n            var p = {\n                t: function () {\n                    self.ctx.moveTo(c.x + self.canvasOffsetLeft, c.y + self.canvasOffsetTop);\n                    self.ctx.lineTo(c.x + self.canvasOffsetLeft + c.width, c.y + self.canvasOffsetTop);\n                },\n                r: function () {\n                    self.ctx.moveTo(c.x + self.canvasOffsetLeft + c.width, c.y + self.canvasOffsetTop);\n                    self.ctx.lineTo(c.x + self.canvasOffsetLeft + c.width, c.y + self.canvasOffsetTop + c.height);\n                },\n                b: function () {\n                    self.ctx.moveTo(c.x + self.canvasOffsetLeft, c.y + self.canvasOffsetTop + c.height);\n                    self.ctx.lineTo(c.x + self.canvasOffsetLeft + c.width, c.y + self.canvasOffsetTop + c.height);\n                },\n                l: function () {\n                    self.ctx.moveTo(c.x + self.canvasOffsetLeft, c.y + self.canvasOffsetTop);\n                    self.ctx.lineTo(c.x + self.canvasOffsetLeft, c.y + self.canvasOffsetTop + c.height);\n                }\n            };\n            p[pos]();\n            self.ctx.stroke();\n        }\n        function addEllipsis(text, width) {\n            var c, w = 0;\n            if (self.ellipsisCache[text] && self.ellipsisCache[text][width]) {\n                return self.ellipsisCache[text][width];\n            }\n            //TODO Add ellipsis back when there is a fast way to do it\n            w = self.ctx.measureText(text).width;\n            self.ellipsisCache[text] = self.ellipsisCache[text] || {};\n            c = {value: text, width: w};\n            self.ellipsisCache[text][width] = c;\n            return c;\n        }\n        function wrapText(cell, splitChar) {\n            if (!cell.formattedValue) {\n                return { lines: [{width: 0, value: ''}], width: 0, height: cell.calculatedLineHeight };\n            }\n            var max = 0,\n                n = '\\n',\n                x,\n                word,\n                words = cell.formattedValue.split(splitChar),\n                textHeight = cell.calculatedLineHeight,\n                lines = [],\n                out = [],\n                wrap = self.style.cellWhiteSpace !== 'nowrap',\n                elWidth,\n                et = self.attributes.ellipsisText,\n                elClipLength,\n                plWidth,\n                clippedVal,\n                ogWordWidth,\n                previousLine,\n                line = {\n                    width: 0,\n                    value: ''\n                },\n                cHeight = wrap ? cell.paddedHeight : cell.calculatedLineHeight;\n            lines.push(line);\n            elWidth = self.ctx.measureText(' ' + et).width;\n            for (x = 0; x < words.length; x += 1) {\n                word = words[x];\n                var measure = self.ctx.measureText(word + splitChar);\n                if (line.width + measure.width + elWidth < cell.paddedWidth) {\n                    line.value += word + splitChar;\n                    line.width += measure.width;\n                    continue;\n                }\n                // if there is a hyphenated word that is too long\n                // split it and add the split set to the array\n                // then back up and re-read new split set\n                // this behavior seems right, it might not be\n                if (/\\w-\\w/.test(word) && cell.paddedWidth < measure.width) {\n                    words.splice(x, 1, word.split('-')[0] + '-', word.split('-')[1]);\n                    x -= 1;\n                    continue;\n                }\n                line = {\n                    width: measure.width,\n                    value: word + splitChar\n                };\n                if (x === 0) {\n                    lines = [];\n                    lines.push(line);\n                }\n                textHeight += cell.calculatedLineHeight;\n                if (textHeight > cHeight) {\n                    if (lines.length === 0) { break; }\n                    elClipLength = 1;\n                    previousLine = lines[lines.length - 1];\n                    if (previousLine.width < cell.paddedWidth && words.length === 1) { break; }\n                    clippedVal = previousLine.value + word;\n                    plWidth = self.ctx.measureText(clippedVal + et).width;\n                    var originText = clippedVal;\n                    if (plWidth > cell.paddedWidth) {\n                        var stepLength = parseInt(clippedVal.length / 2);\n                        var direction = -1;\n                        while (stepLength > 0) {\n                            clippedVal = originText.substr(0, stepLength * direction + clippedVal.length);\n                            plWidth = self.ctx.measureText(clippedVal + et).width;\n                            direction = plWidth > cell.paddedWidth ? -1 : 1;\n                            stepLength = parseInt(stepLength / 2);\n                        }\n                    }\n                    clippedVal = clippedVal + (originText.length != clippedVal.length ? et : '');\n                    previousLine.value = clippedVal;\n                    previousLine.width = plWidth;\n                    break;\n                }\n                if (x > 0) {\n                    lines.push(line);\n                }\n            }\n            return {\n                lines: lines,\n                width: max,\n                height: cell.calculatedLineHeight * lines.length\n            }\n        }\n        function drawText(cell) {\n            var ll = cell.text.lines.length,\n                h = (cell.fontHeight * cell.lineHeight),\n                x,\n                line,\n                wrap = self.style.cellWhiteSpace !== 'nowrap',\n                textHeight = 0;\n            for (x = 0; x < cell.text.lines.length; x += 1) {\n                line = cell.text.lines[x];\n                var vPos = Math.max((cell.height - (wrap ? cell.text.height : cell.calculatedLineHeight)) * 0.5, 0) + h,\n                    hPos = cell.paddingLeft + cell.treeArrowWidth + cell.orderByArrowWidth;\n                if (cell.horizontalAlignment === 'right') {\n                    hPos = cell.paddingLeft + cell.paddedWidth - line.width;\n                } else if (cell.horizontalAlignment === 'center') {\n                    hPos = cell.paddingLeft + ((cell.paddedWidth + cell.paddingRight) / 2) - (line.width / 2);\n                }\n                if (cell.verticalAlignment === 'top') {\n                    vPos = cell.calculatedLineHeight;\n                } else if (cell.verticalAlignment === 'bottom') {\n                    vPos = cell.height - cell.paddingBottom - cell.text.height;\n                }\n                line.height = h + cell.lineSpacing;\n                line.offsetLeft = hPos;\n                line.offsetTop = vPos;\n                line.x = cell.x + hPos;\n                line.y = cell.y + textHeight + vPos;\n                textHeight += line.height;\n                fillText(line.value, line.x, line.y);\n            }\n            if (self.attributes.debug && cell.active) {\n                requestAnimationFrame(function () {\n                    self.ctx.font = self.style.debugFont;\n                    self.ctx.fillStyle = self.style.debugColor;\n                    fillText(JSON.stringify({\n                        x: cell.x,\n                        y: cell.y,\n                        h: cell.height,\n                        w: cell.width,\n                        pw: cell.paddedWidth,\n                        idx: cell.columnIndex,\n                        idx_ord: cell.sortColumnIndex\n                    }, null, '\\t'),\n                        cell.x + 14, cell.y + 14);\n                    fillText(JSON.stringify(cell.text.lines.map(function (l) { return {w: l.width, v: l.value.length }; }), null, '\\t'),\n                        cell.x + 14, cell.y + 30);\n                });\n            }\n        }\n        function getFrozenColumnsWidth() {\n            var w = 0,\n                s = self.getSchema(),\n                x = 0,\n                n = Math.min(self.frozenColumn, s.length),\n                column;\n            hiddenFrozenColumnCount = 0;\n            while (x < n) {\n                column = s[x];\n                if (column.hidden) {\n                    hiddenFrozenColumnCount += 1;\n                } else {\n                    w += self.getColummnWidth(x);\n                }\n                x += 1;\n            }\n            return w;\n        }\n        /**\n         * Redraws the grid. No matter what the change, this is the only method required to refresh everything.\n         * @memberof canvasDatagrid\n         * @name draw\n         * @method\n         */\n         // r = literal row index\n         // rd = row data array\n         // i = user order index\n         // o = literal data index\n         // y = y drawing cursor\n         // x = x drawing cursor\n         // s = visible schema array\n         // cx = current x drawing cursor sub calculation var\n         // cy = current y drawing cursor sub calculation var\n         // a = static cell (like corner cell)\n         // p = perf counter\n         // l = data length\n         // u = current cell\n         // h = current height\n         // w = current width\n        self.draw = function (internal) {\n            if (self.dispatchEvent('beforedraw', {})) { return; }\n            if (!self.isChildGrid && (!self.height || !self.width)) {\n                return;\n            }\n            if (self.isChildGrid && internal) {\n                requestAnimationFrame(self.parentGrid.draw);\n                return;\n            }\n            if (self.intf.visible === false) {\n                return;\n            }\n            // initial values\n            var checkScrollHeight, rowHeaderCell, p, cx, cy, treeGrid, rowOpen,\n                rowHeight, cornerCell, y, x, c, h, w, s, r, rd, aCell,\n                data = (self.data || []),\n                bc = self.style.gridBorderCollapse === 'collapse',\n                selectionBorders = [],\n                moveBorders = [],\n                selectionHandles = [],\n                rowHeaders = [],\n                l = data.length,\n                u = self.currentCell || {},\n                columnHeaderCellHeight = self.getColumnHeaderCellHeight(),\n                rowHeaderCellWidth = self.getRowHeaderCellWidth(),\n                cellHeight = self.style.cellHeight;\n            drawCount += 1;\n            p = performance.now();\n            self.visibleRowHeights = [];\n            // if data length has changed, there is no way to know\n            if (data.length > self.orders.rows.length) {\n                self.createRowOrders();\n            }\n            function drawScrollBars() {\n                var drawCorner,\n                    en = self.scrollBox.entities,\n                    m = (self.style.scrollBarBoxMargin * 2);\n                self.ctx.strokeStyle = self.style.scrollBarBorderColor;\n                self.ctx.lineWidth = self.style.scrollBarBorderWidth;\n                en.horizontalBox.x = rowHeaderCellWidth + self.style.scrollBarBoxMargin\n                    + ((en.horizontalBar.width - self.scrollBox.scrollBoxWidth)\n                        * (self.scrollBox.scrollLeft / self.scrollBox.scrollWidth));\n                en.verticalBox.y = columnHeaderCellHeight + self.style.scrollBarBoxMargin\n                    + ((en.verticalBar.height - self.scrollBox.scrollBoxHeight)\n                        * (self.scrollBox.scrollTop / self.scrollBox.scrollHeight));\n                if (self.scrollBox.horizontalBarVisible) {\n                    self.ctx.fillStyle = self.style.scrollBarBackgroundColor;\n                    fillRect(en.horizontalBar.x, en.horizontalBar.y, en.horizontalBar.width + m, en.horizontalBar.height);\n                    strokeRect(en.horizontalBar.x, en.horizontalBar.y, en.horizontalBar.width + m, en.horizontalBar.height);\n                    self.ctx.fillStyle = self.style.scrollBarBoxColor;\n                    if (self.scrollBox.horizontalBoxVisible) {\n                        if (/horizontal/.test(u.context)) {\n                            self.ctx.fillStyle = self.style.scrollBarActiveColor;\n                        }\n                        radiusRect(en.horizontalBox.x, en.horizontalBox.y,\n                            en.horizontalBox.width, en.horizontalBox.height, self.style.scrollBarBoxBorderRadius);\n                        self.ctx.stroke();\n                        self.ctx.fill();\n                    }\n                    drawCorner = true;\n                    self.visibleCells.unshift(en.horizontalBar);\n                    self.visibleCells.unshift(en.horizontalBox);\n                }\n                if (self.scrollBox.verticalBarVisible) {\n                    self.ctx.fillStyle = self.style.scrollBarBackgroundColor;\n                    fillRect(en.verticalBar.x, en.verticalBar.y, en.verticalBar.width, en.verticalBar.height + m);\n                    strokeRect(en.verticalBar.x, en.verticalBar.y, en.verticalBar.width, en.verticalBar.height + m);\n                    if (self.scrollBox.verticalBoxVisible) {\n                        self.ctx.fillStyle = self.style.scrollBarBoxColor;\n                        if (/vertical/.test(u.context)) {\n                            self.ctx.fillStyle = self.style.scrollBarActiveColor;\n                        }\n                        radiusRect(en.verticalBox.x, en.verticalBox.y, en.verticalBox.width,\n                            en.verticalBox.height, self.style.scrollBarBoxBorderRadius);\n                        self.ctx.stroke();\n                        self.ctx.fill();\n                    }\n                    drawCorner = true;\n                    self.visibleCells.unshift(en.verticalBar);\n                    self.visibleCells.unshift(en.verticalBox);\n                }\n                if (drawCorner) {\n                    //corner\n                    self.ctx.strokeStyle = self.style.scrollBarCornerBorderColor;\n                    self.ctx.fillStyle = self.style.scrollBarCornerBackgroundColor;\n                    radiusRect(en.corner.x, en.corner.y, en.corner.width, en.corner.height, 0);\n                    self.ctx.stroke();\n                    self.ctx.fill();\n                    self.visibleCells.unshift(en.corner);\n                }\n            }\n            function createHandlesOverlayArray(cell) {\n                if (self.attributes.allowMovingSelection || self.mobile) {\n                    if (cell.selectionBorderTop && cell.selectionBorderRight && self.mobile) {\n                        selectionHandles.push([cell, 'tr']);\n                        cell.selectionHandle = 'tr';\n                    }\n                    if (cell.selectionBorderTop && cell.selectionBorderLeft && self.mobile) {\n                        selectionHandles.push([cell, 'tl']);\n                        cell.selectionHandle = 'tl';\n                    }\n                    if (cell.selectionBorderBottom && cell.selectionBorderLeft && self.mobile) {\n                        selectionHandles.push([cell, 'bl']);\n                        cell.selectionHandle = 'bl';\n                    }\n                    if (cell.selectionBorderBottom && cell.selectionBorderRight\n                            && (self.attributes.selectionHandleBehavior !== 'none' || self.mobile)) {\n                        selectionHandles.push([cell, 'br']);\n                        cell.selectionHandle = 'br';\n                    }\n                }\n            }\n            function createBorderOverlayArray(cell, drawArray, propPrefix, offsetPoint) {\n                offsetPoint = offsetPoint || {x: 0, y: 0};\n                cell.selectionBorder = '';\n                if (!cell.isRowHeader\n                        && self.selections[cell.rowIndex + -offsetPoint.y]\n                        && self.selections[cell.rowIndex + -offsetPoint.y].indexOf(cell.columnIndex + -offsetPoint.x) !== -1) {\n                    if ((!self.selections[cell.rowIndex - 1 + -offsetPoint.y]\n                            || self.selections[cell.rowIndex - 1 + -offsetPoint.y].indexOf(cell.columnIndex + -offsetPoint.x) === -1\n                            || cell.rowIndex === 0)\n                            && !cell.isHeader) {\n                        drawArray.push([cell, 't']);\n                        cell[propPrefix + 'BorderTop'] = true;\n                        cell[propPrefix + 'Border'] += 't';\n                    }\n                    if (!self.selections[cell.rowIndex + 1 + -offsetPoint.y]\n                            || self.selections[cell.rowIndex + 1 + -offsetPoint.y].indexOf(cell.columnIndex + -offsetPoint.x) === -1) {\n                        drawArray.push([cell, 'b']);\n                        cell[propPrefix + 'BorderBottom'] = true;\n                        cell[propPrefix + 'Border'] += 'b';\n                    }\n                    if (!self.selections[cell.rowIndex + -offsetPoint.y] || cell.columnIndex === 0\n                            || self.selections[cell.rowIndex + -offsetPoint.y].indexOf(cell.columnIndex - 1 + -offsetPoint.x) === -1) {\n                        drawArray.push([cell, 'l']);\n                        cell[propPrefix + 'BorderLeft'] = true;\n                        cell[propPrefix + 'Border'] += 'l';\n                    }\n                    if (!self.selections[cell.rowIndex + -offsetPoint.y] || cell.columnIndex === s.length\n                            || self.selections[cell.rowIndex + -offsetPoint.y].indexOf(cell.columnIndex + 1 + -offsetPoint.x) === -1) {\n                        drawArray.push([cell, 'r']);\n                        cell[propPrefix + 'BorderRight'] = true;\n                        cell[propPrefix + 'Border'] += 'r';\n                    }\n                }\n            }\n            function drawCell(d, rowOrderIndex, rowIndex) {\n                return function drawEach(header, headerIndex, columnOrderIndex) {\n                    if (header.hidden) { return 0; }\n                    var cellStyle = header.style || 'cell',\n                        cellGridAttributes,\n                        cell,\n                        isHeader = /HeaderCell/.test(cellStyle),\n                        isCorner = /cornerCell/.test(cellStyle),\n                        isRowHeader = 'rowHeaderCell' === cellStyle,\n                        isColumnHeader = 'columnHeaderCell' === cellStyle,\n                        selected = self.selections[rowOrderIndex] && self.selections[rowOrderIndex].indexOf(columnOrderIndex) !== -1,\n                        hovered = self.hovers.rowIndex === rowOrderIndex && self.hovers.columnIndex === columnOrderIndex,\n                        active = self.activeCell.rowIndex === rowOrderIndex && self.activeCell.columnIndex === columnOrderIndex,\n                        isColumnHeaderCellCap = cellStyle === 'columnHeaderCellCap',\n                        rawValue = d ? d[header.name] : undefined,\n                        isGrid = header.type === 'canvas-datagrid',\n                        activeHeader = (self.orders.rows[self.activeCell.rowIndex] === rowOrderIndex\n                                || self.orders.columns[self.activeCell.columnIndex] === headerIndex)\n                            && (columnOrderIndex === -1 || rowOrderIndex === -1)\n                            ? (isRowHeader ? 'activeRowHeaderCell' : 'activeColumnHeaderCell') : false,\n                        val,\n                        f = self.formatters[header.type || 'string'],\n                        orderByArrowSize = 0,\n                        treeArrowSize = 0,\n                        cellWidth = self.sizes.columns[headerIndex] || header.width,\n                        ev = {\n                            value: rawValue,\n                            row: d,\n                            header: header\n                        };\n                    if (isColumnHeaderCellCap) {\n                        cellWidth = w - x;\n                    }\n                    // if no data or schema are defined, a width is provided to the stub column\n                    if (cellWidth === undefined) {\n                        cellWidth = self.style.cellWidth;\n                    }\n                    cellWidth = cellWidth * self.scale;\n                    if (x + cellWidth + self.style.cellBorderWidth < 0) {\n                        x += cellWidth + self.style.cellBorderWidth;\n                    }\n                    if (active && cellStyle !== 'cornerCell') {\n                        cellStyle = 'activeCell';\n                    }\n                    if (self.visibleRows.indexOf(rowIndex) === -1 && !isHeader) {\n                        self.visibleRows.push(rowIndex);\n                    }\n                    val = self.dispatchEvent('formatcellvalue', ev);\n                    cx = x;\n                    cy = y;\n                    if (cellStyle === 'cornerCell') {\n                        cx = 0;\n                        cy = 0;\n                    } else if (isRowHeader) {\n                        cx = 0;\n                    } else if (isHeader) {\n                        cy = 0;\n                    }\n                    cell = {\n                        type: isGrid ? 'canvas-datagrid-cell' : header.type,\n                        style: cellStyle,\n                        nodeType: 'canvas-datagrid-cell',\n                        x: cx,\n                        y: cy,\n                        fontHeight: (self.style[cellStyle + 'FontHeight'] || 0) * self.scale,\n                        horizontalAlignment: self.style[cellStyle + 'HorizontalAlignment'],\n                        verticalAlignment: self.style[cellStyle + 'VerticalAlignment'],\n                        paddingLeft: (self.style[cellStyle + 'PaddingLeft'] || 0) * self.scale,\n                        paddingTop: (self.style[cellStyle + 'PaddingTop'] || 0) * self.scale,\n                        paddingRight: (self.style[cellStyle + 'PaddingRight'] || 0) * self.scale,\n                        paddingBottom: (self.style[cellStyle + 'PaddingBottom'] || 0) * self.scale,\n                        whiteSpace: self.style.cellWhiteSpace,\n                        lineHeight: self.style.cellLineHeight,\n                        lineSpacing: self.style.cellLineSpacing,\n                        offsetTop: self.canvasOffsetTop + cy,\n                        offsetLeft: self.canvasOffsetLeft + cx,\n                        scrollTop: self.scrollBox.scrollTop,\n                        scrollLeft: self.scrollBox.scrollLeft,\n                        active: active || activeHeader,\n                        hovered: hovered,\n                        selected: selected,\n                        width: cellWidth,\n                        height: cellHeight,\n                        offsetWidth: cellWidth,\n                        offsetHeight: cellHeight,\n                        parentNode: self.intf.parentNode,\n                        offsetParent: self.intf.parentNode,\n                        data: d,\n                        isCorner: isCorner,\n                        isHeader: isHeader,\n                        isColumnHeader: isColumnHeader,\n                        isColumnHeaderCellCap: isColumnHeaderCellCap,\n                        isRowHeader: isRowHeader,\n                        rowOpen: rowOpen,\n                        header: header,\n                        columnIndex: columnOrderIndex,\n                        rowIndex: rowOrderIndex,\n                        sortColumnIndex: headerIndex,\n                        sortRowIndex: rowIndex,\n                        isGrid: isGrid,\n                        isNormal: !isGrid && !isCorner && !isHeader,\n                        gridId: (self.attributes.name || '') + rowIndex + ':' + headerIndex,\n                        parentGrid: self.intf,\n                        innerHTML: '',\n                        activeHeader: activeHeader,\n                        value: isHeader && !isRowHeader ? (header.title || header.name) : rawValue\n                    };\n                    cell.calculatedLineHeight = (cell.fontHeight * cell.lineHeight) + cell.lineSpacing;\n                    cell.paddedWidth = cell.width - cell.paddingRight - cell.paddingLeft;\n                    cell.paddedHeight = cell.height - cell.paddingTop - cell.paddingBottom;\n                    ev.cell = cell;\n                    cell.userHeight = cell.isHeader ? self.sizes.rows[-1] : rowHeight;\n                    cell.userWidth = cell.isHeader ? self.sizes.columns.cornerCell : self.sizes.columns[headerIndex];\n                    self.visibleCells.unshift(cell);\n                    if (self.dispatchEvent('beforerendercell', ev)) { return; }\n                    self.ctx.fillStyle = self.style[cellStyle + 'BackgroundColor'];\n                    self.ctx.strokeStyle = self.style[cellStyle + 'BorderColor'];\n                    self.ctx.lineWidth = self.style[cellStyle + 'BorderWidth'];\n                    if (hovered) {\n                        self.ctx.fillStyle = self.style[cellStyle + 'HoverBackgroundColor'];\n                        self.ctx.strokeStyle = self.style[cellStyle + 'HoverBorderColor'];\n                    }\n                    if (selected) {\n                        self.ctx.fillStyle = self.style[cellStyle + 'SelectedBackgroundColor'];\n                        self.ctx.strokeStyle = self.style[cellStyle + 'SelectedBorderColor'];\n                    }\n                    if (activeHeader) {\n                        self.ctx.fillStyle = self.style[activeHeader + 'BackgroundColor'];\n                    }\n                    self.dispatchEvent('rendercell', ev);\n                    if (cell.isGrid) {\n                        if (cell.height !== rowHeight) {\n                            cell.height = rowHeight || self.style.cellHeightWithChildGrid;\n                            checkScrollHeight = true;\n                        }\n                        cell.width = self.sizes.columns[headerIndex] || self.style.cellWidthWithChildGrid;\n                    }\n                    if (rowOpen && !cell.isRowHeader) {\n                        cell.height = self.sizes.rows[rowIndex] || self.style.cellHeight;\n                    }\n                    if (!cell.isGrid) {\n                        fillRect(cx, cy, cell.width, cell.height);\n                        strokeRect(cx, cy, cell.width, cell.height);\n                    }\n                    self.ctx.save();\n                    radiusRect(cell.x, cell.y, cell.width, cell.height, 0);\n                    self.ctx.clip();\n                    self.dispatchEvent('afterrendercell', ev);\n                    if (cell.height !== cellHeight && !(rowOpen && !cell.isRowHeader)) {\n                        self.sizes.rows[isHeader ? -1 : rowIndex] = cell.height;\n                        checkScrollHeight = true;\n                    }\n                    if (cell.width !== cellWidth) {\n                        self.sizes.columns[headerIndex] = cell.width;\n                        checkScrollHeight = true;\n                    }\n                    if (isRowHeader && self.attributes.tree) {\n                        if (!self.dispatchEvent('rendertreearrow', ev)) {\n                            treeArrowSize = drawTreeArrow(cell, self.style[cellStyle + 'PaddingLeft'], cy, 0);\n                        }\n                    }\n                    if ((self.attributes.showRowNumbers && isRowHeader)\n                            || !isRowHeader) {\n                        if (cell.isGrid && !self.dispatchEvent('beforerendercellgrid', ev)) {\n                            if (!self.childGrids[cell.gridId]) {\n                                // HACK: this only allows setting of the child grids styles if data is set _after_\n                                // this is less than desirable.  An interface needs to be made to effect the\n                                // style of all cell grids.  One for individual grids already exists.\n                                cellGridAttributes = self.cellGridAttributes;\n                                cellGridAttributes.name = self.attributes.saveAppearance ? cell.gridId : undefined;\n                                cellGridAttributes.component = false;\n                                cellGridAttributes.parentNode = cell;\n                                cellGridAttributes.data = rawValue;\n                                ev.cellGridAttributes = cellGridAttributes;\n                                if (self.dispatchEvent('beforecreatecellgrid', ev)) { return; }\n                                self.childGrids[cell.gridId] = self.createGrid(cellGridAttributes);\n                                self.sizes.rows[rowIndex]\n                                    = self.sizes.rows[rowIndex] || self.style.cellGridHeight;\n                                checkScrollHeight = true;\n                            }\n                            cell.grid = self.childGrids[cell.gridId];\n                            cell.grid.parentNode = cell;\n                            cell.grid.visible = true;\n                            cell.grid.draw();\n                            self.dispatchEvent('rendercellgrid', ev);\n                        } else if (!cell.isGrid) {\n                            if (self.childGrids[cell.gridId]) {\n                                self.childGrids[cell.gridId].parentNode.offsetHeight = 0;\n                            }\n                            if (isHeader && self.orderBy === header.name) {\n                                if (!self.dispatchEvent('renderorderbyarrow', ev)) {\n                                    orderByArrowSize = drawOrderByArrow(cx + self.style[cellStyle + 'PaddingLeft'], 0);\n                                }\n                            }\n                            self.ctx.fillStyle = self.style[cellStyle + 'Color'];\n                            if (hovered) {\n                                self.ctx.fillStyle = self.style[cellStyle + 'HoverColor'];\n                            }\n                            if (selected) {\n                                self.ctx.fillStyle = self.style[cellStyle + 'SelectedColor'];\n                            }\n                            if (activeHeader) {\n                                self.ctx.fillStyle = self.style[activeHeader + 'Color'];\n                            }\n                            cell.treeArrowWidth = treeArrowSize;\n                            cell.orderByArrowWidth = orderByArrowSize;\n                            // create text ref to see if height needs to expand\n                            val = val !== undefined ? val : f\n                                ? f(ev) : '';\n                            if (val === undefined && !f) {\n                                val = '';\n                                console.warn('canvas-datagrid: Unknown format '\n                                    + header.type + ' add a cellFormater');\n                            }\n                            cell.formattedValue = ((val !== undefined && val !== null) ? val : '').toString();\n                            if (self.columnFilters && self.columnFilters[val] !== undefined && isHeader) {\n                                cell.formattedValue = self.attributes.filterTextPrefix + val;\n                            }\n                            self.ctx.font = (self.style[cellStyle + 'FontHeight'] * self.scale) + 'px ' + self.style[cellStyle + 'FontName'];\n                            if (!self.dispatchEvent('formattext', ev)) {\n                                cell.text = wrapText(cell, ' ');\n                            }\n                            if (!self.dispatchEvent('rendertext', ev)) {\n                                if (cell.innerHTML || header.type === 'html') {\n                                    drawHtml(cell);\n                                } else {\n                                    drawText(cell);\n                                }\n                            }\n                        }\n                    }\n                    if (active) {\n                        aCell = cell;\n                    }\n                    createBorderOverlayArray(cell, selectionBorders, 'selection');\n                    // createBorderOverlayArray calculates data for createHandlesOverlayArray so it must go 2nd\n                    createHandlesOverlayArray(cell);\n                    if (self.movingSelection) {\n                        createBorderOverlayArray(cell, moveBorders, 'move', self.moveOffset);\n                    }\n                    self.ctx.restore();\n                    x += cell.width + (bc ? 0 : self.style.cellBorderWidth);\n                    return cell.width;\n                };\n            }\n            function drawRowHeader(rowData, index, rowOrderIndex) {\n                var a, i;\n                if (self.attributes.showRowHeaders) {\n                    x = 0;\n                    i = index + 1;\n                    rowHeaderCell = {'rowHeaderCell': i };\n                    a = {\n                        name: 'rowHeaderCell',\n                        width: self.sizes.columns[-1] || self.style.rowHeaderCellWidth,\n                        style: 'rowHeaderCell',\n                        type: 'string',\n                        data: i,\n                        index: -1\n                    };\n                    rowOpen = self.openChildren[index];\n                    drawCell(rowHeaderCell, index, rowOrderIndex)(a, -1, -1);\n                }\n            }\n            function drawHeaders() {\n                var d, g = s.length, i, o, columnHeaderCell, header, nonFrozenHeaderWidth;\n                function drawHeaderColumnRange(start, end) {\n                    end = Math.min(end, g);\n                    for (o = start; o < end; o += 1) {\n                        i = self.orders.columns[o];\n                        header = s[i];\n                        if (!header.hidden) {\n                            d = {\n                                title: header.title,\n                                name: header.name,\n                                width: header.width || self.style.cellWidth,\n                                style: 'columnHeaderCell',\n                                type: 'string',\n                                index: o,\n                                order: i\n                            };\n                            columnHeaderCell = {'columnHeaderCell': header.title || header.name};\n                            x += drawCell(columnHeaderCell, -1, -1)(d, i, o);\n                            if (x > self.width + self.scrollBox.scrollLeft) {\n                                break;\n                            }\n                        }\n                    }\n                }\n                rowHeaders.forEach(function (rArgs, rhIndex) {\n                    y = rArgs[3];\n                    cellHeight = rArgs[4];\n                    if (rhIndex === self.frozenRow) {\n                        self.ctx.save();\n                        radiusRect(0, self.lastFrozenRowPixel, self.width, self.height - self.lastFrozenRowPixel, 0);\n                        self.ctx.clip();\n                    }\n                    drawRowHeader(rArgs[0], rArgs[1], rArgs[2]);\n                });\n                self.ctx.restore();\n                if (self.attributes.showColumnHeaders) {\n                    x = -self.scrollBox.scrollLeft + self.scrollPixelLeft + self.style.columnHeaderCellBorderWidth;\n                    if (self.attributes.showRowHeaders) {\n                        x += rowHeaderCellWidth;\n                    }\n                    y = 0;\n                    // cell height might have changed during drawing\n                    cellHeight = self.getColumnHeaderCellHeight();\n                    drawHeaderColumnRange(self.scrollIndexLeft, g);\n                    nonFrozenHeaderWidth = x;\n                    x = self.style.columnHeaderCellBorderWidth;\n                    if (self.attributes.showRowHeaders) {\n                        x += rowHeaderCellWidth;\n                    }\n                    drawHeaderColumnRange(0, self.frozenColumn);\n                    // fill in the space right of the headers\n                    x = nonFrozenHeaderWidth;\n                    if (x < w) {\n                        c = {\n                            name: '',\n                            width: self.style.scrollBarWidth,\n                            style: 'columnHeaderCellCap',\n                            isColumnHeaderCell: true,\n                            isColumnHeaderCellCap: true,\n                            type: 'string',\n                            index: s.length\n                        };\n                        drawCell({endCap: ''}, -1, -1)(c, -1, -1);\n                    }\n                    // fill in the space right of the headers\n                    if (self.attributes.showRowHeaders) {\n                        cornerCell = {'cornerCell': '' };\n                        x = 0;\n                        c = {\n                            name: 'cornerCell',\n                            width: self.style.rowHeaderCellWidth,\n                            style: 'cornerCell',\n                            type: 'string',\n                            index: -1\n                        };\n                        drawCell(cornerCell, -1, -1)(c, -1, -1);\n                    }\n                }\n            }\n            function drawRow(r, d) {\n                var i, treeHeight, rowSansTreeHeight, o, g = s.length;\n                if (y - (cellHeight * 2) > h) {\n                    return false;\n                }\n                rd = data[r];\n                rowOpen = self.openChildren[r];\n                rowSansTreeHeight = (self.sizes.rows[r] || self.style.cellHeight) * self.scale;\n                treeHeight = (rowOpen ? self.sizes.trees[r] : 0) * self.scale;\n                rowHeight = (rowSansTreeHeight + treeHeight);\n                if (y < -rowHeight) {\n                    return false;\n                }\n                if (self.attributes.showRowHeaders) {\n                    x += rowHeaderCellWidth;\n                }\n                cellHeight = rowHeight;\n                //draw normal columns\n                for (o = (self.scrollIndexLeft); o < g; o += 1) {\n                    i = self.orders.columns[o];\n                    x += drawCell(rd, r, d)(s[i], i, o);\n                    if (x > self.width) {\n                        self.scrollIndexRight = o;\n                        self.scrollPixelRight = x;\n                        break;\n                    }\n                }\n                //draw frozen columns\n                x = 0;\n                if (self.attributes.showRowHeaders) {\n                    x += rowHeaderCellWidth;\n                }\n                for (o = 0; o < self.frozenColumn; o += 1) {\n                    i = self.orders.columns[o];\n                    x += drawCell(rd, r, d)(s[i], i, o);\n                    if (x > self.width) {\n                        break;\n                    }\n                }\n                self.lastFrozenColumnPixel = x;\n                // cell height might have changed during drawing\n                cellHeight = rowHeight;\n                x = -self.scrollBox.scrollLeft + self.scrollPixelLeft + self.style.cellBorderWidth;\n                // don't draw a tree for the new row\n                treeGrid = self.childGrids[r];\n                if (r !== data.length && rowOpen) {\n                    treeGrid.visible = true;\n                    treeGrid.parentNode = {\n                        offsetTop: y + rowSansTreeHeight + self.canvasOffsetTop,\n                        offsetLeft: rowHeaderCellWidth - 1 + self.canvasOffsetLeft,\n                        offsetHeight: treeHeight,\n                        offsetWidth: self.width - rowHeaderCellWidth - self.style.scrollBarWidth - 1,\n                        offsetParent: self.intf.parentNode,\n                        parentNode: self.intf.parentNode,\n                        style: self.style,\n                        nodeType: 'canvas-datagrid-tree',\n                        scrollTop: self.scrollBox.scrollTop,\n                        scrollLeft: self.scrollBox.scrollLeft,\n                        rowIndex: r\n                    };\n                    self.visibleCells.unshift({\n                        rowIndex: r,\n                        columnIndex: 0,\n                        y: treeGrid.parentNode.offsetTop,\n                        x: treeGrid.parentNode.offsetLeft,\n                        height: treeGrid.height,\n                        width: treeGrid.width,\n                        style: 'tree-grid',\n                        type: treeGrid.parentNode.nodeType\n                    });\n                    treeGrid.draw();\n                } else if (treeGrid) {\n                    treeGrid.parentNode.offsetHeight = 0;\n                    delete self.sizes.trees[r];\n                }\n                rowHeaders.push([rd, r, d, y, rowHeight]);\n                self.visibleRowHeights[r] = rowHeight;\n                y += cellHeight + (bc ? 0 : self.style.cellBorderWidth);\n                return true;\n            }\n            function initDraw() {\n                self.visibleRows = [];\n                s = self.getSchema();\n                self.visibleCells = [];\n                self.canvasOffsetTop = self.isChildGrid ? self.parentNode.offsetTop : 0;\n                self.canvasOffsetLeft = self.isChildGrid ? self.parentNode.offsetLeft : 0;\n                h = self.height;\n                w = self.width;\n            }\n            function drawBackground() {\n                radiusRect(0, 0, w, h, 0);\n                self.ctx.clip();\n                self.ctx.fillStyle = self.style.gridBackgroundColor;\n                fillRect(0, 0, w, h);\n            }\n            function drawFrozenRows() {\n                var n, ln = Math.min(data.length, self.frozenRow);\n                x = -self.scrollBox.scrollLeft + self.scrollPixelLeft + self.style.cellBorderWidth;\n                y = columnHeaderCellHeight;\n                for (r = 0; r < ln; r += 1) {\n                    n = self.orders.rows[r];\n                    if (!drawRow(n, r)) {\n                        break;\n                    }\n                }\n                if (self.attributes.allowFreezingRows) {\n                    // HACK great, another stupid magic number.\n                    // Background will appear as a 0.5px artifact behind the row freeze bar without this hack\n                    y += self.style.frozenMarkerBorderWidth + self.style.frozenMarkerWidth - 0.4999999999;\n                }\n                self.lastFrozenRowPixel = y;\n            }\n            function drawRows() {\n                self.ctx.save();\n                if (self.frozenRow > 0) {\n                    radiusRect(0, self.lastFrozenRowPixel, self.width, self.height - self.lastFrozenRowPixel, 0);\n                    self.ctx.clip();\n                }\n                var o, n, i, g = s.length;\n                x = -self.scrollBox.scrollLeft + self.scrollPixelLeft + self.style.cellBorderWidth;\n                if (!self.attributes.snapToRow) {\n                    y += -self.scrollBox.scrollTop + self.scrollPixelTop + self.style.cellBorderWidth;\n                }\n                for (r = self.frozenRow + self.scrollIndexTop; r < l; r += 1) {\n                    n = self.orders.rows[r];\n                    self.scrollIndexBottom = r;\n                    self.scrollPixelBottom = y;\n                    if (!drawRow(n, r)) {\n                        break;\n                    }\n                }\n                if (self.attributes.showNewRow) {\n                    if (self.attributes.showRowHeaders) {\n                        x += rowHeaderCellWidth;\n                    }\n                    rowHeight = cellHeight = self.style.cellHeight;\n                    rowOpen = false;\n                    for (o = self.scrollIndexLeft; o < g; o += 1) {\n                        i = self.orders.columns[o];\n                        x += drawCell(self.newRow, data.length, data.length)(s[i], i, o);\n                        if (x > self.width + self.scrollBox.scrollLeft) {\n                            break;\n                        }\n                    }\n                    rowHeaders.push([self.newRow, data.length, data.length, y, rowHeight]);\n                }\n                self.ctx.restore();\n            }\n            function drawMoveMarkers() {\n                if (!self.movingSelection) { return; }\n                self.ctx.lineWidth = self.style.moveOverlayBorderWidth;\n                self.ctx.strokeStyle = self.style.moveOverlayBorderColor;\n                self.ctx.setLineDash(self.style.moveOverlayBorderSegments);\n                moveBorders.forEach(function (c) {\n                    addBorderLine(c[0], c[1]);\n                });\n                self.ctx.setLineDash([]);\n            }\n            function drawReorderMarkers() {\n                if (!self.reorderObject) { return; }\n                var b = {\n                        height: self.reorderObject.height,\n                        width: self.reorderObject.width,\n                        x: self.reorderObject.x + self.reorderObject.dragOffset.x,\n                        y: self.reorderObject.y + self.reorderObject.dragOffset.y\n                    },\n                    m = {\n                        width: w,\n                        height: h,\n                        x: 0,\n                        y: 0\n                    };\n                self.ctx.fillStyle = self.style.reorderMarkerBackgroundColor;\n                self.ctx.lineWidth = self.style.reorderMarkerBorderWidth;\n                self.ctx.strokeStyle = self.style.reorderMarkerBorderColor;\n                if (self.dragMode === 'row-reorder') {\n                    b.width = w;\n                    b.x = 0;\n                    m.width = w;\n                    m.height = self.currentCell.height;\n                    m.y = self.currentCell.y;\n                    fillRect(b.x, b.y, b.width, b.height);\n                    strokeRect(b.x, b.y, b.width, b.height);\n                    self.ctx.lineWidth = self.style.reorderMarkerIndexBorderWidth;\n                    self.ctx.strokeStyle = self.style.reorderMarkerIndexBorderColor;\n                    if (self.currentCell.rowIndex !== self.reorderObject.rowIndex\n                            && self.currentCell.rowIndex > -1\n                            && self.currentCell.rowIndex < l) {\n                        addBorderLine(m, self.reorderTarget.sortRowIndex > self.reorderObject.sortRowIndex ? 'b' : 't');\n                    }\n                } else if (self.dragMode === 'column-reorder' && self.reorderObject) {\n                    b.height = h;\n                    b.y = 0;\n                    m.height = h;\n                    m.width = self.currentCell.width;\n                    m.y = 0;\n                    m.x = self.currentCell.x;\n                    fillRect(b.x, b.y, b.width, b.height);\n                    strokeRect(b.x, b.y, b.width, b.height);\n                    self.ctx.lineWidth = self.style.reorderMarkerIndexBorderWidth;\n                    self.ctx.strokeStyle = self.style.reorderMarkerIndexBorderColor;\n                    if (self.currentCell.sortColumnIndex !== self.reorderObject.sortColumnIndex\n                            && self.currentCell.sortColumnIndex > -1\n                            && self.currentCell.sortColumnIndex < s.length) {\n                        addBorderLine(m, self.reorderTarget.columnIndex > self.reorderObject.columnIndex ? 'r' : 'l');\n                    }\n                }\n            }\n            function drawBorder() {\n                self.ctx.lineWidth = self.style.gridBorderWidth;\n                self.ctx.strokeStyle = self.style.gridBorderColor;\n                strokeRect(0, 0, self.width, self.height);\n            }\n            function drawSelectionBorders() {\n                self.ctx.lineWidth = self.style.selectionOverlayBorderWidth;\n                self.ctx.strokeStyle = self.style.selectionOverlayBorderColor;\n                function dsb(c) {\n                    addBorderLine(c[0], c[1]);\n                }\n                selectionBorders.filter(function (c) {\n                    return c[0].rowIndex < self.frozenRow && c[0].columnIndex < self.frozenColumn;\n                }).forEach(dsb);\n                self.ctx.save();\n                clipFrozenArea(0);\n                selectionBorders.filter(function (c) {\n                    return c[0].rowIndex >= self.frozenRow && c[0].columnIndex >= self.frozenColumn;\n                }).forEach(dsb);\n                self.ctx.restore();\n                self.ctx.save();\n                clipFrozenArea(1);\n                selectionBorders.filter(function (c) {\n                    return c[0].rowIndex >= self.frozenRow && c[0].columnIndex < self.frozenColumn;\n                }).forEach(dsb);\n                self.ctx.restore();\n                self.ctx.save();\n                clipFrozenArea(2);\n                selectionBorders.filter(function (c) {\n                    return c[0].rowIndex < self.frozenRow && c[0].columnIndex >= self.frozenColumn;\n                }).forEach(dsb);\n                self.ctx.restore();\n            }\n            function drawSelectionHandles() {\n                if (self.mobile || self.attributes.allowMovingSelection) {\n                    self.ctx.lineWidth = self.style.selectionHandleBorderWidth;\n                    self.ctx.strokeStyle = self.style.selectionHandleBorderColor;\n                    self.ctx.fillStyle = self.style.selectionHandleColor;\n                    selectionHandles.forEach(function (c) {\n                        addselectionHandle(c[0], c[1]);\n                        var az = self.attributes.touchSelectHandleZone / 2,\n                            ax = c[0].x + (c[1] === 'tl' || c[1] === 'bl' ? 0 : c[0].width) - az,\n                            ay = c[0].y + (c[1] === 'bl' || c[1] === 'br' ? c[0].height : 0) - az;\n                        self.visibleCells.unshift({\n                            x: ax,\n                            y: ay,\n                            height: self.style.selectionHandleSize + az,\n                            width: self.style.selectionHandleSize + az,\n                            style: 'selection-handle-' + c[1]\n                        });\n                    });\n                }\n            }\n            function drawActiveCell() {\n                if (!aCell) { return; }\n                self.ctx.save();\n                var cl = self.activeCell.columnIndex + 1 > self.frozenColumn || self.activeCell.rowIndex + 1 > self.frozenRow,\n                    acx = cl ? self.lastFrozenColumnPixel : 0,\n                    acy = cl ? self.lastFrozenRowPixel : 0,\n                    acw = cl ? self.width - self.lastFrozenColumnPixel : self.width,\n                    ach = cl ? self.height - self.lastFrozenRowPixel : self.height;\n                radiusRect(acx, acy, acw, ach, 0);\n                self.ctx.clip();\n                if (self.attributes.selectionMode === 'row') {\n                    if (self.activeCell && self.activeCell.rowIndex === aCell.rowIndex) {\n                        self.ctx.lineWidth = self.style.activeCellOverlayBorderWidth;\n                        self.ctx.strokeStyle = self.style.activeCellOverlayBorderColor;\n                        strokeRect(0, aCell.y, self.getHeaderWidth() + rowHeaderCellWidth, self.visibleRowHeights[aCell.rowIndex]);\n                    }\n                } else {\n                    self.ctx.lineWidth = self.style.activeCellOverlayBorderWidth;\n                    self.ctx.strokeStyle = self.style.activeCellOverlayBorderColor;\n                    strokeRect(aCell.x, aCell.y, aCell.width, aCell.height);\n                }\n                self.ctx.restore();\n            }\n            function drawFrozenMarkers() {\n                var my = self.lastFrozenRowPixel - self.style.frozenMarkerWidth,\n                    mx = self.lastFrozenColumnPixel - self.style.frozenMarkerBorderWidth,\n                    xHover = self.currentCell && self.currentCell.style === 'frozen-row-marker',\n                    yHover = self.currentCell && self.currentCell.style === 'frozen-column-marker';\n                self.ctx.lineWidth = self.style.frozenMarkerBorderWidth;\n                if (self.attributes.allowFreezingColumns) {\n                    self.ctx.fillStyle = yHover ? self.style.frozenMarkerHoverColor : self.style.frozenMarkerColor;\n                    self.ctx.strokeStyle = yHover ? self.style.frozenMarkerHoverBorderColor : self.style.frozenMarkerBorderColor;\n                    fillRect(mx, 0, self.style.frozenMarkerWidth, self.height);\n                    strokeRect(mx, 0, self.style.frozenMarkerWidth, self.height);\n                    self.visibleCells.unshift({\n                        x: mx,\n                        y: 0,\n                        height: self.height,\n                        width: self.style.frozenMarkerWidth + self.style.frozenMarkerBorderWidth,\n                        style: 'frozen-column-marker'\n                    });\n                }\n                if (self.attributes.allowFreezingRows) {\n                    self.ctx.fillStyle = xHover ? self.style.frozenMarkerHoverColor : self.style.frozenMarkerColor;\n                    self.ctx.strokeStyle = xHover ? self.style.frozenMarkerHoverBorderColor : self.style.frozenMarkerBorderColor;\n                    fillRect(0, my, self.width, self.style.frozenMarkerWidth);\n                    strokeRect(0, my, self.width, self.style.frozenMarkerWidth);\n                    self.visibleCells.unshift({\n                        x: 0,\n                        y: my,\n                        height: self.style.frozenMarkerWidth + self.style.frozenMarkerBorderWidth,\n                        width: self.width,\n                        style: 'frozen-row-marker'\n                    });\n                }\n                if (self.freezeMarkerPosition) {\n                    self.ctx.fillStyle = self.style.frozenMarkerActiveColor;\n                    self.ctx.strokeStyle = self.style.frozenMarkerActiveBorderColor;\n                    if (self.dragMode === 'frozen-column-marker') {\n                        fillRect(self.freezeMarkerPosition.x, 0, self.style.frozenMarkerWidth, self.height);\n                        strokeRect(self.freezeMarkerPosition.x, 0, self.style.frozenMarkerWidth, self.height);\n                    } else {\n                        fillRect(0, self.freezeMarkerPosition.y, self.width, self.style.frozenMarkerWidth);\n                        strokeRect(0, self.freezeMarkerPosition.y, self.width, self.style.frozenMarkerWidth);\n                    }\n                }\n            }\n            function drawPerfLines() {\n                if (!self.attributes.showPerformance) { return; }\n                var pw = 250,\n                    px = self.width - pw - self.style.scrollBarWidth - (self.style.scrollBarBorderWidth * 2),\n                    py = columnHeaderCellHeight,\n                    ph = 100;\n                if (scrollDebugCounters.length === 0) { scrollDebugCounters = fillArray(0, perfWindowSize, 1, function () { return [0, 0]; }); }\n                if (touchPPSCounters.length === 0) { touchPPSCounters = fillArray(0, perfWindowSize, 1, function () { return [0, 0]; }); }\n                if (entityCount.length === 0) { entityCount = fillArray(0, perfWindowSize, 1, 0); }\n                self.ctx.lineWidth = 0.5;\n                function dpl(name, perfArr, arrIndex, max, color, useAbs, rowIndex) {\n                    var v;\n                    drawPerfLine(pw, ph, px, py, perfArr, arrIndex, max, color, useAbs);\n                    self.ctx.fillStyle = color;\n                    fillRect(3 + px, py + 9 + (rowIndex * 11), 8, 8);\n                    self.ctx.fillStyle = self.style.debugPerfChartTextColor;\n                    v = arrIndex !== undefined ? perfArr[0][arrIndex] : perfArr[0];\n                    fillText(name + ' ' + (isNaN(v) ? 0 : v).toFixed(3), 14 + px, py + 16 + (rowIndex * 11));\n                }\n                self.ctx.textAlign = 'left';\n                self.ctx.font = self.style.debugFont;\n                self.ctx.fillStyle = self.style.debugPerfChartBackground;\n                fillRect(px, py, pw, ph);\n                [['Scroll Height', scrollDebugCounters, 0, self.scrollBox.scrollHeight, self.style.debugScrollHeightColor, false],\n                    ['Scroll Width', scrollDebugCounters, 1, self.scrollBox.scrollWidth, self.style.debugScrollWidthColor, false],\n                    ['Performance', perfCounters, undefined, 200, self.style.debugPerformanceColor, false],\n                    ['Entities', entityCount, undefined, 1500, self.style.debugEntitiesColor, false],\n                    ['TouchPPSX', touchPPSCounters, 0, 1000, self.style.debugTouchPPSXColor, true],\n                    ['TouchPPSY', touchPPSCounters, 1, 1000, self.style.debugTouchPPSYColor, true]\n                    ].forEach(function (i, index) {\n                    i.push(index);\n                    dpl.apply(null, i);\n                });\n                self.ctx.fillStyle = self.style.debugPerfChartBackground;\n                entityCount.pop();\n                entityCount.unshift(self.visibleCells.length);\n                scrollDebugCounters.pop();\n                scrollDebugCounters.unshift([self.scrollBox.scrollTop, self.scrollBox.scrollLeft]);\n                touchPPSCounters.pop();\n                touchPPSCounters.unshift([self.yPPS, self.xPPS]);\n            }\n            function drawDebug() {\n                self.ctx.save();\n                var d;\n                if (self.attributes.showPerformance || self.attributes.debug) {\n                    if (perfCounters.length === 0) { perfCounters = fillArray(0, perfWindowSize, 1, 0); }\n                    perfCounters.pop();\n                    perfCounters.unshift(performance.now() - p);\n                }\n                if (!self.attributes.debug) {\n                    self.ctx.restore();\n                    return;\n                }\n                self.ctx.font = self.style.debugFont;\n                d = {};\n                d.perf = (perfCounters.reduce(function (a, b) {\n                    return a + b;\n                }, 0) / Math.min(drawCount, perfCounters.length)).toFixed(1);\n                d.perfDelta = perfCounters[0].toFixed(1);\n                d.frozenColumnsWidth = getFrozenColumnsWidth();\n                d.htmlImages = Object.keys(self.htmlImageCache).length;\n                d.reorderObject = 'x: ' + (self.reorderObject || {columnIndex: 0}).columnIndex + ', y: ' + (self.reorderObject || {rowIndex: 0}).rowIndex;\n                d.reorderTarget = 'x: ' + (self.reorderTarget || {columnIndex: 0}).columnIndex + ', y: ' + (self.reorderTarget || {rowIndex: 0}).rowIndex;\n                d.scale = self.scale;\n                d.startScale = self.startScale;\n                d.scaleDelta = self.scaleDelta;\n                d.zoomDeltaStart = self.zoomDeltaStart;\n                d.touchLength = self.touchLength;\n                d.touches = 'y0: ' + (self.touchPosition || {y: 0}).y + ' y1: ' + (self.touchPosition1 || {y: 0}).y;\n                d.scrollBox = self.scrollBox.toString();\n                d.scrollIndex = 'x: ' + self.scrollIndexLeft + ', y: ' + self.scrollIndexTop;\n                d.scrollPixel = 'x: ' + self.scrollPixelLeft + ', y: ' + self.scrollPixelTop;\n                d.canvasOffset = 'x: ' + self.canvasOffsetLeft + ', y: ' + self.canvasOffsetTop;\n                d.touchDelta = 'x: ' + self.touchDelta.x + ', y: ' + self.touchDelta.y;\n                d.touchAnimateTo = 'x: ' + self.touchAnimateTo.x + ', y: ' + self.touchAnimateTo.y;\n                d.scrollAnimation = 'x: ' + self.scrollAnimation.x + ', y: ' + self.scrollAnimation.y;\n                d.touchPPS = 'x: ' + self.xPPS + ', y: ' + self.yPPS;\n                d.touchPPST = 'x: ' + self.xPPST + ', y: ' + self.yPPST;\n                d.touchDuration = self.touchDuration;\n                d.pointerLockPosition =  self.pointerLockPosition ?\n                        self.pointerLockPosition.x + ', ' + self.pointerLockPosition.y : '';\n                d.size = 'w: ' + self.width + ', h: ' + self.height;\n                d.mouse = 'x: ' + self.mouse.x + ', y: ' + self.mouse.y;\n                d.touch = !self.touchStart\n                    ? '' : 'x: ' + self.touchStart.x + ', y: ' + self.touchStart.y;\n                d.entities = self.visibleCells.length;\n                d.hasFocus = self.hasFocus;\n                d.dragMode = self.dragMode;\n                if (self.currentCell) {\n                    d.columnIndex = self.currentCell.columnIndex;\n                    d.rowIndex = self.currentCell.rowIndex;\n                    d.sortColumnIndex = self.currentCell.sortColumnIndex;\n                    d.sortRowIndex = self.currentCell.sortRowIndex;\n                    d.context = self.currentCell.context;\n                    d.dragContext = self.currentCell.dragContext;\n                    d.style = self.currentCell.style;\n                    d.type = self.currentCell.type;\n                }\n                self.ctx.textAlign = 'right';\n                self.ctx.fillStyle = self.style.debugBackgroundColor;\n                fillRect(0, 0, self.width, self.height);\n                Object.keys(d).forEach(function (key, index) {\n                    var m = key + ': ' + d[key],\n                        lh = 14;\n                    self.ctx.fillStyle = self.style.debugColor;\n                    fillText(m, w - 20, (self.attributes.showPerformance ? 140 : 24) + (index * lh));\n                });\n                self.ctx.restore();\n            }\n            self.ctx.save();\n            initDraw();\n            drawBackground();\n            drawFrozenRows();\n            drawRows();\n            drawActiveCell();\n            drawHeaders();\n            drawFrozenMarkers();\n            drawSelectionHandles();\n            drawReorderMarkers();\n            drawMoveMarkers();\n            drawBorder();\n            drawSelectionBorders();\n            drawScrollBars();\n            if (checkScrollHeight) {\n                self.resize(true);\n            }\n            drawDebug();\n            drawPerfLines();\n            if (self.dispatchEvent('afterdraw', {})) { return; }\n            self.ctx.restore();\n        };\n    };\n});\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./lib/draw.js\n// module id = 3\n// module chunks = 0","/*jslint browser: true, unparam: true, todo: true, plusplus: true*/\n/*globals define: true, MutationObserver: false, requestAnimationFrame: false, performance: false, btoa: false*/\ndefine([], function () {\n    'use strict';\n    return function (self) {\n        var wheeling;\n        self.stopPropagation = function (e) { e.stopPropagation(); };\n        /**\n         * Adds an event listener to the given event.\n         * @memberof canvasDatagrid\n         * @name addEventListener\n         * @method\n         * @param {string} ev The name of the event to subscribe to.\n         * @param {function} fn The event procedure to execute when the event is raised.\n         */\n        self.addEventListener = function (ev, fn) {\n            self.events[ev] = self.events[ev] || [];\n            self.events[ev].unshift(fn);\n        };\n        /**\n         * Removes the given listener function from the given event.  Must be an actual reference to the function that was bound.\n         * @memberof canvasDatagrid\n         * @name removeEventListener\n         * @method\n         * @param {string} ev The name of the event to unsubscribe from.\n         * @param {function} fn The event procedure to execute when the event is raised.\n         */\n        self.removeEventListener = function (ev, fn) {\n            (self.events[ev] || []).forEach(function removeEachListener(sfn, idx) {\n                if (fn === sfn) {\n                    self.events[ev].splice(idx, 1);\n                }\n            });\n        };\n        /**\n         * Fires the given event, padding an event object to the event subscribers.\n         * @memberof canvasDatagrid\n         * @name dispatchEvent\n         * @method\n         * @param {number} ev The name of the event to dispatch.\n         * @param {number} e The event object.\n         */\n        self.dispatchEvent = function (ev, e) {\n            e = ev.type ? ev : (e || {});\n            ev = ev.type || ev;\n            var defaultPrevented;\n            function preventDefault() {\n                defaultPrevented = true;\n            }\n            if (!self.events[ev]) { return; }\n            self.events[ev].forEach(function dispatchEachEvent(fn) {\n                e.ctx = self.ctx;\n                e.preventDefault = preventDefault;\n                fn.apply(self.intf, [e]);\n            });\n            return defaultPrevented;\n        };\n        self.getRatio = function () {\n            return Math.min(self.attributes.maxPixelRatio, (window.devicePixelRatio || 1) /\n                (self.ctx.webkitBackingStorePixelRatio ||\n                    self.ctx.mozBackingStorePixelRatio ||\n                    self.ctx.msBackingStorePixelRatio ||\n                    self.ctx.oBackingStorePixelRatio ||\n                    self.ctx.backingStorePixelRatio || 1));\n        };\n        self.resize = function (drawAfterResize) {\n            if (!self.canvas) { return; }\n            var x,\n                v = {\n                    x: 0,\n                    y: 0,\n                    height: 0,\n                    width: 0,\n                    style: 'vertical-scroll-bar'\n                },\n                n = {\n                    x: 0,\n                    y: 0,\n                    height: 0,\n                    width: 0,\n                    style: 'horizontal-scroll-bar'\n                },\n                vb = {\n                    x: 0,\n                    y: 0,\n                    height: 0,\n                    width: 0,\n                    style: 'vertical-scroll-box'\n                },\n                nb = {\n                    x: 0,\n                    y: 0,\n                    height: 0,\n                    width: 0,\n                    style: 'horizontal-scroll-box'\n                },\n                co = {\n                    x: 0,\n                    y: 0,\n                    height: 0,\n                    width: 0,\n                    isCorner: true,\n                    isScrollBoxCorner: true,\n                    style: 'scroll-box-corner'\n                },\n                m = (self.style.scrollBarBoxMargin * 2),\n                b = (self.style.scrollBarBorderWidth * 2),\n                d = self.style.scrollBarBoxMargin * 0.5,\n                sbw = self.style.scrollBarWidth + (self.style.scrollBarBorderWidth * 2),\n                ratio = self.getRatio(),\n                bm = self.style.gridBorderCollapse === 'collapse' ? 1 : 2,\n                cellBorder = self.style.cellBorderWidth * bm,\n                columnHeaderCellBorder = self.style.columnHeaderCellBorderWidth * bm,\n                dataHeight = 0,\n                dataWidth = 0,\n                dims,\n                l = (self.data || []).length,\n                columnHeaderCellHeight = self.getColumnHeaderCellHeight(),\n                rowHeaderCellWidth = self.getRowHeaderCellWidth(),\n                ch = self.style.cellHeight,\n                s = self.getSchema();\n            // sets actual DOM canvas element\n            function checkScrollBoxVisibility() {\n                self.scrollBox.horizontalBarVisible = (self.style.width !== 'auto' && dataWidth > self.scrollBox.width && self.style.overflowX !== 'hidden')\n                    || self.style.overflowX === 'scroll';\n                self.scrollBox.horizontalBoxVisible = dataWidth > self.scrollBox.width;\n                self.scrollBox.verticalBarVisible = (self.style.height !== 'auto' && dataHeight > self.scrollBox.height && self.style.overflowY !== 'hidden')\n                    || self.style.overflowY === 'scroll';\n                self.scrollBox.verticalBoxVisible = dataHeight > self.scrollBox.height;\n            }\n            function setScrollBoxSize() {\n                self.scrollBox.width = self.width - rowHeaderCellWidth;\n                self.scrollBox.height = self.height - columnHeaderCellHeight;\n            }\n            function setCanvasSize() {\n                if (self.isChildGrid) {\n                    return;\n                }\n                dims = {\n                    // HACK +1 ? maybe it's a magic cell border?  Required to line up properly in auto height mode.\n                    height: columnHeaderCellHeight + dataHeight + cellBorder + 1,\n                    width: dataWidth + rowHeaderCellWidth + cellBorder\n                };\n                ['width', 'height'].forEach(function (dim) {\n                    //TODO: support inherit\n                    if (['auto', undefined].indexOf(self.style[dim]) !== -1\n                            && ['auto', undefined].indexOf(self.appliedInlineStyles[dim]) !== -1) {\n                        self.parentNodeStyle[dim] = dims[dim] + 'px';\n                    } else {\n                        self.parentNodeStyle[dim] = self.style[dim];\n                        if (self.isComponet) {\n                            self.canvas.style[dim] = self.style[dim];\n                        }\n                    }\n                });\n            }\n            self.scrollCache.x = [];\n            self.scrollCache.y = [];\n            for (x = 0; x < l; x += 1) {\n                self.scrollCache.y[x] = dataHeight;\n                dataHeight += (((self.sizes.rows[x] || ch) + (self.sizes.trees[x] || 0)) * self.scale)\n                    // HACK? if an expanded tree row is frozen it is necessary to add the tree row's height a second time.\n                    + (self.frozenRow > x ? (self.sizes.trees[x] || 0) : 0);\n            }\n            if (l > 1) {\n                self.scrollCache.y[x] = dataHeight;\n            }\n            dataWidth = s.reduce(function reduceSchema(accumulator, column, columnIndex) {\n                // intentional redefintion of column.  This causes scrollCache to be in the correct order\n                column = s[self.orders.columns[columnIndex]];\n                if (column.hidden) {\n                    self.scrollCache.x[columnIndex] = accumulator;\n                    return accumulator;\n                }\n                var va = accumulator + self.getColummnWidth(self.orders.columns[columnIndex]);\n                self.scrollCache.x[columnIndex] = va;\n                return va;\n            }, 0) || 0;\n            if (self.attributes.showNewRow) {\n                dataHeight += ch;\n            }\n            if (self.attributes.snapToRow) {\n              dataHeight += self.style.cellHeight;\n            }\n            setCanvasSize();\n            if (self.isChildGrid) {\n                self.width = self.parentNode.offsetWidth;\n                self.height = self.parentNode.offsetHeight;\n            } else if (self.height !== self.canvas.offsetHeight || self.width !== self.canvas.offsetWidth) {\n                self.height = self.canvas.offsetHeight;\n                self.width = self.canvas.offsetWidth;\n                self.canvasOffsetLeft = self.args.canvasOffsetLeft || 0;\n                self.canvasOffsetTop = self.args.canvasOffsetTop || 0;\n            }\n            /// calculate scroll bar dimensions\n            // non-controversial\n            self.scrollBox.top = columnHeaderCellHeight + columnHeaderCellBorder;\n            self.scrollBox.left = rowHeaderCellWidth;\n            // width and height of scroll box\n            setScrollBoxSize();\n            // is the data larger than the scroll box\n            checkScrollBoxVisibility();\n            // if the scroll box is visible, make room for it by expanding the size of the element\n            // if the other dimension is set to auto\n            if (self.scrollBox.horizontalBarVisible) {\n                if (self.style.height === 'auto' && !self.isChildGrid) {\n                    self.height += sbw;\n                }\n                dataHeight += sbw;\n                setCanvasSize();\n                setScrollBoxSize();\n                checkScrollBoxVisibility();\n            }\n            if (self.scrollBox.verticalBarVisible) {\n                if (self.style.width === 'auto' && !self.isChildGrid) {\n                    self.width += sbw;\n                }\n                dataWidth += sbw;\n                setCanvasSize();\n                setScrollBoxSize();\n                checkScrollBoxVisibility();\n            }\n            // set again after bar visibility checks\n            setScrollBoxSize();\n            self.scrollBox.scrollWidth = dataWidth - self.scrollBox.width;\n            self.scrollBox.scrollHeight = dataHeight - self.scrollBox.height;\n            self.scrollBox.widthBoxRatio = self.scrollBox.width / dataWidth;\n            self.scrollBox.scrollBoxWidth = self.scrollBox.width\n                * self.scrollBox.widthBoxRatio\n                - self.style.scrollBarWidth - b - d;\n            // TODO: This heightBoxRatio number is terribly wrong.\n            // They should be a result of the size of the grid/canvas?\n            // it being off causes the scroll bar to \"slide\" under\n            // the dragged mouse.\n            // https://github.com/TonyGermaneri/canvas-datagrid/issues/97\n            self.scrollBox.heightBoxRatio = (self.scrollBox.height - columnHeaderCellHeight) / dataHeight;\n            self.scrollBox.scrollBoxHeight = self.scrollBox.height\n                * self.scrollBox.heightBoxRatio\n                - self.style.scrollBarWidth - b - d;\n            self.scrollBox.scrollBoxWidth = Math.max(self.scrollBox.scrollBoxWidth, self.style.scrollBarBoxMinSize);\n            self.scrollBox.scrollBoxHeight = Math.max(self.scrollBox.scrollBoxHeight, self.style.scrollBarBoxMinSize);\n            // horizontal\n            n.x += rowHeaderCellWidth;\n            n.y += self.height - self.style.scrollBarWidth - d;\n            n.width = self.width - self.style.scrollBarWidth - rowHeaderCellWidth - d - m;\n            n.height = self.style.scrollBarWidth + self.style.scrollBarBorderWidth + d;\n            // horizontal box\n            nb.y = n.y + self.style.scrollBarBoxMargin;\n            nb.width = self.scrollBox.scrollBoxWidth;\n            nb.height = self.style.scrollBarBoxWidth;\n            // vertical\n            v.x += self.width - self.style.scrollBarWidth - self.style.scrollBarBorderWidth - d;\n            v.y += columnHeaderCellHeight;\n            v.width = self.style.scrollBarWidth + self.style.scrollBarBorderWidth + d;\n            v.height = self.height - columnHeaderCellHeight - self.style.scrollBarWidth - d - m;\n            // vertical box\n            vb.x = v.x + self.style.scrollBarBoxMargin;\n            vb.width = self.style.scrollBarBoxWidth;\n            vb.height = self.scrollBox.scrollBoxHeight;\n            // corner\n            co.x = n.x + n.width + m;\n            co.y = v.y + v.height + m;\n            co.width = self.style.scrollBarWidth + self.style.scrollBarBorderWidth;\n            co.height = self.style.scrollBarWidth + self.style.scrollBarBorderWidth;\n            self.scrollBox.entities = {\n                horizontalBar: n,\n                horizontalBox: nb,\n                verticalBar: v,\n                verticalBox: vb,\n                corner: co\n            };\n            self.scrollBox.bar = {\n                v: v,\n                h: n\n            };\n            self.scrollBox.box = {\n                v: vb,\n                h: nb\n            };\n            /// calculate page and dom elements\n            self.page = Math.max(1, self.visibleRows.length - 3 - self.attributes.pageUpDownOverlap);\n            // set canvas drawing related items\n            if (!self.isChildGrid) {\n                self.canvas.width = self.width * ratio;\n                self.canvas.height = self.height * ratio;\n                self.ctx.scale(ratio, ratio);\n            }\n            // resize any open dom elements (input/textarea)\n            self.resizeEditInput();\n            self.scroll(true);\n            if (drawAfterResize) {\n                self.draw(true);\n            }\n            self.dispatchEvent('resize', {});\n            return true;\n        };\n        self.scroll = function (dontDraw) {\n            var s = self.getSchema(),\n                l = (self.data || []).length,\n                ch = self.style.cellHeight;\n            // go too far in leaps, then get focused\n            self.scrollIndexTop = Math.floor((l * (self.scrollBox.scrollTop / self.scrollBox.scrollHeight)) - 100);\n            self.scrollIndexTop = Math.max(self.scrollIndexTop, 0);\n            self.scrollPixelTop = self.scrollCache.y[self.scrollIndexTop];\n            // sometimes the grid is rendered but the height is zero\n            if (self.scrollBox.scrollHeight === 0) {\n                self.scrollIndexTop = 0;\n            }\n            self.scrollPixelTop = 0;\n            self.scrollIndexLeft = self.frozenColumn;\n            self.scrollPixelLeft = 0;\n            while (self.scrollPixelTop < self.scrollBox.scrollTop && self.scrollIndexTop < self.data.length) {\n                // start on index +1 since index 0 was used in \"go too far\" section above\n                self.scrollIndexTop += 1;\n                self.scrollPixelTop = self.scrollCache.y[self.scrollIndexTop];\n            }\n            while (self.scrollPixelLeft < (self.scrollBox.scrollLeft + 1) && self.scrollIndexLeft < s.length) {\n                self.scrollPixelLeft = self.scrollCache.x[self.scrollIndexLeft];\n                self.scrollIndexLeft += 1;\n            }\n            if (s.length > 0) {\n                self.scrollIndexLeft = Math.max(self.scrollIndexLeft - 1, 0);\n                self.scrollPixelLeft -= self.getColummnWidth(self.orders.columns[self.scrollIndexLeft]);\n            }\n            if ((self.data || []).length > 0) {\n                self.scrollIndexTop = Math.max(self.scrollIndexTop - 1, 0);\n                self.scrollPixelTop = Math.max((self.scrollPixelTop\n                    - (\n                        self.data[self.scrollIndexTop] ? (self.sizes.rows[self.scrollIndexTop] || ch)\n                                + (self.sizes.trees[self.scrollIndexTop] || 0)\n                        : ch\n                    ) * self.scale), 0);\n            }\n            self.ellipsisCache = {};\n            if (!dontDraw) {\n                self.draw(true);\n            }\n            //TODO: figure out why this has to be delayed for child grids\n            //BUG: wheeling event on 3rd level hierarchy fails to move input box\n            requestAnimationFrame(self.resizeEditInput);\n            self.dispatchEvent('scroll', {top: self.scrollBox.scrollTop, left: self.scrollBox.scrollLeft});\n        };\n        self.mousemove = function (e, overridePos) {\n            if (self.contextMenu || self.input) {\n                return;\n            }\n            self.mouse = overridePos || self.getLayerPos(e);\n            var ctrl = (e.ctrlKey || e.metaKey || self.attributes.persistantSelectionMode),\n                i,\n                s = self.getSchema(),\n                dragBounds,\n                sBounds,\n                x = self.mouse.x,\n                y = self.mouse.y,\n                o = self.getCellAt(x, y),\n                delta,\n                ev = {NativeEvent: e, cell: o, x: x, y: y},\n                previousCell = self.currentCell;\n            clearTimeout(self.scrollTimer);\n            if (!self.isInGrid({x: x, y: y})) {\n                self.hasFocus = false;\n            }\n            if (self.dispatchEvent('mousemove', ev)) {\n                return;\n            }\n            if (o && self.currentCell) {\n                self.rowBoundaryCrossed = self.currentCell.rowIndex !== o.rowIndex;\n                self.columnBoundaryCrossed = self.currentCell.columnIndex !== o.columnIndex;\n                self.cellBoundaryCrossed = self.rowBoundaryCrossed || self.columnBoundaryCrossed;\n                ['row', 'column', 'cell'].forEach(function (prefix) {\n                    if (self[prefix + 'BoundaryCrossed']) {\n                        ev.cell = previousCell;\n                        self.dispatchEvent(prefix + 'mouseout', ev);\n                        ev.cell = o;\n                        self.dispatchEvent(prefix + 'mouseover', ev);\n                    }\n                });\n            }\n            self.currentCell = o;\n            if (!self.hasFocus) {\n                return;\n            }\n            self.hovers = {};\n            if (!self.draggingItem\n                    && o\n                    && self.scrollModes.indexOf(o.context) === -1) {\n                self.dragItem = o;\n                self.dragMode = o.dragContext;\n                self.cursor = o.context;\n                if (o.context === 'cell') {\n                    self.cursor = 'default';\n                    self.hovers = { rowIndex: o.rowIndex, columnIndex: o.columnIndex };\n                }\n                if ((self.selecting || self.reorderObject)\n                        && o.context === 'cell') {\n                    delta = {\n                        x: Math.abs(self.dragStart.x - x),\n                        y: Math.abs(self.dragStart.y - y)\n                    };\n                    if (self.dragStartObject.columnIndex !== -1 && e.shiftKey) {\n                        self.dragStartObject = {\n                            rowIndex: self.activeCell.rowIndex,\n                            columnIndex: self.activeCell.columnIndex\n                        };\n                    }\n                    dragBounds = {\n                        top: Math.min(self.dragStartObject.rowIndex, o.rowIndex),\n                        left: Math.min(self.dragStartObject.columnIndex, o.columnIndex),\n                        bottom: Math.max(self.dragStartObject.rowIndex, o.rowIndex),\n                        right: Math.max(self.dragStartObject.columnIndex, o.columnIndex)\n                    };\n                    if (self.dragStartObject.columnIndex === -1) {\n                        sBounds = self.getSelectionBounds();\n                        dragBounds.left = -1;\n                        dragBounds.right = s.length - 1;\n                        dragBounds.top = Math.min(sBounds.top, o.rowIndex);\n                        dragBounds.bottom = Math.max(sBounds.bottom, o.rowIndex);\n                    }\n                    if (self.dragStartObject.rowIndex !== o.rowIndex\n                                || self.dragStartObject.columnIndex !== o.columnIndex) {\n                        self.ignoreNextClick = true;\n                    }\n                    if (self.cellBoundaryCrossed || (delta.x === 0 && delta.y === 0) || (self.attributes.selectionMode === 'row')) {\n                        if (((self.attributes.selectionMode === 'row') || self.dragStartObject.columnIndex === -1)\n                                && self.rowBoundaryCrossed) {\n                            self.selectRow(o.rowIndex, ctrl, null, true);\n                        } else if (self.attributes.selectionMode !== 'row') {\n                            if (!self.dragAddToSelection && o.rowIndex !== undefined) {\n                                if (self.selections[o.rowIndex] && self.selections[o.rowIndex].indexOf(o.columnIndex) !== -1) {\n                                    self.selections[o.rowIndex].splice(self.selections[o.rowIndex].indexOf(o.columnIndex), 1);\n                                }\n                            } else {\n                                self.selections[o.rowIndex] = self.selections[o.rowIndex] || [];\n                                if (self.selections[o.rowIndex].indexOf(o.columnIndex) === -1) {\n                                    self.selections[o.rowIndex].push(o.columnIndex);\n                                }\n                            }\n                        }\n                    }\n                    if ((!self.selectionBounds || (dragBounds.top !== self.selectionBounds.top\n                            || dragBounds.left !== self.selectionBounds.left\n                            || dragBounds.bottom !== self.selectionBounds.bottom\n                            || dragBounds.right !== self.selectionBounds.right)) && !ctrl) {\n                        self.selections = [];\n                        sBounds = dragBounds;\n                        if (self.attributes.selectionMode === 'row') {\n                            for (i = sBounds.top; i <= sBounds.bottom; i += 1) {\n                                self.selectRow(i, true, null, true);\n                            }\n                        } else if (dragBounds.top !== -1) {\n                            self.selectArea(sBounds, true);\n                        }\n                    }\n                    self.autoScrollZone(e, x, y, ctrl);\n                }\n            }\n            self.cellBoundaryCrossed = false;\n            self.rowBoundaryCrossed = false;\n            self.columnBoundaryCrossed = false;\n            self.draw(true);\n        };\n        self.click = function (e, overridePos) {\n            var i,\n                startingBounds = JSON.stringify(self.getSelectionBounds()),\n                ctrl = (e.ctrlKey || e.metaKey || self.attributes.persistantSelectionMode),\n                pos = overridePos || self.getLayerPos(e);\n            self.currentCell = self.getCellAt(pos.x, pos.y);\n            if (self.currentCell.grid !== undefined) {\n                return;\n            }\n            function checkSelectionChange() {\n                var ev, sb = self.getSelectionBounds();\n                if (startingBounds === JSON.stringify(sb)) {\n                    return;\n                }\n                ev = {\n                    selections: self.selections,\n                    selectionBounds: self.getSelectionBounds()\n                };\n                Object.defineProperty(ev, 'selectedData', {\n                    get: function () {\n                        return self.getSelectedData();\n                    }\n                });\n                self.dispatchEvent('selectionchanged', ev);\n            }\n            if (self.input) {\n                self.endEdit();\n            }\n            if (self.ignoreNextClick) {\n                self.ignoreNextClick = false;\n                return;\n            }\n            i = self.currentCell;\n            if (self.dispatchEvent('click', {NativeEvent: e, cell: self.currentCell})) { return; }\n            if (!self.hasFocus) {\n                return;\n            }\n            if (['rowHeaderCell', 'columnHeaderCell'].indexOf(self.currentCell.style) === -1 && !ctrl) {\n                self.setActiveCell(i.columnIndex, i.rowIndex);\n            }\n            if (self.currentCell.context === 'cell') {\n                if (self.currentCell.style === 'cornerCell') {\n                    self.selectAll();\n                    self.draw();\n                    checkSelectionChange();\n                    return;\n                }\n                if (self.currentCell.style === 'columnHeaderCell') {\n                    if (self.attributes.columnHeaderClickBehavior === 'sort') {\n                        if (self.orderBy === i.header.name) {\n                            self.orderDirection = self.orderDirection === 'asc' ? 'desc' : 'asc';\n                        } else {\n                            self.orderDirection = 'asc';\n                        }\n                        self.order(i.header.name, self.orderDirection);\n                        checkSelectionChange();\n                        return;\n                    }\n                    if (self.attributes.columnHeaderClickBehavior === 'select') {\n                        self.selectColumn(i.header.index, ctrl, e.shiftKey);\n                        self.draw();\n                        return;\n                    }\n                }\n                self.selections[i.rowIndex] = self.selections[i.rowIndex] || [];\n                if (((self.attributes.selectionMode === 'row') || self.currentCell.style === 'rowHeaderCell')) {\n                    if (self.currentCell.style === 'rowHeaderCell'\n                            && self.attributes.tree && pos.x > 0\n                            && pos.x - self.currentCell.x < self.style.treeArrowWidth\n                            + self.style.treeArrowMarginLeft\n                            + self.style.treeArrowMarginRight + self.style.treeArrowClickRadius\n                            && pos.y - self.currentCell.y < self.style.treeArrowHeight\n                            + self.style.treeArrowMarginTop + self.style.treeArrowClickRadius\n                            && pos.y > 0) {\n                        self.toggleTree(i.rowIndex);\n                        return;\n                    }\n                }\n                if (e.shiftKey && !ctrl) {\n                    self.selectionBounds = self.getSelectionBounds();\n                    self.selectArea(undefined, false);\n                }\n            }\n            checkSelectionChange();\n            self.draw(true);\n        };\n        self.dragResizeColumn = function (e) {\n            var pos, x, y;\n            pos = self.getLayerPos(e);\n            x = self.resizingStartingWidth + pos.x - self.dragStart.x;\n            y = self.resizingStartingHeight + pos.y - self.dragStart.y;\n            if (x < self.style.minColumnWidth) {\n                x = self.style.minColumnWidth;\n            }\n            if (y < self.style.minRowHeight) {\n                y = self.style.minRowHeight;\n            }\n            if (self.dispatchEvent('resizecolumn', {x: x, y: y, draggingItem: self.draggingItem})) { return false; }\n            if (self.scrollBox.scrollLeft > self.scrollBox.scrollWidth - self.attributes.resizeScrollZone\n                    && self.dragMode === 'ew-resize') {\n                self.resize(true);\n                self.scrollBox.scrollLeft += x;\n            }\n            if (self.dragMode === 'ew-resize') {\n                self.sizes.columns[self.draggingItem.header.style === 'rowHeaderCell'\n                       ? 'cornerCell' : self.draggingItem.sortColumnIndex] = x;\n                if (['rowHeaderCell', 'cornerCell'].indexOf(self.draggingItem.header.style) !== -1) {\n                    self.resize(true);\n                }\n                self.resizeChildGrids();\n                return;\n            }\n            if (self.dragMode === 'ns-resize') {\n                if (self.draggingItem.rowOpen) {\n                    self.sizes.trees[self.draggingItem.rowIndex] = y;\n                } else if (self.attributes.globalRowResize) {\n                    self.style.cellHeight = y;\n                } else {\n                    self.sizes.rows[self.draggingItem.rowIndex] = y;\n                }\n                self.dispatchEvent('resizerow', {row: y});\n                self.resizeChildGrids();\n                return;\n            }\n            self.ellipsisCache = {};\n        };\n        self.stopDragResize = function () {\n            self.resize();\n            document.body.removeEventListener('mousemove', self.dragResizeColumn, false);\n            document.body.removeEventListener('mouseup', self.stopDragResize, false);\n            self.setStorageData();\n            self.draw(true);\n            self.ignoreNextClick = true;\n        };\n        self.scrollGrid = function (e) {\n            var pos = self.getLayerPos(e);\n            if (self.attributes.scrollPointerLock && self.pointerLockPosition\n                    && ['horizontal-scroll-box', 'vertical-scroll-box'].indexOf(self.scrollStartMode) !== -1) {\n                self.pointerLockPosition.x += e.movementX;\n                self.pointerLockPosition.y += e.movementY;\n                self.pointerLockPosition.x = Math.min(self.width - self.style.scrollBarWidth, Math.max(0, self.pointerLockPosition.x));\n                self.pointerLockPosition.y = Math.min(self.height - self.style.scrollBarWidth, Math.max(0, self.pointerLockPosition.y));\n                pos = self.pointerLockPosition;\n            }\n            self.scrollMode = self.getCellAt(pos.x, pos.y).context;\n            if (self.scrollMode === 'horizontal-scroll-box' && self.scrollStartMode !== 'horizontal-scroll-box') {\n                self.scrollStartMode = 'horizontal-scroll-box';\n                self.dragStart = pos;\n                self.scrollStart.left = self.scrollBox.scrollLeft;\n                clearTimeout(self.scrollTimer);\n                return;\n            }\n            if (self.scrollMode === 'vertical-scroll-box' && self.scrollStartMode !== 'vertical-scroll-box') {\n                self.scrollStartMode = 'vertical-scroll-box';\n                self.dragStart = pos;\n                self.scrollStart.top = self.scrollBox.scrollTop;\n                clearTimeout(self.scrollTimer);\n                return;\n            }\n            if (self.scrollStartMode === 'vertical-scroll-box'\n                    && self.scrollMode !== 'vertical-scroll-box') {\n                self.scrollMode = 'vertical-scroll-box';\n            }\n            if (self.scrollStartMode === 'horizontal-scroll-box'\n                    && self.scrollMode !== 'horizontal-scroll-box') {\n                self.scrollMode = 'horizontal-scroll-box';\n            }\n            clearTimeout(self.scrollTimer);\n            if (self.scrollModes.indexOf(self.scrollMode) === -1) {\n                return;\n            }\n            if (self.scrollMode === 'vertical-scroll-box') {\n                self.scrollBox.scrollTop = self.scrollStart.top + ((pos.y - self.dragStart.y)\n                    / self.scrollBox.heightBoxRatio);\n            } else if (self.scrollMode === 'vertical-scroll-top') {\n                self.scrollBox.scrollTop -= (self.page * self.style.cellHeight);\n                self.scrollTimer = setTimeout(self.scrollGrid, self.attributes.scrollRepeatRate, e);\n            } else if (self.scrollMode === 'vertical-scroll-bottom') {\n                self.scrollBox.scrollTop += (self.page * self.style.cellHeight);\n                self.scrollTimer = setTimeout(self.scrollGrid, self.attributes.scrollRepeatRate, e);\n            }\n            if (self.scrollMode === 'horizontal-scroll-box') {\n                self.scrollBox.scrollLeft = self.scrollStart.left + ((pos.x - self.dragStart.x)\n                    / self.scrollBox.widthBoxRatio);\n            } else if (self.scrollMode === 'horizontal-scroll-right') {\n                self.scrollBox.scrollLeft += self.attributes.selectionScrollIncrement;\n                self.scrollTimer = setTimeout(self.scrollGrid, self.attributes.scrollRepeatRate, e);\n            } else if (self.scrollMode === 'horizontal-scroll-left') {\n                self.scrollBox.scrollLeft -= self.attributes.selectionScrollIncrement;\n                self.scrollTimer = setTimeout(self.scrollGrid, self.attributes.scrollRepeatRate, e);\n            }\n        };\n        self.stopScrollGrid = function () {\n            clearTimeout(self.scrollTimer);\n            if (document.exitPointerLock) {\n                document.exitPointerLock();\n            }\n            document.removeEventListener('mousemove', self.scrollGrid, false);\n        };\n        self.dragReorder = function (e) {\n            var pos, x, y,\n                columReorder = self.dragMode === 'column-reorder',\n                rowReorder = self.dragMode === 'row-reorder';\n            pos = self.getLayerPos(e);\n            x = pos.x - self.dragStart.x;\n            y = pos.y - self.dragStart.y;\n            if (!self.attributes.allowColumnReordering && columReorder) {\n                return;\n            }\n            if (!self.attributes.allowRowReordering && rowReorder) {\n                return;\n            }\n            if (self.dispatchEvent('reordering', {\n                    NativeEvent: e,\n                    source: self.dragStartObject,\n                    target: self.currentCell,\n                    dragMode: self.dragMode\n                })) {\n                return;\n            }\n            if (Math.abs(x) > self.attributes.reorderDeadZone || Math.abs(y) > self.attributes.reorderDeadZone) {\n                self.reorderObject = self.draggingItem;\n                self.reorderTarget = self.currentCell;\n                self.reorderObject.dragOffset = {\n                    x: x,\n                    y: y\n                };\n                self.autoScrollZone(e, columReorder ? pos.x : -1, rowReorder ? pos.y : -1, false);\n            }\n        };\n        self.stopDragReorder = function (e) {\n            var oIndex,\n                tIndex,\n                cr = {\n                    'row-reorder': self.orders.rows,\n                    'column-reorder': self.orders.columns\n                },\n                i = {\n                    'row-reorder': 'rowIndex',\n                    'column-reorder': 'sortColumnIndex'\n                }[self.dragMode];\n            document.body.removeEventListener('mousemove', self.dragReorder, false);\n            document.body.removeEventListener('mouseup', self.stopDragReorder, false);\n            if (self.reorderObject\n                    && self.reorderTarget\n                    && ((self.dragMode === 'column-reorder' && self.reorderTarget.sortColumnIndex > -1\n                        && self.reorderTarget.sortColumnIndex < self.getSchema().length)\n                    || (self.dragMode === 'row-reorder' && self.reorderTarget.rowIndex > -1\n                        && self.reorderTarget.rowIndex < self.data.length))\n                    && self.reorderObject[i] !== self.reorderTarget[i]\n                    && !self.dispatchEvent('reorder', {\n                        NativeEvent: e,\n                        source: self.reorderObject,\n                        target: self.reorderTarget,\n                        dragMode: self.dragMode\n                    })) {\n                self.ignoreNextClick = true;\n                oIndex = cr[self.dragMode].indexOf(self.reorderObject[i]);\n                tIndex = cr[self.dragMode].indexOf(self.reorderTarget[i]);\n                cr[self.dragMode].splice(oIndex, 1);\n                cr[self.dragMode].splice(tIndex, 0, self.reorderObject[i]);\n                if(self.dragMode === 'column-reorder') {\n                  self.orders.columns = cr[self.dragMode];\n                } else {\n                  self.orders.rows = cr[self.dragMode];\n                }\n                self.resize();\n                self.setStorageData();\n            }\n            self.reorderObject = undefined;\n            self.reorderTarget = undefined;\n            self.draw(true);\n        };\n        self.dragMove = function (e) {\n            if (self.dispatchEvent('moving', {NativeEvent: e, cell: self.currentCell})) { return; }\n            var pos = self.getLayerPos(e);\n            self.moveOffset = {\n                x: self.currentCell.columnIndex - self.dragStartObject.columnIndex,\n                y: self.currentCell.rowIndex - self.dragStartObject.rowIndex\n            };\n            if (Math.abs(pos.x) > self.attributes.reorderDeadZone || Math.abs(pos.y) > self.attributes.reorderDeadZone) {\n                setTimeout(function () {\n                    self.autoScrollZone(e, pos.x, pos.y, false);\n                }, 1);\n            }\n        };\n        self.stopDragMove = function (e) {\n            document.body.removeEventListener('mousemove', self.dragMove, false);\n            document.body.removeEventListener('mouseup', self.stopDragMove, false);\n            var b = self.getSelectionBounds();\n            if (self.dispatchEvent('endmove', {NativeEvent: e, cell: self.currentCell})) {\n                self.movingSelection = undefined;\n                self.moveOffset = undefined;\n                self.draw(true);\n                return;\n            }\n            if (self.moveOffset) {\n                self.moveTo(self.movingSelection, b.left + self.moveOffset.x, b.top + self.moveOffset.y);\n                self.moveSelection(self.moveOffset.x, self.moveOffset.y);\n            }\n            self.movingSelection = undefined;\n            self.moveOffset = undefined;\n            self.draw(true);\n        };\n        self.freezeMove = function (e) {\n            if (self.dispatchEvent('freezemoving', {NativeEvent: e, cell: self.currentCell})) { return; }\n            var pos = self.getLayerPos(e);\n            self.ignoreNextClick = true;\n            self.freezeMarkerPosition = pos;\n            if (self.currentCell && self.currentCell.rowIndex !== undefined && self.dragMode === 'frozen-row-marker') {\n                self.scrollBox.scrollTop = 0;\n                self.frozenRow = self.currentCell.rowIndex + 1;\n            }\n            if (self.currentCell && self.currentCell.columnIndex !== undefined && self.dragMode === 'frozen-column-marker') {\n                self.scrollBox.scrollLeft = 0;\n                self.frozenColumn = self.currentCell.columnIndex + 1;\n            }\n            if (Math.abs(pos.x) > self.attributes.reorderDeadZone || Math.abs(pos.y) > self.attributes.reorderDeadZone) {\n                setTimeout(function () {\n                    self.autoScrollZone(e, pos.x, pos.y, false);\n                }, 1);\n            }\n        };\n        self.stopFreezeMove = function (e) {\n            document.body.removeEventListener('mousemove', self.freezeMove, false);\n            document.body.removeEventListener('mouseup', self.stopFreezeMove, false);\n            self.freezeMarkerPosition = undefined;\n            if (self.dispatchEvent('endfreezemove', {NativeEvent: e})) {\n                self.frozenRow = self.startFreezeMove.x;\n                self.frozenColumn = self.startFreezeMove.y;\n                self.draw(true);\n                return;\n            }\n            self.draw(true);\n        };\n        self.mousedown = function (e, overridePos) {\n            self.lastMouseDownTarget = e.target;\n            if (self.dispatchEvent('mousedown', {NativeEvent: e, cell: self.currentCell})) { return; }\n            if (!self.hasFocus) {\n                return;\n            }\n            if (e.button === 2 || self.input) { return; }\n            var ctrl = (e.ctrlKey || e.metaKey),\n                move = /-move/.test(self.dragMode),\n                freeze = /frozen-row-marker|frozen-column-marker/.test(self.dragMode),\n                resize = /-resize/.test(self.dragMode);\n            self.dragStart = overridePos || self.getLayerPos(e);\n            self.scrollStart = {\n                left: self.scrollBox.scrollLeft,\n                top: self.scrollBox.scrollTop\n            };\n            self.dragStartObject = self.getCellAt(self.dragStart.x, self.dragStart.y);\n            self.dragAddToSelection = !self.dragStartObject.selected;\n            if (!ctrl && !e.shiftKey && !/(vertical|horizontal)-scroll-(bar|box)/\n                    .test(self.dragStartObject.context)\n                    && self.currentCell\n                    && !self.currentCell.isColumnHeader\n                    && !move\n                    && !freeze\n                    && !resize) {\n                self.selections = [];\n            }\n            if (self.dragStartObject.isGrid) {\n                return;\n            }\n            if (self.scrollModes.indexOf(self.dragStartObject.context) !== -1) {\n                self.scrollMode = self.dragStartObject.context;\n                self.scrollStartMode = self.dragStartObject.context;\n                self.scrollGrid(e);\n                if (self.attributes.scrollPointerLock\n                        && ['horizontal-scroll-box', 'vertical-scroll-box'].indexOf(self.scrollStartMode) !== -1) {\n                    self.pointerLockPosition = {\n                        x: self.dragStart.x,\n                        y: self.dragStart.y\n                    };\n                    self.canvas.requestPointerLock();\n                }\n                document.addEventListener('mousemove', self.scrollGrid, false);\n                document.addEventListener('mouseup', self.stopScrollGrid, false);\n                self.ignoreNextClick = true;\n                return;\n            }\n            if (self.dragMode === 'cell') {\n                self.selecting = true;\n                if ((self.attributes.selectionMode === 'row' || self.dragStartObject.columnIndex === -1)\n                        && self.dragStartObject.rowIndex > -1) {\n                    self.selectRow(self.dragStartObject.rowIndex, ctrl, null);\n                } else if (self.attributes.selectionMode !== 'row') {\n                    self.mousemove(e);\n                }\n                return;\n            }\n            if (move) {\n                self.draggingItem = self.dragItem;\n                self.movingSelection = self.selections.concat([]);\n                self.dragging = self.dragStartObject;\n                if (self.dispatchEvent('beginmove', {NativeEvent: e, cell: self.currentCell})) { return; }\n                document.body.addEventListener('mousemove', self.dragMove, false);\n                document.body.addEventListener('mouseup', self.stopDragMove, false);\n                return self.mousemove(e);\n            }\n            if (freeze) {\n                self.draggingItem = self.dragItem;\n                self.startFreezeMove = {\n                    x: self.frozenRow,\n                    y: self.frozenColumn\n                };\n                if (self.dispatchEvent('beginfreezemove', {NativeEvent: e})) { return; }\n                document.body.addEventListener('mousemove', self.freezeMove, false);\n                document.body.addEventListener('mouseup', self.stopFreezeMove, false);\n                return self.mousemove(e);\n            }\n            if (resize) {\n                self.draggingItem = self.dragItem;\n                if (self.draggingItem.rowOpen) {\n                    self.resizingStartingHeight = self.sizes.trees[self.draggingItem.rowIndex];\n                } else {\n                    self.resizingStartingHeight = self.sizes.rows[self.draggingItem.rowIndex] || self.style.cellHeight;\n                }\n                self.resizingStartingWidth = self.sizes.columns[self.draggingItem.header.style === 'rowHeaderCell'\n                       ? 'cornerCell' : self.draggingItem.sortColumnIndex] || self.draggingItem.width;\n                document.body.addEventListener('mousemove', self.dragResizeColumn, false);\n                document.body.addEventListener('mouseup', self.stopDragResize, false);\n                return;\n            }\n            if (['row-reorder', 'column-reorder'].indexOf(self.dragMode) !== -1) {\n                self.draggingItem = self.dragStartObject;\n                document.body.addEventListener('mousemove', self.dragReorder, false);\n                document.body.addEventListener('mouseup', self.stopDragReorder, false);\n                return;\n            }\n        };\n        self.mouseup = function (e) {\n            clearTimeout(self.scrollTimer);\n            self.cellBoundaryCrossed = true;\n            self.rowBoundaryCrossed = true;\n            self.columnBoundaryCrossed = true;\n            self.selecting = undefined;\n            self.draggingItem = undefined;\n            self.dragStartObject = undefined;\n            if (self.dispatchEvent('mouseup', {NativeEvent: e, cell: self.currentCell})) { return; }\n            if (!self.hasFocus && e.target !== self.canvas) {\n                return;\n            }\n            if (self.currentCell && self.currentCell.grid !== undefined) {\n                return;\n            }\n            if (self.contextMenu || self.input) { return; }\n            if (self.dragStart && self.isInGrid(self.dragStart)) {\n                self.controlInput.focus();\n            }\n            e.preventDefault();\n        };\n        // gets the horizontal adjacent cells as well as first/last based on column visibility\n        self.getAdjacentCells = function () {\n            var x,\n                i,\n                s = self.getSchema(),\n                o = {};\n            for (x = 0; x < s.length; x += 1) {\n                i = self.orders.columns[x];\n                if (!s[i].hidden) {\n                    if (o.first === undefined) {\n                        o.first = x;\n                        o.left = x;\n                    }\n                    o.last = x;\n                    if (x > self.activeCell.columnIndex && o.right === undefined) {\n                        o.right = x;\n                    }\n                    if (x < self.activeCell.columnIndex) {\n                        o.left = x;\n                    }\n                }\n            }\n            if (o.right === undefined) {\n                o.right = o.last;\n            }\n            return o;\n        };\n        self.keydown = function (e) {\n            var i,\n                ev,\n                adjacentCells = self.getAdjacentCells(),\n                x = self.activeCell.columnIndex,\n                y = self.activeCell.rowIndex,\n                ctrl = (e.ctrlKey || e.metaKey),\n                last = self.data.length - 1,\n                s = self.getSchema(),\n                cols = s.length - 1;\n            if (self.dispatchEvent('keydown', {NativeEvent: e, cell: self.currentCell})) { return; }\n            if (!self.hasFocus) {\n                return;\n            }\n            if (self.attributes.showNewRow) {\n                last += 1;\n            }\n            if (e.keyCode === 9) {\n                e.preventDefault();\n            }\n            // esc\n            if (e.keyCode === 27) {\n                self.selections = [];\n                self.draw(true);\n            // ctrl + a\n            } else if (ctrl && e.keyCode === 65) {\n                self.selectAll();\n            //ArrowDown\n            } else if (e.keyCode === 40) {\n                y += 1;\n            //ArrowUp\n            } else if (e.keyCode === 38) {\n                y -= 1;\n            //ArrowLeft Tab\n            } else if (e.keyCode === 37 || (e.shiftKey && e.keyCode === 9)) {\n                x = adjacentCells.left;\n            //ArrowRight Tab\n            } else if (e.keyCode === 39 || (!e.shiftKey && e.keyCode === 9)) {\n                x = adjacentCells.right;\n            //PageUp\n            } else if (e.keyCode === 33) {\n                y -= self.page;\n                e.preventDefault();\n            //PageDown\n            } else if (e.keyCode === 34) {\n                y += self.page;\n                e.preventDefault();\n            //Home ArrowUp\n            } else if (e.keyCode === 36 || (ctrl && e.keyCode === 38)) {\n                y = 0;\n            //End ArrowDown\n            } else if (e.keyCode === 35 || (ctrl && e.keyCode === 40)) {\n                y = self.data.length - 1;\n            //ArrowRight\n            } else if (ctrl && e.keyCode === 39) {\n                x = adjacentCells.last;\n            //ArrowLeft\n            } else if (ctrl && e.keyCode === 37) {\n                x = adjacentCells.first;\n            }\n            //Enter\n            if (e.keyCode === 13) {\n                return self.beginEditAt(x, y, e);\n            }\n            //Space\n            if (e.keyCode === 32) {\n                self.selections = [];\n                self.selections[Math.max(y, 0)] = [];\n                self.selections[Math.max(y, 0)].push(x);\n                self.selectionBounds = self.getSelectionBounds();\n                if (self.attributes.selectionMode === 'row') {\n                    for (i = self.selectionBounds.top; i <= self.selectionBounds.bottom; i += 1) {\n                        self.selectRow(i, ctrl, null, true);\n                    }\n                } else {\n                    self.selectArea(undefined, ctrl);\n                }\n                e.preventDefault();\n                self.draw(true);\n                return;\n            }\n            if (x < 0 || Number.isNaN(x)) {\n                x = adjacentCells.first;\n            }\n            if (y > last) {\n                y = last;\n            }\n            if (y < 0 || Number.isNaN(y)) {\n                y = 0;\n            }\n            if (x > cols) {\n                x = adjacentCells.last;\n            }\n            // TODO - most likley some column order related bugs in key based selection\n            // Arrows\n            if (e.shiftKey && [37, 38, 39, 40].indexOf(e.keyCode) !== -1) {\n                self.selections[Math.max(y, 0)] = self.selections[Math.max(y, 0)] || [];\n                self.selections[Math.max(y, 0)].push(x);\n                self.selectionBounds = self.getSelectionBounds();\n                self.selectArea(undefined, ctrl);\n                self.draw(true);\n            }\n            if (x !== self.activeCell.columnIndex || y !== self.activeCell.rowIndex) {\n                self.scrollIntoView(\n                  x !== self.activeCell.columnIndex ? x : undefined,\n                  y !== self.activeCell.rowIndex && !Number.isNaN(y) ? y : undefined\n                );\n\n                self.setActiveCell(x, y);\n                if (!e.shiftKey && self.attributes.selectionFollowsActiveCell) {\n                    if (!ctrl) {\n                        self.selections = [];\n                    }\n                    self.selections[y] = self.selections[y] || [];\n                    self.selections[y].push(x);\n                    ev = {\n                        selectedData: self.getSelectedData(),\n                        selections: self.selections,\n                        selectionBounds: self.getSelectionBounds()\n                    };\n                    Object.defineProperty(ev, 'selectedData', {\n                        get: function () {\n                            return self.getSelectedData();\n                        }\n                    });\n                    self.dispatchEvent('selectionchanged', ev);\n                }\n                self.draw(true);\n            }\n        };\n        self.keyup = function (e) {\n            if (self.dispatchEvent('keyup', {NativeEvent: e, cell: self.currentCell})) { return; }\n            if (!self.hasFocus) {\n                return;\n            }\n        };\n        self.keypress = function (e) {\n            if (!self.hasFocus) {\n                return;\n            }\n            if (self.dispatchEvent('keypress', {NativeEvent: e, cell: self.currentCell})) { return; }\n        };\n        self.dblclick = function (e) {\n            if (self.dispatchEvent('dblclick', {NativeEvent: e, cell: self.currentCell})) { return; }\n            if (!self.hasFocus) {\n                return;\n            }\n            if (self.currentCell.context === 'ew-resize'\n                    && self.currentCell.style === 'columnHeaderCell') {\n                self.fitColumnToValues(self.currentCell.header.name);\n            } else if (self.currentCell.context === 'ew-resize'\n                    && self.currentCell.style === 'cornerCell') {\n                self.autosize();\n            } else if (['cell', 'activeCell'].indexOf(self.currentCell.style) !== -1) {\n                self.beginEditAt(self.currentCell.columnIndex, self.currentCell.rowIndex);\n            }\n        };\n        self.scrollWheel = function (e) {\n            var l,\n                t,\n                ev = e,\n                deltaX = e.deltaX === undefined ? e.NativeEvent.deltaX : e.deltaX,\n                deltaY = e.deltaY === undefined ? e.NativeEvent.deltaY : e.deltaY,\n                deltaMode = e.deltaMode === undefined ? e.NativeEvent.deltaMode : e.deltaMode;\n            if (wheeling) {\n                return;\n            }\n            if (self.dispatchEvent('wheel', {NativeEvent: e})) {\n                return;\n            }\n            var e = e.NativeEvent || e;\n            self.touchHaltAnimation = true;\n            l = self.scrollBox.scrollLeft;\n            t = self.scrollBox.scrollTop;\n            if (self.hasFocus) {\n                //BUG Issue 42: https://github.com/TonyGermaneri/canvas-datagrid/issues/42\n                //https://stackoverflow.com/questions/20110224/what-is-the-height-of-a-line-in-a-wheel-event-deltamode-dom-delta-line\n                if (deltaMode === 1) {\n                    // line mode = 17 pixels per line\n                    deltaY = deltaY * 17;\n                }\n                if ((self.scrollBox.scrollTop  < self.scrollBox.scrollHeight && deltaY > 0)\n                        || (self.scrollBox.scrollLeft < self.scrollBox.scrollWidth && deltaX > 0)\n                        || (self.scrollBox.scrollTop > 0 && deltaY < 0)\n                        || (self.scrollBox.scrollLeft > 0 && deltaX < 0)) {\n                    ev.preventDefault(e);\n                }\n                wheeling = setTimeout(function () {\n                    wheeling = undefined;\n                    self.scrollBox.scrollTo(deltaX + l, deltaY + t);\n                }, 1);\n            }\n        };\n        self.pasteItem = function (clipData, x, y, mimeType) {\n            var l, s = self.getVisibleSchema(), yi = y - 1, sel = [];\n            function normalizeRowData(importingRow, existingRow, offsetX, schema, mimeType, rowIndex) {\n                var r = existingRow;\n                if (!Array.isArray(importingRow) && importingRow !== null && typeof importingRow === 'object') {\n                    importingRow = Object.keys(importingRow).map(function (colKey) {\n                        return importingRow[colKey];\n                    });\n                }\n                if (/^text\\/html/.test(mimeType)) {\n                    importingRow = importingRow.substring(4, importingRow.length - 5).split('</td><td>');\n                }\n                if (typeof importingRow === 'string') {\n                    importingRow = [importingRow];\n                }\n                sel[rowIndex] = [];\n                importingRow.forEach(function (cellData, colIndex) {\n                    var cName = schema[colIndex + offsetX].name;\n                    if (importingRow[colIndex] === undefined || importingRow[colIndex] === null) {\n                        r[cName] = existingRow[cName];\n                        return;\n                    }\n                    sel[rowIndex].push(colIndex + offsetX);\n                    r[cName] = importingRow[colIndex];\n                });\n                return r;\n            }\n            if (/^text\\/html/.test(mimeType)) {\n                if (!/^(<meta[^>]+>)?<table>/.test(clipData.substring(0, 29))) {\n                    console.warn('Unrecognized HTML format.  HTML must be a simple table, e.g.: <table><tr><td>data</td></tr></table>.  Data with the mime type text/html not in this format will not be imported as row data.');\n                    return;\n                }\n                // strip table beginning and ending off, then split at rows\n                clipData = clipData.substring(clipData.indexOf('<table><tr>') + 11, clipData.length - 13).split('</tr><tr>');\n                // ditch any headers on the table\n                clipData = clipData.filter(function (row) {\n                    return !/^<th>|^<thead>/.test(row);\n                });\n            } else {\n                clipData = clipData.split('\\n');\n            }\n            l = clipData.length;\n            clipData.forEach(function (rowData) {\n                yi += 1;\n                var i = self.orders.rows[yi];\n                self.data[i] = normalizeRowData(rowData, self.data[i], x, s, mimeType, i);\n            });\n            self.selections = sel;\n            return l;\n        };\n        self.getNextVisibleColumnIndex = function (visibleColumnIndex) {\n            var x, s = self.getVisibleSchema();\n            for (x = 0; x < s.length; x += 1) {\n                if (s[x].columnIndex === visibleColumnIndex) {\n                    return s[x + 1].columnIndex;\n                }\n            }\n            return -1;\n        };\n        self.getVisibleColumnIndexOf = function (columnIndex) {\n            var x, s = self.getVisibleSchema();\n            for (x = 0; x < s.length; x += 1) {\n                if (s[x].columnIndex === columnIndex) {\n                    return x;\n                }\n            }\n            return -1;\n        };\n        self.paste = function (e) {\n            var d;\n            function getItem(dti) {\n                var type = dti.type;\n                dti.getAsString(function (s) {\n                    self.pasteItem(s, self.getVisibleColumnIndexOf(self.activeCell.columnIndex), self.activeCell.rowIndex, type);\n                    self.draw();\n                });\n            }\n            d = Array.prototype.filter.call(e.clipboardData.items, function (dti) {\n                return dti.type === 'text/html';\n            })[0] || Array.prototype.filter(function (dti) {\n                return dti.type === 'text/csv';\n            })[0] || Array.prototype.filter(function (dti) {\n                return dti.type === 'text/plain';\n            })[0];\n            if (!d) {\n                console.warn('Cannot find supported clipboard data type.  Supported types are text/html, text/csv, text/plain.');\n                return;\n            }\n            getItem(d);\n        };\n        self.cut = function (e) {\n            self.copy(e);\n            self.forEachSelectedCell(function (data, index, colName) {\n                data[index][colName] = '';\n            });\n        };\n        self.copy = function (e) {\n            if (self.dispatchEvent('copy', {NativeEvent: e})) { return; }\n            if (!self.hasFocus || !e.clipboardData) { return; }\n            var t,\n                d,\n                data = (self.data || []),\n                tableRows = [],\n                textRows = [],\n                outputHeaders = {},\n                outputHeaderKeys,\n                sData = self.getSelectedData(),\n                s = self.getSchema();\n            function htmlSafe(v) {\n                return v.replace(/</g, '&lt;').replace(/>/g, '&gt;');\n            }\n            function fCopyCell(v) {\n                v = v === null || v === undefined ? '' : v;\n                return '<td>' + (typeof v === 'string' ? htmlSafe(v) : v) + '</td>';\n            }\n            function addHeaders(headers, useHtml) {\n                if (!s.length || headers.length < 2) { return ''; }\n                var h = [];\n                if (useHtml) {\n                    h.push('<tr>');\n                }\n                s.forEach(function (column, columnIndex) {\n                    // intentional redefinition of column\n                    column = s[self.orders.columns[columnIndex]];\n                    if (!column.hidden && headers.indexOf(column.name) !== -1) {\n                        var hVal = (column.name || column.title) || '';\n                        if (useHtml) {\n                            h.push('<th>' + htmlSafe(hVal) + '</th>');\n                        } else {\n                            h.push('\"' + hVal.replace(/\"/g, '\"\"') + '\"');\n                        }\n                    }\n                });\n                h.push(useHtml ? '</tr>' : '\\n');\n                return h.join(useHtml ? '' : ',');\n            }\n            function addCellValue(val, trRow, textRow, column) {\n                // escape strings\n                if (val !== null\n                        && val !== false\n                        && val !== undefined\n                        && val.replace) {\n                    trRow.push(fCopyCell(val));\n                    textRow.push('\"' + val.replace(/\"/g, '\"\"') + '\"');\n                    return;\n                }\n                if (val !== undefined) {\n                    textRow.push(val);\n                    trRow.push(fCopyCell(val));\n                    return;\n                }\n                // issue #66\n                textRow.push('');\n                trRow.push('<td>&nbsp;</td>');\n            }\n            if (sData.length > 0) {\n                sData.forEach(function (row) {\n                    var rowKeys = Object.keys(row);\n                    if (row) {\n                        var trRow = [],\n                            textRow = [],\n                            sSorted = [];\n                        // HACK: https://github.com/TonyGermaneri/canvas-datagrid/issues/181\n                        // I can't use sort here or O(1), so hacks\n                        s.forEach(function (column, columnIndex) {\n                            sSorted.push(s[self.orders.columns[columnIndex]]);\n                        });\n                        sSorted.forEach(function (column, columnIndex) {\n                            if (rowKeys.indexOf(column.name) !== -1) {\n                                outputHeaders[column.name] = true;\n                                // escape strings\n                                addCellValue(row[column.name], trRow, textRow, column);\n                            }\n                        });\n                        tableRows.push(trRow.join(''));\n                        textRows.push(textRow.join(','));\n                    }\n                });\n                outputHeaderKeys = Object.keys(outputHeaders);\n                t = addHeaders(outputHeaderKeys) + textRows.join('\\n');\n                d = '<table>' + addHeaders(outputHeaderKeys, true) + '<tr>' + tableRows.join('</tr><tr>') + '</tr></table>';\n                if (outputHeaderKeys.length === 1) {\n                    // if there was only one cell selected, remove the quotes from the string\n                    t = t.substring(1, t.length -1);\n                }\n                e.clipboardData.setData('text/html', d);\n                e.clipboardData.setData('text/plain', t);\n                e.clipboardData.setData('text/csv', t);\n                e.clipboardData.setData('application/json', JSON.stringify(sData));\n                e.preventDefault();\n            }\n        };\n        return;\n    };\n});\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./lib/events.js\n// module id = 4\n// module chunks = 0","/*jslint browser: true, unparam: true, todo: true, plusplus: true*/\n/*globals define: true, MutationObserver: false, requestAnimationFrame: false, performance: false, btoa: false*/\ndefine([], function () {\n    'use strict';\n    return function (self) {\n        var touchTimerMs = 50,\n            debounceTouchMove,\n            touchMoving,\n            touchScrollTimeout;\n        self.scrollAnimation = {};\n        self.touchDelta = {};\n        self.touchAnimateTo = {};\n        self.animationFrames = 0;\n        self.getTouchPos = function (e, touchIndex) {\n            var t = touchIndex ? e.touches[touchIndex] : e.touches[0],\n                rect = self.canvas.getBoundingClientRect(),\n                pos;\n            if (!t) { return; }\n            pos = {\n                x: t.clientX - rect.left,\n                y: t.clientY - rect.top\n            };\n            if (self.isChildGrid) {\n                pos.x -= self.canvasOffsetLeft;\n                pos.y -= self.canvasOffsetTop;\n            }\n            return {\n                x: pos.x,\n                y: pos.y,\n                rect: rect\n            };\n        };\n        // shamelessly stolen from from https://gist.github.com/gre/1650294\n        self.easingFunctions = {\n            linear: function (t) { return t; },\n            easeInQuad: function (t) { return t * t; },\n            easeOutQuad: function (t) { return t * (2 - t); },\n            easeInOutQuad: function (t) { return t < 0.5 ? 2 * t * t : -1 + (4 - 2 * t) * t; },\n            easeInCubic: function (t) { return t * t * t; },\n            easeOutCubic: function (t) { return (--t) * t * t + 1; },\n            easeInOutCubic: function (t) { return t < 0.5 ? 4 * t * t * t : (t - 1) * (2 * t - 2) * (2 * t - 2) + 1; },\n            easeInQuart: function (t) { return t * t * t * t; },\n            easeOutQuart: function (t) { return 1 - (--t) * t * t * t; },\n            easeInOutQuart: function (t) { return t < 0.5 ? 8 * t  * t  * t * t : 1 - 8 * (--t) * t * t * t; },\n            easeInQuint: function (t) { return t * t * t * t * t; },\n            easeOutQuint: function (t) { return 1 + (--t) * t *  t * t * t; },\n            easeInOutQuint: function (t) { return t < 0.5 ? 16 * t * t * t * t * t : 1 + 16 * (--t) * t * t * t * t; }\n        };\n        self.easing = function (t, b, c, d) {\n            return c * self.easingFunctions[self.attributes.touchEasingMethod](t / d) + b;\n        };\n        self.calculatePPSTimed = function () {\n            self.xPPST = -((self.touchDelta.x - self.touchSigmaTimed.x) / (self.touchDelta.t - self.touchSigmaTimed.t));\n            self.yPPST = -((self.touchDelta.y - self.touchSigmaTimed.y) / (self.touchDelta.t - self.touchSigmaTimed.t));\n            self.touchSigmaTimed = {\n                x: self.touchDelta.x,\n                y: self.touchDelta.y,\n                t: performance.now()\n            };\n        };\n        self.calculatePPS = function () {\n            self.xPPS = -((self.touchDelta.x - self.touchSigma.x) / (self.touchDelta.t - self.touchSigma.t));\n            self.yPPS = -((self.touchDelta.y - self.touchSigma.y) / (self.touchDelta.t - self.touchSigma.t));\n            self.touchSigma = {\n                x: self.touchDelta.x,\n                y: self.touchDelta.y,\n                t: performance.now()\n            };\n        };\n        self.touchEndAnimation = function () {\n            if (!self.canvas || !self.scrollBox.scrollTo) { return requestAnimationFrame(self.touchEndAnimation); }\n            var n = performance.now(),\n                d = self.attributes.touchReleaseAnimationDurationMs,\n                t;\n            t = n - self.touchDelta.t;\n            self.animationFrames += 1;\n            self.scrollAnimation.x = self.easing(t, self.touchDelta.scrollLeft, self.touchAnimateTo.x, d);\n            self.scrollAnimation.y = self.easing(t, self.touchDelta.scrollTop, self.touchAnimateTo.y, d);\n            if (t > d || (self.scrollAnimation.y === self.scrollBox.scrollTop\n                    && self.scrollAnimation.x === self.scrollBox.scrollLeft) || self.stopAnimation) {\n                return;\n            }\n            self.scrollBox.scrollTo(self.scrollAnimation.x, self.scrollAnimation.y);\n            requestAnimationFrame(self.touchEndAnimation);\n        };\n        self.touchEditCell = function (cell) {\n            self.beginEditAt(cell.columnIndex, cell.rowIndex);\n        };\n        self.touchCell = function (e) {\n            return function () {\n                clearInterval(self.calculatePPSTimer);\n                var i, pos = self.getTouchPos(e);\n                if (Math.abs(self.touchDelta.x) + Math.abs(self.touchDelta.y) < self.attributes.touchDeadZone) {\n                    i = self.getCellAt(pos.x, pos.y);\n                    if (!i) { return; }\n                    if (self.touchingCell && self.touchingCell.rowIndex === i.rowIndex\n                            && self.touchingCell.columnIndex === i.columnIndex) {\n                        self.touchEditCell(i);\n                        return;\n                    }\n                    if (self.input && self.input.editCell) {\n                        self.endEdit();\n                    }\n                    self.touchingCell = i;\n                    self.selectArea({\n                        top: i.rowIndex,\n                        bottom: i.rowIndex,\n                        left: i.columnIndex,\n                        right: i.columnIndex\n                    });\n                    self.draw(true);\n                }\n            };\n        };\n        self.touchstart = function (e) {\n            if (e.changedTouches[0]) {\n                self.touchStart = self.getTouchPos(e);\n                self.startingCell = self.getCellAt(self.touchStart.x, self.touchStart.y, true);\n            }\n            if (self.dispatchEvent('touchstart', {NativeEvent: e, cell: self.startingCell})) { return; }\n            self.disposeContextMenu();\n            clearInterval(self.calculatePPSTimer);\n            clearTimeout(self.touchContextTimeout);\n            self.touchStartEvent = e;\n            self.stopAnimation = true;\n            self.animationFrames = 0;\n            self.stopPropagation(e);\n            e.preventDefault();\n            if (e.touches.length === 1 && e.changedTouches[0] && !self.zoomAltered) {\n                self.touchLength = 1;\n                self.touchStart = self.touchStart || self.touchStart1;\n                self.touchScrollStart = {\n                    x: self.scrollBox.scrollLeft,\n                    y: self.scrollBox.scrollTop,\n                    t: performance.now()\n                };\n                self.touchDelta = {\n                    x: 0,\n                    y: 0,\n                    scrollLeft: self.scrollBox.scrollLeft,\n                    scrollTop: self.scrollBox.scrollTop,\n                    t: self.touchScrollStart.t\n                };\n                self.touchSigma = {\n                    x: self.touchDelta.x,\n                    y: self.touchDelta.y,\n                    t: self.touchDelta.t\n                };\n                self.touchSigmaTimed = {\n                    x: self.touchDelta.x,\n                    y: self.touchDelta.y,\n                    t: self.touchDelta.t\n                };\n                self.touchContextTimeout = setTimeout(function () {\n                    self.contextmenuEvent(e, self.touchStart);\n                }, self.attributes.touchContextMenuTimeMs);\n                self.calculatePPSTimer = setInterval(self.calculatePPSTimed, touchTimerMs);\n                if (self.startingCell && (self.startingCell.isGrid || ['tree', 'inherit'].indexOf(self.startingCell.context) !== -1)) {\n                    self.hasFocus = false;\n                    return;\n                }\n                self.hasFocus = true;\n                if (self.startingCell.isHeader) {\n                    if (self.startingCell.isRowHeader) {\n                        self.selectArea({\n                            top: self.startingCell.rowIndex,\n                            bottom: self.startingCell.rowIndex,\n                            left: 0,\n                            right: self.getVisibleSchema().length - 1,\n                        });\n                        self.draw(true);\n                    } else if (self.startingCell.isColumnHeader) {\n                        if (self.attributes.columnHeaderClickBehavior === 'sort') {\n                            if (self.orderBy === self.startingCell.header.name) {\n                                self.orderDirection = self.orderDirection === 'asc' ? 'desc' : 'asc';\n                            } else {\n                                self.orderDirection = 'asc';\n                            }\n                            self.order(self.startingCell.header.name, self.orderDirection);\n                        }\n                        if (self.attributes.columnHeaderClickBehavior === 'select') {\n                            self.selectArea({\n                                top: 0,\n                                bottom: self.data.length - 1,\n                                left: self.startingCell.columnIndex,\n                                right: self.startingCell.columnIndex,\n                            });\n                            self.draw(true);\n                        }\n                    }\n                    self.touchEndEvents(e);\n                    return;\n                }\n            }\n            if (self.zoomAltered) { return; }\n            document.body.addEventListener('touchmove', self.touchmove, {passive: false});\n            document.body.addEventListener('touchend', self.touchend, false);\n            document.body.addEventListener('touchcancel', self.touchcancel, false);\n            self.draw(true);\n        };\n        self.touchSelect = function (cell, handleType) {\n            if (cell.rowIndex === undefined || cell.columnIndex === undefined) { return; }\n            self.touchSelecting = true;\n            var bounds = self.getSelectionBounds();\n            if (handleType === 'selection-handle-bl'\n                    && cell.rowIndex >= bounds.top\n                    && cell.columnIndex <= bounds.right) {\n                bounds.bottom = cell.rowIndex;\n                bounds.left = cell.columnIndex;\n            } else if (handleType === 'selection-handle-tl'\n                    && cell.rowIndex <= bounds.bottom\n                    && cell.columnIndex <= bounds.right) {\n                bounds.top = cell.rowIndex;\n                bounds.left = cell.columnIndex;\n            } else if (handleType === 'selection-handle-tr'\n                    && cell.rowIndex <= bounds.bottom\n                    && cell.columnIndex >= bounds.left) {\n                bounds.top = cell.rowIndex;\n                bounds.right = cell.columnIndex;\n            } else if (handleType === 'selection-handle-br'\n                    && cell.rowIndex >= bounds.top\n                    && cell.columnIndex >= bounds.left) {\n                bounds.bottom = cell.rowIndex;\n                bounds.right = cell.columnIndex;\n            }\n            if (self.attributes.selectionMode === 'row' || cell.rowIndex === -1) {\n                bounds.left = 0;\n                bounds.right = self.getSchema().length - 1;\n            } else {\n                bounds.left = Math.max(0, bounds.left);\n            }\n            self.selectArea(bounds);\n            self.draw(true);\n        };\n        function touchMove(e) {\n            var ch, rw, rScrollZone, lScrollZone, bScrollZone, tScrollZone, sbw, t1, t2;\n            if (self.dispatchEvent('beforetouchmove', {NativeEvent: e})) { return; }\n            clearTimeout(touchScrollTimeout);\n            if (e.changedTouches[0]) {\n                self.touchPosition = self.getTouchPos(e);\n            }\n            if (e.changedTouches[1]) {\n                self.touchPosition1 = self.getTouchPos(e, 1);\n            }\n            if (Math.abs(self.touchDelta.x) + Math.abs(self.touchDelta.y) > self.attributes.touchDeadZone) {\n                clearTimeout(self.touchContextTimeout);\n            }\n            if (e.touches.length === 2 && self.touchPosition && self.touchPosition1) {\n                t1 = self.touchPosition.y;\n                t2 = self.touchPosition1.y;\n                if (!self.zoomDeltaStart) {\n                    self.zoomDeltaStart = Math.abs(t1 - t2);\n                    self.startScale = self.scale;\n                }\n                self.touchLength = 2;\n                self.scaleDelta = self.zoomDeltaStart - Math.abs(t1 - t2);\n                self.scale = self.startScale - (self.scaleDelta * self.attributes.touchZoomSensitivity);\n                self.scale = Math.min(Math.max(self.scale, self.attributes.touchZoomMin), self.attributes.touchZoomMax);\n                self.zoomAltered = true;\n                self.resize(true);\n                self.resizeChildGrids();\n                return;\n            }\n            if (self.zoomAltered) { return; }\n            self.touchLength = 1;\n            self.touchPosition = self.touchPosition || self.touchPosition1;\n            ch = self.getColumnHeaderCellHeight();\n            rw = self.getRowHeaderCellWidth();\n            rScrollZone = self.width - self.style.scrollBarWidth - self.touchPosition.x < self.attributes.selectionScrollZone;\n            lScrollZone = self.touchPosition.x - rw < self.attributes.selectionScrollZone;\n            bScrollZone = self.height - self.style.scrollBarWidth - self.touchPosition.y < self.attributes.selectionScrollZone;\n            tScrollZone = self.touchPosition.y - ch < self.attributes.selectionScrollZone;\n            sbw = self.style.scrollBarWidth;\n            function touchScroll() {\n                var x = self.scrollBox.scrollLeft,\n                    y = self.scrollBox.scrollTop;\n                x += (rScrollZone ? self.attributes.selectionScrollIncrement : 0);\n                y += (bScrollZone ? self.attributes.selectionScrollIncrement : 0);\n                y -= (tScrollZone ? self.attributes.selectionScrollIncrement : 0);\n                x -= (lScrollZone ? self.attributes.selectionScrollIncrement : 0);\n                self.scrollBox.scrollTo(x, y);\n                touchScrollTimeout = setTimeout(touchScroll, self.attributes.scrollRepeatRate);\n            }\n            e.stopPropagation();\n            self.touchDelta = {\n                x: self.touchPosition.x - self.touchStart.x,\n                y: self.touchPosition.y - self.touchStart.y,\n                scrollLeft: self.scrollBox.scrollLeft,\n                scrollTop: self.scrollBox.scrollTop,\n                t: performance.now()\n            };\n            self.currentCell = self.getCellAt(self.touchPosition.x, self.touchPosition.y);\n            self.dispatchEvent('touchmove', {NativeEvent: e, cell: self.currentCell});\n            self.calculatePPS();\n            self.touchDuration = performance.now() - self.touchScrollStart.t;\n            self.stopAnimation = true;\n            self.animationFrames = 0;\n            if (self.touchSelecting && (rScrollZone || lScrollZone || tScrollZone || bScrollZone)) {\n                touchScroll();\n            }\n            if (/vertical-scroll-/.test(self.startingCell.style)) {\n                self.scrollBox.scrollTop = self.scrollBox.scrollHeight\n                    * ((self.touchPosition.y - ch - sbw) / (self.scrollBox.height - sbw - ch));\n                return;\n            }\n            if (/horizontal-scroll-/.test(self.startingCell.style)) {\n                self.scrollBox.scrollLeft = self.scrollBox.scrollWidth\n                    * ((self.touchPosition.x - rw - sbw) / (self.scrollBox.width - sbw - rw));\n                return;\n            }\n            if (/selection-handle-/.test(self.startingCell.style)) {\n                self.touchSelect(self.currentCell, self.startingCell.style);\n                return;\n            }\n            self.scrollBox.scrollTo(self.touchScrollStart.x - self.touchDelta.x,\n                self.touchScrollStart.y - self.touchDelta.y);\n        };\n        self.touchmove = function (e) {\n            if (touchMoving) {\n                return;\n            }\n            requestAnimationFrame(function () {\n                touchMoving = true;\n                touchMove(e);\n                touchMoving = false;\n            });\n        };\n        self.touchEndEvents = function (e) {\n            self.zoomDeltaStart = undefined;\n            self.touchSelecting = false;\n            clearInterval(self.touchScrollTimeout);\n            clearInterval(self.touchContextTimeout);\n            clearInterval(self.calculatePPSTimer);\n            e.stopPropagation();\n            document.body.removeEventListener('touchmove', self.touchmove, {passive: false});\n            document.body.removeEventListener('touchend', self.touchend, false);\n            document.body.removeEventListener('touchcancel', self.touchcancel, false);\n        };\n        self.touchend = function (e) {\n            if (self.dispatchEvent('touchend', {NativeEvent: e, cell: self.currentCell})) { return; }\n            self.zoomDeltaStart = undefined;\n            if (e.changedTouches[0]) {\n                self.touchPosition = undefined;\n            }\n            if (e.changedTouches[1]) {\n                self.touchPosition1 = undefined;\n            }\n            if (self.zoomAltered) {\n                if (e.touches.length === 0) {\n                    self.zoomAltered = false;\n                }\n                return;\n            }\n            var dz = Math.abs(self.touchDelta.x) + Math.abs(self.touchDelta.y) < self.attributes.touchDeadZone;\n            if (isNaN(self.xPPS)) {\n                self.xPPS = 0;\n            }\n            if (isNaN(self.yPPS)) {\n                self.yPPS = 0;\n            }\n            if (isNaN(self.xPPST)) {\n                self.xPPST = 0;\n            }\n            if (isNaN(self.yPPST)) {\n                self.yPPST = 0;\n            }\n            self.touchAnimateTo.x = self.xPPS * self.attributes.touchReleaseAcceleration;\n            self.touchAnimateTo.y = self.yPPS * self.attributes.touchReleaseAcceleration;\n            self.calculatePPSTimed();\n            if (dz && !self.contextMenu) {\n                self.touchCell(self.touchStartEvent)();\n            } else if (self.animationFrames === 0\n                    && (Math.abs(self.xPPST) > self.attributes.scrollAnimationPPSThreshold\n                        || Math.abs(self.yPPST) > self.attributes.scrollAnimationPPSThreshold)\n                    && !/-scroll-/.test(self.startingCell.style)\n                    && !dz) {\n                self.stopAnimation = false;\n                self.touchEndAnimation();\n            }\n            self.touchEndEvents(e);\n        };\n        self.touchcancel = function (e) {\n            if (self.dispatchEvent('touchcancel', {NativeEvent: e, cell: self.currentCell})) { return; }\n            self.touchEndEvents(e);\n        };\n    };\n});\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./lib/touch.js\n// module id = 5\n// module chunks = 0","/*jslint browser: true, unparam: true, todo: true*/\n/*globals HTMLElement: false, Reflect: false, define: true, MutationObserver: false, requestAnimationFrame: false, performance: false, btoa: false*/\ndefine([], function () {\n    'use strict';\n    return function (self, ctor) {\n        self.scale = 1;\n        self.orders = {\n            rows: [],\n            columns: []\n        };\n        self.appliedInlineStyles = {};\n        self.cellGridAttributes = {};\n        self.treeGridAttributes = {};\n        self.visibleRowHeights = [];\n        self.hasFocus = false;\n        self.activeCell = {\n            columnIndex: 0,\n            rowIndex: 0\n        };\n        self.innerHTML = '';\n        self.storageName = 'canvasDataGrid';\n        self.invalidSearchExpClass = 'canvas-datagrid-invalid-search-regExp';\n        self.localStyleLibraryStorageKey = 'canvas-datagrid-user-style-library';\n        self.dataType = 'application/x-canvas-datagrid';\n        self.orderBy = null;\n        self.orderDirection = 'asc';\n        self.columnFilters = {};\n        self.filters = {};\n        self.frozenRow = 0;\n        self.frozenColumn = 0;\n        self.ellipsisCache = {};\n        self.scrollCache = { x: [], y: [] };\n        self.scrollBox = {};\n        self.visibleRows = [];\n        self.sizes = {\n            rows: {},\n            columns: {},\n            trees: {}\n        };\n        self.currentFilter = function () {\n            return true;\n        };\n        self.selections = [];\n        self.hovers = {};\n        self.attributes = {};\n        self.style = {};\n        self.formatters = {};\n        self.sorters = {};\n        self.parsers = {};\n        self.schemaHashes = {};\n        self.events = {};\n        self.changes = [];\n        self.scrollIndexTop = 0;\n        self.scrollPixelTop = 0;\n        self.scrollIndexLeft = 0;\n        self.scrollPixelLeft = 0;\n        self.childGrids = {};\n        self.openChildren = {};\n        self.scrollModes = [\n            'vertical-scroll-box',\n            'vertical-scroll-top',\n            'vertical-scroll-bottom',\n            'horizontal-scroll-box',\n            'horizontal-scroll-right',\n            'horizontal-scroll-left'\n        ];\n        self.componentL1Events = {};\n        self.eventNames = ['afterdraw', 'afterrendercell', 'attributechanged', 'beforebeginedit',\n            'beforecreatecellgrid', 'beforedraw', 'beforeendedit', 'beforerendercell', 'beforerendercellgrid',\n            'beginedit', 'cellmouseout', 'cellmouseover', 'click', 'collapsetree', 'contextmenu', 'copy',\n            'datachanged', 'dblclick', 'endedit', 'expandtree', 'formatcellvalue', 'keydown', 'keypress',\n            'keyup', 'mousedown', 'mousemove', 'mouseup', 'newrow', 'ordercolumn', 'rendercell', 'rendercellgrid',\n            'renderorderbyarrow', 'rendertext', 'rendertreearrow', 'reorder', 'reordering', 'resize',\n            'resizecolumn', 'resizerow', 'schemachanged', 'scroll', 'selectionchanged', 'stylechanged',\n            'touchcancel', 'touchend', 'touchmove', 'touchstart', 'wheel'];\n        self.mouse = { x: 0, y: 0};\n        self.getSelectedData = function (expandToRow) {\n            var d = [], s = self.getSchema(), l = self.data.length;\n            if (l === 0) { return []; }\n            self.selections.forEach(function (row, index) {\n                if (!row) { return; }\n                if (index === l) { return; }\n                if (row.length === 0) {\n                    d[index] = null;\n                    return;\n                }\n                d[index] = {};\n                row.forEach(function (col) {\n                    var orderedIndex;\n                    if (col === -1 || !s[col]) { return; }\n                    orderedIndex = self.orders.columns[col];\n                    if (!expandToRow && s[orderedIndex].hidden) { return; }\n                    if (self.data[index]) {\n                        d[index][s[orderedIndex].name] = self.data[index][s[orderedIndex].name];\n                    }\n                });\n            });\n            return d;\n        };\n        self.getColumnHeaderCellHeight = function () {\n            if (!self.attributes.showColumnHeaders) { return 0; }\n            return ((self.sizes.rows[-1] || self.style.columnHeaderCellHeight) * self.scale);\n        };\n        self.getRowHeaderCellWidth = function () {\n            if (!self.attributes.showRowHeaders) { return 0; }\n            return (self.sizes.columns[-1] || self.style.rowHeaderCellWidth) * self.scale;\n        };\n        self.setStorageData = function () {\n            if (!self.attributes.saveAppearance || !self.attributes.name) { return; }\n            var visibility = {};\n            self.getSchema().forEach(function (column) {\n                visibility[column.name] = !column.hidden;\n            });\n            localStorage.setItem(self.storageName + '-' + self.attributes.name, JSON.stringify({\n                sizes: {\n                    rows: self.sizes.rows,\n                    columns: self.sizes.columns\n                },\n                orders: {\n                    rows: self.orders.rows,\n                    columns: self.orders.columns\n                },\n                orderBy: self.orderBy,\n                orderDirection: self.orderDirection,\n                visibility: visibility\n            }));\n        };\n        self.getSchema = function () {\n            return self.schema || self.tempSchema || [];\n        };\n        function fillArray(low, high) {\n            var i = [], x;\n            for (x = low; x <= high; x += 1) {\n                i[x] = x;\n            }\n            return i;\n        }\n        self.createColumnOrders = function () {\n            var s = self.getSchema();\n            self.orders.columns = fillArray(0, s.length - 1);\n        };\n        self.createRowOrders = function () {\n            self.orders.rows = fillArray(0, self.data.length - 1);\n        };\n        self.getVisibleSchema = function () {\n            return self.getSchema().filter(function (col) {\n                return !col.hidden;\n            });\n        };\n        self.applyDefaultValue = function (row, header) {\n            var d = header.defaultValue || '';\n            if (typeof d === 'function') {\n                d = d.apply(self.intf, [header]);\n            }\n            row[header.name] = d;\n        };\n        self.createNewRowData = function () {\n            self.newRow = {};\n            self.getSchema().forEach(function forEachHeader(header) {\n                self.applyDefaultValue(self.newRow, header);\n            });\n        };\n        self.getSchemaNameHash = function (key) {\n            var n = 0;\n            while (self.schemaHashes[key]) {\n                n += 1;\n                key = key + n;\n            }\n            return key;\n        };\n        self.filter = function (type) {\n            var f = self.filters[type];\n            if (!f && type !== undefined) {\n                console.warn('Cannot find filter for type %s, falling back to substring match.', type);\n                f = self.filters.string;\n            }\n            return f;\n        };\n        self.getBestGuessDataType = function (columnName, data) {\n            var t, x, l = data.length;\n            for (x = 0; x < l; x += 1) {\n                if (data[x] !== undefined && data[x] !== null && [null, undefined].indexOf(data[x][columnName]) !== -1) {\n                    t = typeof data[x];\n                    return t === 'object' ? 'string' : t;\n                }\n            }\n            return 'string';\n        };\n        self.drawChildGrids = function () {\n            Object.keys(self.childGrids).forEach(function (gridKey) {\n                self.childGrids[gridKey].draw();\n            });\n        };\n        self.resizeChildGrids = function () {\n            Object.keys(self.childGrids).forEach(function (gridKey) {\n                self.childGrids[gridKey].resize();\n            });\n        };\n        self.autoScrollZone = function (e, x, y, ctrl) {\n            var setTimer,\n                rowHeaderCellWidth = self.getRowHeaderCellWidth(),\n                columnHeaderCellHeight = self.getColumnHeaderCellHeight();\n            if (y !== -1) {\n                if (x > self.width - self.attributes.selectionScrollZone && x < self.width) {\n                    self.scrollBox.scrollLeft += self.attributes.selectionScrollIncrement;\n                    setTimer = true;\n                }\n                if (x - self.attributes.selectionScrollZone - rowHeaderCellWidth < 0) {\n                    self.scrollBox.scrollLeft -= self.attributes.selectionScrollIncrement;\n                    setTimer = true;\n                }\n            }\n            if (y !== -1) {\n                if (y > self.height - self.attributes.selectionScrollZone && y < self.height) {\n                    self.scrollBox.scrollTop += self.attributes.selectionScrollIncrement;\n                    setTimer = true;\n                }\n                if (y - self.attributes.selectionScrollZone - columnHeaderCellHeight < 0) {\n                    self.scrollBox.scrollTop -= self.attributes.selectionScrollIncrement;\n                    setTimer = true;\n                }\n            }\n            if (setTimer && !ctrl && self.currentCell && self.currentCell.columnIndex !== -1) {\n                self.scrollTimer = setTimeout(self.mousemove, self.attributes.scrollRepeatRate, e);\n            }\n        };\n        self.refreshFromOrigialData = function () {\n            self.data = self.originalData.filter(function (row) {\n                return true;\n            });\n        };\n        self.validateColumn = function (c, s) {\n            if (!c.name) {\n                throw new Error('A column must contain at least a name.');\n            }\n            if (s.filter(function (i) { return i.name === c.name; }).length > 0) {\n                throw new Error('A column with the name '\n                    + c.name + ' already exists and cannot be added again.');\n            }\n            return true;\n        };\n        self.setDefaults = function (obj1, obj2, key, def) {\n            obj1[key] = obj2[key] === undefined ? def : obj2[key];\n        };\n        self.setAttributes = function () {\n            self.defaults.attributes.forEach(function eachAttribute(i) {\n                self.setDefaults(self.attributes, self.args, i[0], i[1]);\n            });\n        };\n        self.setStyle = function () {\n            self.defaults.styles.forEach(function eachStyle(i) {\n                self.setDefaults(self.style, self.args.style || {}, i[0], i[1]);\n            });\n        };\n        self.autosize = function (colName) {\n            self.getVisibleSchema().forEach(function (col, colIndex) {\n                if (col.name === colName || colName === undefined) {\n                    self.sizes.columns[colIndex]\n                        = Math.max(self.findColumnMaxTextLength(col.name), self.style.minColumnWidth);\n                }\n            });\n            self.sizes.columns[-1] = self.findColumnMaxTextLength('cornerCell');\n        };\n        self.dispose = function () {\n            if (!self.isChildGrid && self.canvas && self.canvas.parentNode) {\n                self.canvas.parentNode.removeChild(self.canvas);\n            }\n            if(!self.isChildGrid) {\n                document.body.removeChild(self.controlInput)\n            }\n            self.eventParent.removeEventListener('mouseup', self.mouseup, false);\n            self.eventParent.removeEventListener('mousedown', self.mousedown, false);\n            self.eventParent.removeEventListener('dblclick', self.dblclick, false);\n            self.eventParent.removeEventListener('click', self.click, false);\n            self.eventParent.removeEventListener('mousemove', self.mousemove);\n            self.eventParent.removeEventListener('wheel', self.scrollWheel, false);\n            self.canvas.removeEventListener('contextmenu', self.contextmenu, false);\n            self.canvas.removeEventListener('copy', self.copy);\n            self.controlInput.removeEventListener('copy', self.copy);\n            self.controlInput.removeEventListener('cut', self.cut);\n            self.controlInput.removeEventListener('paste', self.paste);\n            self.controlInput.removeEventListener('keypress', self.keypress, false);\n            self.controlInput.removeEventListener('keyup', self.keyup, false);\n            self.controlInput.removeEventListener('keydown', self.keydown, false);\n            window.removeEventListener('resize', self.resize);\n            if (self.observer && self.observer.disconnect) {\n                self.observer.disconnect();\n            }\n        };\n        self.tryLoadStoredSettings = function () {\n            var s;\n            self.reloadStoredValues();\n            if (self.storedSettings\n                    && typeof self.storedSettings.orders === 'object'\n                    && self.storedSettings.orders !== null) {\n                if (self.storedSettings.orders.rows.length >= (self.data || []).length) {\n                    self.orders.rows = self.storedSettings.orders.rows;\n                }\n                s = self.getSchema();\n                if (self.storedSettings.orders.columns.length === s.length) {\n                    self.orders.columns = self.storedSettings.orders.columns;\n                }\n                self.orderBy = self.storedSettings.orderBy === undefined\n                    ? s[0].name : self.storedSettings.orderBy;\n                self.orderDirection = self.storedSettings.orderDirection === undefined\n                    ? 'asc' : self.storedSettings.orderDirection;\n                if (self.storedSettings.orderBy !== undefined && self.getHeaderByName(self.orderBy) && self.orderDirection) {\n                    self.order(self.orderBy, self.orderDirection);\n                }\n            }\n        };\n        self.getDomRoot = function () {\n            return self.shadowRoot ? self.shadowRoot.host : self.parentNode;\n        };\n        self.getFontName = function (fontStyle) {\n            return fontStyle.replace(/\\d+\\.?\\d*px/, '');\n        };\n        self.getFontHeight = function (fontStyle) {\n            return parseFloat(fontStyle, 10);\n        };\n        self.parseStyleValue = function (key) {\n            if (/Font/.test(key)) {\n                self.style[key + 'Height'] = self.getFontHeight(self.style[key]);\n                self.style[key + 'Name'] = self.getFontName(self.style[key]);\n                return;\n            }\n            // when inheriting styles from already instantiated grids, don't parse already parsed values.\n            if (key === 'moveOverlayBorderSegments' && typeof self.style[key] === 'string') {\n                self.style[key] = self.style[key].split(',')\n                    .map(function (i) { return parseInt(i, 10); });\n            }\n        };\n        self.initProp = function (propName) {\n            if (!self.args[propName]) { return; }\n            Object.keys(self.args[propName]).forEach(function (key) {\n                self[propName][key] = self.args[propName][key];\n            });\n        };\n        self.getStyleProperty = function (key) {\n            if (self.styleKeys.indexOf(key) === -1) {\n                return self.parentNodeStyle[key];\n            }\n            return self.style[key];\n        };\n        self.setStyleProperty = function (key, value, supressDrawAndEvent) {\n            var isDim = ['height', 'width', 'minHeight', 'minWidth', 'maxHeight', 'maxWidth'].indexOf(key) !== -1;\n            if (self.styleKeys.indexOf(key) === -1) {\n                self.parentNodeStyle[key] = value;\n            } else {\n                if (/-/.test(key)) {\n                    key = self.dehyphenateProperty(key);\n                }\n                self.style[key] = value;\n                self.parseStyleValue(key);\n            }\n            if (isDim) {\n                self.resize();\n            }\n            if (!supressDrawAndEvent) {\n                self.draw(true);\n                self.dispatchEvent('stylechanged', {name: 'style', value: value});\n            }\n        };\n        self.reloadStoredValues = function () {\n            if (self.attributes.name && self.attributes.saveAppearance) {\n                try {\n                    self.storedSettings = localStorage.getItem(self.storageName + '-' + self.attributes.name);\n                } catch (e) {\n                    console.warn(\"Error loading stored values. \" + e.message);\n                    self.storedSettings = undefined;\n                }\n                if (self.storedSettings) {\n                    try {\n                        self.storedSettings = JSON.parse(self.storedSettings);\n                    } catch (e) {\n                        console.warn('could not read settings from localStore', e);\n                        self.storedSettings = undefined;\n                    }\n                }\n                if (self.storedSettings) {\n                    if (typeof self.storedSettings.sizes === 'object'\n                            && self.storedSettings.sizes !== null) {\n                        self.sizes.rows = self.storedSettings.sizes.rows;\n                        self.sizes.columns = self.storedSettings.sizes.columns;\n                        ['trees', 'columns', 'rows'].forEach(function (i) {\n                            if (!self.sizes[i]) {\n                                self.sizes[i] = {};\n                            }\n                        });\n                    }\n                    if (typeof self.storedSettings.visibility === 'object') {\n                        self.getSchema().forEach(function (column) {\n                            if (self.storedSettings.visibility && self.storedSettings.visibility[column.name] !== undefined) {\n                                column.hidden = !self.storedSettings.visibility[column.name];\n                            }\n                        });\n                    }\n                }\n            }\n        };\n        self.init = function () {\n            if (self.initialized) { return; }\n            function addStyleKeyIfNoneExists(key) {\n                if (self.styleKeys.indexOf(key) === -1) {\n                    self.styleKeys.push(key);\n                }\n            }\n            var publicStyleKeyIntf = {};\n            self.setAttributes();\n            self.setStyle();\n            self.initScrollBox();\n            self.setDom();\n            self.nodeType = 'canvas-datagrid';\n            self.ie = /Trident/.test(window.navigator.userAgent);\n            self.edge = /Edge/.test(window.navigator.userAgent);\n            self.webKit = /WebKit/.test(window.navigator.userAgent);\n            self.moz = /Gecko/.test(window.navigator.userAgent);\n            self.mobile = /Mobile/i.test(window.navigator.userAgent);\n            self.cursorGrab = 'grab';\n            self.cursorGrabing = 'grabbing';\n            self.cursorGrab = self.webKit ? '-webkit-grab' : self.cursorGrab;\n            self.cursorGrabing = self.moz ? '-webkit-grabbing' : self.cursorGrabbing;\n            self.pointerLockPosition = {x: 0, y: 0};\n            Object.keys(self.style).forEach(self.parseStyleValue);\n            self.intf.moveSelection = self.moveSelection;\n            self.intf.moveTo = self.moveTo;\n            self.intf.addEventListener = self.addEventListener;\n            self.intf.removeEventListener = self.removeEventListener;\n            self.intf.dispatchEvent = self.dispatchEvent;\n            /**\n             * Releases grid resources and removes grid elements.\n             * @memberof canvasDatagrid\n             * @name dispose\n             * @method\n             */\n            self.intf.dispose = self.dispose;\n            /**\n             * Appends the grid to another element later.  Not implemented.\n             * @memberof canvasDatagrid\n             * @name appendTo\n             * @method\n             * @param {number} el The element to append the grid to.\n             */\n            self.intf.appendTo = self.appendTo;\n            self.intf.getVisibleCellByIndex = self.getVisibleCellByIndex;\n            self.intf.filters = self.filters;\n            self.intf.sorters = self.sorters;\n            self.intf.autosize = self.autosize;\n            self.intf.beginEditAt = self.beginEditAt;\n            self.intf.endEdit = self.endEdit;\n            self.intf.setActiveCell = self.setActiveCell;\n            self.intf.forEachSelectedCell = self.forEachSelectedCell;\n            self.intf.scrollIntoView = self.scrollIntoView;\n            self.intf.clearChangeLog = self.clearChangeLog;\n            self.intf.gotoCell = self.gotoCell;\n            self.intf.gotoRow = self.gotoRow;\n            self.intf.getHeaderByName = self.getHeaderByName;\n            self.intf.findColumnScrollLeft = self.findColumnScrollLeft;\n            self.intf.findRowScrollTop = self.findRowScrollTop;\n            self.intf.fitColumnToValues = self.fitColumnToValues;\n            self.intf.findColumnMaxTextLength = self.findColumnMaxTextLength;\n            self.intf.disposeContextMenu = self.disposeContextMenu;\n            self.intf.getCellAt = self.getCellAt;\n            self.intf.isCellVisible = self.isCellVisible;\n            self.intf.isRowVisible = self.isRowVisible;\n            self.intf.isColumnVisible = self.isColumnVisible;\n            self.intf.order = self.order;\n            self.intf.draw = self.draw;\n            self.intf.isComponent = self.isComponent;\n            self.intf.selectArea = self.selectArea;\n            self.intf.clipElement = self.clipElement;\n            self.intf.getSchemaFromData = self.getSchemaFromData;\n            self.intf.setFilter = self.setFilter;\n            self.intf.selectRow = self.selectRow;\n            self.intf.parentGrid = self.parentGrid;\n            self.intf.toggleTree = self.toggleTree;\n            self.intf.expandTree = self.expandTree;\n            self.intf.collapseTree = self.collapseTree;\n            self.intf.canvas = self.canvas;\n            self.intf.context = self.ctx;\n            self.intf.insertRow = self.insertRow;\n            self.intf.deleteRow = self.deleteRow;\n            self.intf.addRow = self.addRow;\n            self.intf.insertColumn = self.insertColumn;\n            self.intf.deleteColumn = self.deleteColumn;\n            self.intf.addColumn = self.addColumn;\n            self.intf.getClippingRect = self.getClippingRect;\n            self.intf.setRowHeight = self.setRowHeight;\n            self.intf.setColumnWidth = self.setColumnWidth;\n            self.intf.resetColumnWidths = self.resetColumnWidths;\n            self.intf.resetRowHeights = self.resetRowHeights;\n            self.intf.resize = self.resize;\n            self.intf.selectColumn = self.selectColumn;\n            self.intf.selectRow = self.selectRow;\n            self.intf.selectAll = self.selectAll;\n            self.intf.selectNone = self.selectNone;\n            self.intf.drawChildGrids = self.drawChildGrids;\n            self.intf.assertPxColor = self.assertPxColor;\n            self.intf.clearPxColorAssertions = self.clearPxColorAssertions;\n            self.intf.integerToAlpha = self.integerToAlpha;\n            self.intf.copy = self.copy;\n            self.intf.setStyleProperty = self.setStyleProperty;\n            Object.defineProperty(self.intf, 'defaults', {\n                get: function () {\n                    return {\n                        styles: self.defaults.styles.reduce(function (a, i) { a[i[0]] = i[1]; return a; }, {}),\n                        attributes: self.defaults.attributes.reduce(function (a, i) { a[i[0]] = i[1]; return a; }, {})\n                    };\n                }\n            });\n            self.styleKeys = Object.keys(self.intf.defaults.styles);\n            self.styleKeys.map(function (i) { return self.hyphenateProperty(i, false); }).forEach(addStyleKeyIfNoneExists);\n            self.styleKeys.map(function (i) { return self.hyphenateProperty(i, true); }).forEach(addStyleKeyIfNoneExists);\n            self.DOMStyles = window.getComputedStyle(document.body, null);\n            self.styleKeys.concat(Object.keys(self.DOMStyles)).forEach(function (key) {\n                // unless this line is here, Object.keys() will not work on <instance>.style\n                publicStyleKeyIntf[key] = undefined;\n                Object.defineProperty(publicStyleKeyIntf, key, {\n                    get: function () {\n                        return self.getStyleProperty(key);\n                    },\n                    set: function (value) {\n                        if (self.initialized) {\n                            self.appliedInlineStyles[key] = value;\n                        }\n                        self.setStyleProperty(key, value);\n                    }\n                });\n            });\n            Object.defineProperty(self.intf, 'shadowRoot', {\n                get: function () {\n                    return self.shadowRoot;\n                }\n            });\n            Object.defineProperty(self.intf, 'activeCell', {\n                get: function () {\n                    return self.activeCell;\n                }\n            });\n            Object.defineProperty(self.intf, 'hasFocus', {\n                get: function () {\n                    return self.hasFocus;\n                }\n            });\n            Object.defineProperty(self.intf, 'style', {\n                get: function () {\n                    return publicStyleKeyIntf;\n                },\n                set: function (valueObject) {\n                    Object.keys(valueObject).forEach(function (key) {\n                        self.setStyleProperty(key, valueObject[key], true);\n                    });\n                    self.draw(true);\n                    self.dispatchEvent('stylechanged', {name: 'style', value: valueObject});\n                }\n            });\n            Object.defineProperty(self.intf, 'attributes', { value: {}});\n            Object.keys(self.attributes).forEach(function (key) {\n                Object.defineProperty(self.intf.attributes, key, {\n                    get: function () {\n                        return self.attributes[key];\n                    },\n                    set: function (value) {\n                        self.attributes[key] = value;\n                        if (key === 'name') {\n                            self.tryLoadStoredSettings();\n                        }\n                        self.draw(true);\n                        self.dispatchEvent('attributechanged', {name: key, value: value[key]});\n                    }\n                });\n            });\n            self.filters.string = function (value, filterFor) {\n                value = String(value);\n                var filterRegExp,\n                    regEnd = /\\/(i|g|m)*$/,\n                    pattern = regEnd.exec(filterFor),\n                    flags = pattern ? pattern[0].substring(1) : '',\n                    flagLength = flags.length;\n                self.invalidFilterRegEx = undefined;\n                if (filterFor.substring(0, 1) === '/' && pattern) {\n                    try {\n                        filterRegExp = new RegExp(filterFor.substring(1, filterFor.length - (flagLength + 1)), flags);\n                    } catch (e) {\n                        self.invalidFilterRegEx = e;\n                        return;\n                    }\n                    return filterRegExp.test(value);\n                }\n                return value.toString ? value.toString().toLocaleUpperCase()\n                    .indexOf(filterFor.toLocaleUpperCase()) !== -1 : false;\n            };\n            self.filters.number = function (value, filterFor) {\n                if (!filterFor) { return true; }\n                return value === filterFor;\n            };\n            ['formatters', 'filters', 'sorters'].forEach(self.initProp);\n            self.applyComponentStyle(false, self.intf);\n            self.reloadStoredValues();\n            if (self.args.data) {\n                self.intf.data = self.args.data;\n            }\n            if (self.intf.innerText || self.intf.textContent) {\n                if (self.intf.dataType === 'application/x-canvas-datagrid') {\n                    self.intf.dataType = 'application/json+x-canvas-datagrid';\n                }\n                self.intf.data = self.intf.innerText || self.intf.textContent;\n            }\n            if (self.args.schema) {\n                self.intf.schema = self.args.schema;\n            }\n            if (self.isChildGrid || !self.isComponent) {\n                requestAnimationFrame(function () { self.resize(true); });\n            } else {\n                self.resize(true);\n            }\n            self.initialized = true;\n            return self;\n        };\n        /**\n         * Removes focus from the grid.\n         * @memberof canvasDatagrid\n         * @name blur\n         * @method\n         */\n        self.intf.blur = function (e) {\n            self.hasFocus = false;\n        };\n        /**\n         * Focuses on the grid.\n         * @memberof canvasDatagrid\n         * @name focus\n         * @method\n         */\n        self.intf.focus = function () {\n            self.hasFocus = true;\n            self.controlInput.focus();\n        };\n        if (self.shadowRoot || self.isChildGrid) {\n            Object.defineProperty(self.intf, 'height', {\n                get: function () {\n                    if (self.shadowRoot) {\n                        return self.shadowRoot.height;\n                    }\n                    return self.parentNode.height;\n                },\n                set: function (value) {\n                    if (self.shadowRoot) {\n                        self.shadowRoot.height = value;\n                    } else {\n                        self.parentNode.height = value;\n                    }\n                    self.resize(true);\n                }\n            });\n            Object.defineProperty(self.intf, 'width', {\n                get: function () {\n                    if (self.shadowRoot) {\n                        return self.shadowRoot.width;\n                    }\n                    return self.parentNode.width;\n                },\n                set: function (value) {\n                    if (self.shadowRoot) {\n                        self.shadowRoot.width = value;\n                    } else {\n                        self.parentNode.width = value;\n                    }\n                    self.resize(true);\n                }\n            });\n            Object.defineProperty(self.intf, 'parentNode', {\n                get: function () {\n                    return self.parentNode;\n                },\n                set: function (value) {\n                    if (!self.isChildGrid) {\n                        throw new TypeError('Cannot set property parentNode which has only a getter');\n                    }\n                    self.parentNode = value;\n                }\n            });\n        }\n        Object.defineProperty(self.intf, 'visibleRowHeights', {\n            get: function () {\n                return self.visibleRowHeights;\n            }\n        });\n        Object.defineProperty(self.intf, 'openChildren', {\n            get: function () {\n                return self.openChildren;\n            }\n        });\n        Object.defineProperty(self.intf, 'childGrids', {\n            get: function () {\n                return Object.keys(self.childGrids).map(function (gridId) {\n                    return self.childGrids[gridId];\n                });\n            }\n        });\n        Object.defineProperty(self.intf, 'isChildGrid', {\n            get: function () {\n                return self.isChildGrid;\n            }\n        });\n        Object.defineProperty(self, 'cursor', {\n            get: function () {\n                return self.parentNodeStyle.cursor;\n            },\n            set: function (value) {\n                if (value === 'cell') { value = 'default'; }\n                if (self.currentCursor !== value) {\n                    self.parentNodeStyle.cursor = value;\n                    self.currentCursor = value;\n                }\n            }\n        });\n        Object.defineProperty(self.intf, 'orderDirection', {\n            get: function () {\n                return self.orderDirection;\n            },\n            set: function (value) {\n                if (value !== 'desc') {\n                    value = 'asc';\n                }\n                self.orderDirection = value;\n                self.order(self.orderBy, self.orderDirection);\n            }\n        });\n        Object.defineProperty(self.intf, 'orderBy', {\n            get: function () {\n                return self.orderBy;\n            },\n            set: function (value) {\n                if (self.getSchema().find(function (col) {\n                        return col.name === value;\n                    }) === undefined) {\n                    throw new Error('Cannot sort by unknown column name.');\n                }\n                self.orderBy = value;\n                self.order(self.orderBy, self.orderDirection);\n            }\n        });\n        if (self.isComponent) {\n            Object.defineProperty(self.intf, 'offsetHeight', {\n                get: function () {\n                    return self.canvas.offsetHeight;\n                }\n            });\n            Object.defineProperty(self.intf, 'offsetWidth', {\n                get: function () {\n                    return self.canvas.offsetWidth;\n                }\n            });\n        }\n        Object.defineProperty(self.intf, 'scrollHeight', {\n            get: function () {\n                return self.scrollBox.scrollHeight;\n            }\n        });\n        Object.defineProperty(self.intf, 'scrollWidth', {\n            get: function () {\n                return self.scrollBox.scrollWidth;\n            }\n        });\n        Object.defineProperty(self.intf, 'scrollTop', {\n            get: function () {\n                return self.scrollBox.scrollTop;\n            },\n            set: function (value) {\n                self.scrollBox.scrollTop = value;\n            }\n        });\n        Object.defineProperty(self.intf, 'scrollLeft', {\n            get: function () {\n                return self.scrollBox.scrollLeft;\n            },\n            set: function (value) {\n                self.scrollBox.scrollLeft = value;\n            }\n        });\n        Object.defineProperty(self.intf, 'sizes', {\n            get: function () {\n                return self.sizes;\n            }\n        });\n        Object.defineProperty(self.intf, 'parentDOMNode', {\n            get: function () {\n                return self.parentDOMNode;\n            }\n        });\n        Object.defineProperty(self.intf, 'input', {\n            get: function () {\n                return self.input;\n            }\n        });\n        Object.defineProperty(self.intf, 'controlInput', {\n            get: function () {\n                return self.controlInput;\n            }\n        });\n        Object.defineProperty(self.intf, 'currentCell', {\n            get: function () {\n                return self.currentCell;\n            }\n        });\n        Object.defineProperty(self.intf, 'visibleCells', {\n            get: function () {\n                return self.visibleCells;\n            }\n        });\n        Object.defineProperty(self.intf, 'visibleRows', {\n            get: function () {\n                return self.visibleRows;\n            }\n        });\n        Object.defineProperty(self.intf, 'selections', {\n            get: function () {\n                return self.selections;\n            }\n        });\n        Object.defineProperty(self.intf, 'dragMode', {\n            get: function () {\n                return self.dragMode;\n            }\n        });\n        Object.defineProperty(self.intf, 'changes', {\n            get: function () {\n                return self.changes;\n            }\n        });\n        self.intf.formatters = self.formatters;\n        Object.defineProperty(self.intf, 'dataType', {\n            get: function () {\n                return self.dataType;\n            },\n            set: function (value) {\n                if (!self.parsers[value]) {\n                    throw new Error('No parser for MIME type ' + value);\n                }\n                self.dataType = value;\n            }\n        });\n        self.eventNames.forEach(function (eventName) {\n            Object.defineProperty(self.intf, 'on' + eventName, {\n                get: function () {\n                    return self.componentL1Events[eventName];\n                },\n                set: function (value) {\n                    self.events[eventName] = [];\n                    self.componentL1Events[eventName] = value;\n                    if (!value) { return; }\n                    self.addEventListener(eventName, value);\n                }\n            });\n        });\n        Object.defineProperty(self.intf, 'frozenRow', {\n            get: function () {\n                return self.frozenRow;\n            },\n            set: function (val) {\n                if (isNaN(val)) {\n                    throw new TypeError('Expected value for frozenRow to be a number.');\n                }\n                if (self.visibleRows.length < val) {\n                    throw new RangeError('Cannot set a value larger than the number of visible rows.');\n                }\n                self.frozenRow = val;\n            }\n        });\n        Object.defineProperty(self.intf, 'frozenColumn', {\n            get: function () {\n                return self.frozenColumn;\n            },\n            set: function (val) {\n                if (isNaN(val)) {\n                    throw new TypeError('Expected value for frozenRow to be a number.');\n                }\n                if (self.getVisibleSchema().length < val) {\n                    throw new RangeError('Cannot set a value larger than the number of visible columns.');\n                }\n                self.frozenColumn = val;\n            }\n        });\n        Object.defineProperty(self.intf, 'scrollIndexRect', {\n            get: function () {\n                return {\n                    top: self.scrollIndexTop,\n                    right: self.scrollIndexRight,\n                    bottom: self.scrollIndexBottom,\n                    left: self.scrollIndexLeft\n                };\n            }\n        });\n        Object.defineProperty(self.intf, 'scrollPixelRect', {\n            get: function () {\n                return {\n                    top: self.scrollPixelTop,\n                    right: self.scrollPixelRight,\n                    bottom: self.scrollPixelBottom,\n                    left: self.scrollPixelLeft\n                };\n            }\n        });\n        Object.defineProperty(self.intf, 'rowOrder', {\n            get: function () {\n                return self.orders.rows;\n            },\n            set: function (val) {\n                if (!Array.isArray(val)) {\n                    throw new TypeError('Value must be an array.');\n                }\n                if (!self.data || val.length < self.data.length) {\n                    throw new RangeError('Array length must be equal to or greater than number of rows.');\n                }\n                self.orders.rows = val;\n            }\n        });\n        Object.defineProperty(self.intf, 'columnOrder', {\n            get: function () {\n                return self.orders.columns;\n            },\n            set: function (val) {\n                if (!Array.isArray(val)) {\n                    throw new TypeError('Value must be an array.');\n                }\n                if (val.length < self.getSchema().length) {\n                    throw new RangeError('Array length must be equal to or greater than number of columns.');\n                }\n                self.orders.columns = val;\n            }\n        });\n        Object.defineProperty(self.intf, 'selectionBounds', {\n            get: function () {\n                return self.getSelectionBounds();\n            }\n        });\n        Object.defineProperty(self.intf, 'selectedRows', {\n            get: function () {\n                return self.getSelectedData(true);\n            }\n        });\n        Object.defineProperty(self.intf, 'selectedCells', {\n            get: function () {\n                return self.getSelectedData();\n            }\n        });\n        Object.defineProperty(self.intf, 'visibleSchema', {\n            get: function () {\n                return self.getVisibleSchema().map(function eachDataRow(col) {\n                    return col;\n                });\n            }\n        });\n        Object.defineProperty(self.intf, 'treeGridAttributes', {\n            get: function () {\n                return self.treeGridAttributes;\n            },\n            set: function setTreeGridAttributes(value) {\n                self.treeGridAttributes = value;\n            }\n        });\n        Object.defineProperty(self.intf, 'cellGridAttributes', {\n            get: function () {\n                return self.cellGridAttributes;\n            },\n            set: function setCellGridAttributes(value) {\n                self.cellGridAttributes = value;\n            }\n        });\n        Object.defineProperty(self.intf, 'ctx', {\n            get: function () {\n                return self.ctx;\n            }\n        });\n        Object.defineProperty(self.intf, 'schema', {\n            get: function schemaGetter() {\n                return self.getSchema();\n            },\n            set: function schemaSetter(value) {\n                if (value === undefined) {\n                    // Issue #89 - allow schema to be set to initialized state\n                    self.schema = undefined;\n                    self.tempSchema = undefined;\n                    self.dispatchEvent('schemachanged', {schema: undefined});\n                    return;\n                }\n                if (!Array.isArray(value) || typeof value[0] !== 'object') {\n                    throw new Error('Schema must be an array of objects.');\n                }\n                if (value[0].name === undefined) {\n                    throw new Error('Expected schema to contain an object with at least a name property.');\n                }\n                self.schema = value.map(function eachSchemaColumn(column, index) {\n                    column.width = column.width || self.style.cellWidth;\n                    column.filter = column.filter || self.filter(column.type);\n                    column.type = column.type || 'string';\n                    column.index = index;\n                    column.columnIndex = index;\n                    column.rowIndex = -1;\n                    return column;\n                });\n                self.tempSchema = undefined;\n                self.createNewRowData();\n                self.createColumnOrders();\n                self.tryLoadStoredSettings();\n                if (self.storedSettings && typeof self.storedSettings.visibility === 'object') {\n                    self.schema.forEach(function hideEachSchemaColumn(column, index) {\n                        if (self.storedSettings && self.storedSettings.visibility[column.name] !== undefined) {\n                            column.hidden = !self.storedSettings.visibility[column.name];\n                        }\n                    });\n                }\n                self.resize(true);\n                self.dispatchEvent('schemachanged', {schema: self.schema});\n            }\n        });\n        /**\n         * Gets an array of currently registered MIME types.\n         * @memberof canvasDatagrid\n         * @name getDataTypes\n         * @method\n         */\n        self.intf.getTypes = function () {\n            return Object.keys(self.parsers);\n        };\n        self.parseInnerHtml = function (data) {\n            if (!data || /^ +$/.test(data)) {\n                return [];\n            }\n            try {\n                data = JSON.parse(data);\n            } catch (e) {\n                console.warn(Error('Cannot parse application/json+x-canvas-datagrid formated data. '\n                    + e.message + '  \\nNote: canvas-datagrid.innerHTML is for string data only.  '\n                    + 'Use the canvas-datagrid.data property to set object data.'));\n            }\n            return data;\n        };\n        self.parsers['application/json+x-canvas-datagrid'] = function (data, callback) {\n            self.parsers['application/x-canvas-datagrid'](self.parseInnerHtml(data), function (data, schema) {\n                return callback(data, schema);\n            });\n        };\n        self.parsers['application/x-canvas-datagrid'] = function (data, callback) {\n            return callback(data);\n        };\n        self.intf.parsers = self.parsers;\n        // send to dataType ETL function to extract from input data\n        // and transform into native [{}, {}] format\n        self.etl = function (data, callback) {\n            if (!self.intf.parsers[self.dataType]) {\n                throw new Error('Unsupported data type.');\n            }\n            self.intf.parsers[self.dataType](data, function (data, schema) {\n                if (Array.isArray(schema)) {\n                    self.schema = schema;\n                }\n                // Issue #89 - allow schema to be auto-created every time data is set\n                if (self.attributes.autoGenerateSchema) {\n                    self.schema = self.getSchemaFromData(data);\n                }\n                if (!self.schema) {\n                    self.tempSchema = self.getSchemaFromData(data);\n                }\n                if (self.getSchema()) {\n                    self.createColumnOrders();\n                }\n                // set the unfiltered/sorted data array\n                self.originalData = data;\n                //TODO apply filter to incoming dataset\n                self.data = self.originalData;\n                // empty data was set\n                if (!self.schema && (self.data || []).length === 0) {\n                    self.tempSchema = [{name: ''}];\n                }\n                self.fitColumnToValues('cornerCell', true);\n                if ((self.tempSchema && !self.schema) || self.attributes.autoGenerateSchema) {\n                    self.createColumnOrders();\n                    self.dispatchEvent('schemachanged', {schema: self.tempSchema});\n                }\n                callback();\n            });\n        };\n        Object.defineProperty(self.intf, 'data', {\n            get: function dataGetter() {\n                return self.data;\n            },\n            set: function dataSetter(value) {\n                self.etl(value, function () {\n                    self.changes = [];\n                    self.createNewRowData();\n                    if (self.attributes.autoResizeColumns && self.data.length > 0\n                            && self.storedSettings === undefined) {\n                        self.autosize();\n                    }\n                    // set the header column to fit the numbers in it\n                    self.fitColumnToValues('cornerCell', true);\n                    self.createRowOrders();\n                    self.tryLoadStoredSettings();\n                    self.dispatchEvent('datachanged', {data: self.data});\n                    self.resize(true);\n                });\n            }\n        });\n        self.initScrollBox = function () {\n            var sHeight = 0,\n                sWidth = 0,\n                scrollTop = 0,\n                scrollLeft = 0,\n                scrollHeight = 0,\n                scrollWidth = 0,\n                scrollBoxHeight = 20,\n                scrollBoxWidth = 20;\n            function setScrollTop(value, preventScrollEvent) {\n                if (isNaN(value)) {\n                    throw new Error('ScrollTop value must be a number');\n                }\n                if (value < 0) {\n                    value = 0;\n                }\n                if (value > scrollHeight) {\n                    value = scrollHeight;\n                }\n                if (scrollHeight < 0) {\n                    value = 0;\n                }\n                scrollTop = value;\n                if (!preventScrollEvent) {\n                    self.scroll();\n                }\n            }\n            function setScrollLeft(value, preventScrollEvent) {\n                if (isNaN(value)) {\n                    throw new Error('ScrollLeft value must be a number');\n                }\n                if (value < 0) {\n                    value = 0;\n                }\n                if (value > scrollWidth) {\n                    value = scrollWidth;\n                }\n                if (scrollWidth < 0) {\n                    value = 0;\n                }\n                scrollLeft = value;\n                if (!preventScrollEvent) {\n                    self.scroll();\n                }\n            }\n            self.scrollBox.toString = function () {\n                return '{\"width\": ' + scrollWidth.toFixed(2)\n                    + ', \"height\": ' + scrollHeight.toFixed(2)\n                    + ', \"left\": ' + scrollLeft.toFixed(2)\n                    + ', \"top\": ' + scrollTop.toFixed(2)\n                    + ', \"widthRatio\": ' + self.scrollBox.widthBoxRatio.toFixed(5)\n                    + ', \"heightRatio\": ' + self.scrollBox.heightBoxRatio.toFixed(5) + '}';\n            };\n            self.scrollBox.scrollTo = function (x, y, supressDrawEvent) {\n                setScrollLeft(x, true);\n                setScrollTop(y, supressDrawEvent);\n            };\n            Object.defineProperty(self.scrollBox, 'scrollBoxHeight', {\n                get: function () {\n                    return scrollBoxHeight;\n                },\n                set: function (value) {\n                    scrollBoxHeight = value;\n                }\n            });\n            Object.defineProperty(self.scrollBox, 'scrollBoxWidth', {\n                get: function () {\n                    return scrollBoxWidth;\n                },\n                set: function (value) {\n                    scrollBoxWidth = value;\n                }\n            });\n            Object.defineProperty(self.scrollBox, 'height', {\n                get: function () {\n                    return sHeight;\n                },\n                set: function (value) {\n                    sHeight = value;\n                }\n            });\n            Object.defineProperty(self.scrollBox, 'width', {\n                get: function () {\n                    return sWidth;\n                },\n                set: function (value) {\n                    sWidth = value;\n                }\n            });\n            Object.defineProperty(self.scrollBox, 'scrollTop', {\n                get: function () {\n                    return scrollTop;\n                },\n                set: setScrollTop\n            });\n            Object.defineProperty(self.scrollBox, 'scrollLeft', {\n                get: function () {\n                    return scrollLeft;\n                },\n                set: setScrollLeft\n            });\n            Object.defineProperty(self.scrollBox, 'scrollHeight', {\n                get: function () {\n                    return scrollHeight;\n                },\n                set: function (value) {\n                    if (scrollTop > value) {\n                        scrollTop = Math.max(value, 0);\n                    }\n                    scrollHeight = value;\n                }\n            });\n            Object.defineProperty(self.scrollBox, 'scrollWidth', {\n                get: function () {\n                    return scrollWidth;\n                },\n                set: function (value) {\n                    if (scrollLeft > value) {\n                        scrollLeft = Math.max(value, 0);\n                    }\n                    scrollWidth = value;\n                }\n            });\n        };\n        return;\n    };\n});\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./lib/intf.js\n// module id = 6\n// module chunks = 0","/*jslint browser: true, unparam: true, todo: true*/\n/*globals define: true, MutationObserver: false, requestAnimationFrame: false, performance: false, btoa: false, Event: false*/\ndefine([], function () {\n    'use strict';\n    return function (self) {\n        var zIndexTop, hoverScrollTimeout, autoCompleteContext;\n        function applyContextItemStyle(contextItemContainer) {\n            self.createInlineStyle(contextItemContainer, 'canvas-datagrid-context-menu-item' + (self.mobile ? '-mobile' : ''));\n            contextItemContainer.addEventListener('mouseover', function () {\n                self.createInlineStyle(contextItemContainer, 'canvas-datagrid-context-menu-item:hover');\n            });\n            contextItemContainer.addEventListener('mouseout', function () {\n                self.createInlineStyle(contextItemContainer, 'canvas-datagrid-context-menu-item');\n            });\n        }\n        function createContextMenu(ev, pos, items, parentContextMenu) {\n            var container = document.createElement('div'),\n                upArrow = document.createElement('div'),\n                downArrow = document.createElement('div'),\n                children = [],\n                selectedIndex = -1,\n                intf = {},\n                rect;\n            if (!Array.isArray(items)) { throw new Error('createContextMenu expects an array.'); }\n            function createItems() {\n                items.forEach(function (item) {\n                    var contextItemContainer = document.createElement('div'),\n                        childMenuArrow;\n                    function removeChildContext(e) {\n                        if (e.relatedTarget === container\n                                || item.contextMenu.container === e.relatedTarget\n                                || childMenuArrow === e.relatedTarget\n                                || (contextItemContainer === e.relatedTarget)\n                                || item.contextMenu.container.contains(e.relatedTarget)\n                                ) { return; }\n                        item.contextMenu.dispose();\n                        children.splice(children.indexOf(item.contextMenu), 1);\n                        item.contextMenu = undefined;\n                        contextItemContainer.removeEventListener('mouseout', removeChildContext);\n                        container.removeEventListener('mouseout', removeChildContext);\n                        contextItemContainer.setAttribute('contextOpen', '0');\n                        contextItemContainer.setAttribute('opening', '0');\n                    }\n                    function contextAddCallback(items) {\n                        // check yet again if the user hasn't moved off\n                        if (contextItemContainer.getAttribute('opening') !== '1' ||\n                                contextItemContainer.getAttribute('contextOpen') === '1') {\n                            return;\n                        }\n                        var cPos = contextItemContainer.getBoundingClientRect();\n                        cPos = {\n                            left: cPos.left + self.style.childContextMenuMarginLeft + container.offsetWidth,\n                            top: cPos.top + self.style.childContextMenuMarginTop,\n                            bottom: cPos.bottom,\n                            right: cPos.right\n                        };\n                        item.contextMenu = createContextMenu(ev, cPos, items, intf);\n                        contextItemContainer.setAttribute('contextOpen', '1');\n                        contextItemContainer.addEventListener('mouseout', removeChildContext);\n                        container.addEventListener('mouseout', removeChildContext);\n                        children.push(item.contextMenu);\n                    }\n                    function createChildContext() {\n                        var i;\n                        if (contextItemContainer.getAttribute('contextOpen') === '1') {\n                            return;\n                        }\n                        contextItemContainer.setAttribute('opening', '1');\n                        if (typeof item.items === 'function') {\n                            i  = item.items.apply(intf, [function (items) {\n                                contextAddCallback(items);\n                            }]);\n                            if (i !== undefined && Array.isArray(i)) {\n                                contextAddCallback(i);\n                            }\n                            return;\n                        }\n                        contextAddCallback(item.items);\n                    }\n                    function addItem(item) {\n                        function addContent(content) {\n                            if (content === null) { return; }\n                            if (typeof content === 'function') {\n                                return addContent(content(ev));\n                            }\n                            if (typeof content === 'object') {\n                                contextItemContainer.appendChild(content);\n                                return;\n                            }\n                            applyContextItemStyle(contextItemContainer);\n                            contextItemContainer.innerHTML = content;\n                            return;\n                        }\n                        addContent(item.title);\n                        item.contextItemContainer = contextItemContainer;\n                        if ((item.items && item.items.length > 0) || typeof item.items === 'function') {\n                            childMenuArrow = document.createElement('div');\n                            self.createInlineStyle(childMenuArrow, 'canvas-datagrid-context-child-arrow');\n                            childMenuArrow.innerHTML = self.style.childContextMenuArrowHTML;\n                            contextItemContainer.appendChild(childMenuArrow);\n                            contextItemContainer.addEventListener('mouseover', createChildContext);\n                            contextItemContainer.addEventListener('mouseout', function () {\n                                contextItemContainer.setAttribute('opening', '0');\n                            });\n                        }\n                        if (item.click) {\n                            contextItemContainer.addEventListener('click', function (ev) {\n                                item.click.apply(self, [ev]);\n                            });\n                        }\n                    }\n                    addItem(item);\n                    container.appendChild(contextItemContainer);\n                });\n            }\n            function clickIndex(idx) {\n                items[idx].contextItemContainer.dispatchEvent(new Event('click'));\n            }\n            function checkArrowVisibility() {\n                if (container.scrollTop > 0) {\n                    self.parentDOMNode.appendChild(upArrow);\n                } else if (upArrow.parentNode) {\n                    upArrow.parentNode.removeChild(upArrow);\n                }\n                if (container.scrollTop >= container.scrollHeight - container.offsetHeight && downArrow.parentNode) {\n                    downArrow.parentNode.removeChild(downArrow);\n                } else if (container.scrollHeight - container.offsetHeight > 0\n                        && !(container.scrollTop >= container.scrollHeight - container.offsetHeight)) {\n                    self.parentDOMNode.appendChild(downArrow);\n                }\n            }\n            function startHoverScroll(type) {\n                return function t() {\n                    var a = self.attributes.contextHoverScrollAmount;\n                    if (type === 'up' && container.scrollTop === 0) { return; }\n                    if (type === 'down' && container.scrollTop === container.scrollHeight) { return; }\n                    container.scrollTop += (type === 'up' ? -a : a);\n                    hoverScrollTimeout = setTimeout(t, self.attributes.contextHoverScrollRateMs, type);\n                };\n            }\n            function endHoverScroll(type) {\n                return function () {\n                    clearTimeout(hoverScrollTimeout);\n                };\n            }\n            function init() {\n                var loc = {},\n                    s = self.scrollOffset(self.canvas);\n                if (zIndexTop === undefined) {\n                    zIndexTop = self.style.contextMenuZIndex;\n                }\n                createItems();\n                self.createInlineStyle(container, 'canvas-datagrid-context-menu' + (self.mobile ? '-mobile' : ''));\n                loc.x = pos.left - s.left;\n                loc.y = pos.top - s.top;\n                loc.height = 0;\n                zIndexTop += 1;\n                container.style.position = 'absolute';\n                upArrow.style.color = self.style.contextMenuArrowColor;\n                downArrow.style.color = self.style.contextMenuArrowColor;\n                [upArrow, downArrow].forEach(function (el) {\n                    el.style.textAlign = 'center';\n                    el.style.position = 'absolute';\n                    el.style.zIndex = zIndexTop + 1;\n                });\n                container.style.zIndex = zIndexTop;\n                if (parentContextMenu && parentContextMenu.inputDropdown) {\n                    container.style.maxHeight = window.innerHeight - loc.y - self.style.autocompleteBottomMargin + 'px';\n                    container.style.minWidth = pos.width + 'px';\n                    loc.y += pos.height;\n                }\n                if (self.mobile) {\n                    container.style.width = pos.width + 'px';\n                }\n                container.style.left = loc.x + 'px';\n                container.style.top = loc.y + 'px';\n                container.addEventListener('scroll', checkArrowVisibility);\n                container.addEventListener('wheel', function (e) {\n                    if (self.hasFocus) {\n                        container.scrollTop += e.deltaY;\n                        container.scrollLeft += e.deltaX;\n                    }\n                    checkArrowVisibility();\n                });\n                upArrow.innerHTML = self.style.contextMenuArrowUpHTML;\n                downArrow.innerHTML = self.style.contextMenuArrowDownHTML;\n                container.appendChild(upArrow);\n                document.body.appendChild(downArrow);\n                document.body.appendChild(container);\n                rect = container.getBoundingClientRect();\n                // TODO: fix !(parentContextMenu && parentContextMenu.inputDropdown) state (autocomplete)\n                if (rect.bottom > window.innerHeight) {\n                    if (!(parentContextMenu && parentContextMenu.inputDropdown)) {\n                        loc.y -= (rect.bottom + self.style.contextMenuWindowMargin) - window.innerHeight;\n                    }\n                    if (loc.y < 0) { loc.y = self.style.contextMenuWindowMargin; }\n                    if (container.offsetHeight > window.innerHeight - self.style.contextMenuWindowMargin) {\n                        container.style.height = window.innerHeight - (self.style.contextMenuWindowMargin * 2) + 'px';\n                    }\n                }\n                if (rect.right > window.innerWidth) {\n                    loc.x -= rect.right - window.innerWidth + self.style.contextMenuWindowMargin;\n                }\n                if (loc.x < 0) { loc.x = self.style.contextMenuWindowMargin; }\n                if (loc.y < 0) { loc.y = self.style.contextMenuWindowMargin; }\n                container.style.left = loc.x + 'px';\n                container.style.top = loc.y + 'px';\n                rect = container.getBoundingClientRect();\n                upArrow.style.top = rect.top + 'px';\n                downArrow.style.top = rect.top + rect.height - downArrow.offsetHeight + 'px';\n                upArrow.style.left = rect.left + 'px';\n                downArrow.style.left = rect.left + 'px';\n                downArrow.style.width = container.offsetWidth + 'px';\n                upArrow.style.width = container.offsetWidth + 'px';\n                downArrow.addEventListener('mouseover', startHoverScroll('down'));\n                downArrow.addEventListener('mouseout', endHoverScroll('down'));\n                upArrow.addEventListener('mouseover', startHoverScroll('up'));\n                upArrow.addEventListener('mouseout', endHoverScroll('up'));\n                checkArrowVisibility();\n            }\n            intf.parentGrid = self.intf;\n            intf.parentContextMenu = parentContextMenu;\n            intf.container = container;\n            init();\n            intf.clickIndex = clickIndex;\n            intf.rect = rect;\n            intf.items = items;\n            intf.upArrow = upArrow;\n            intf.downArrow = downArrow;\n            intf.dispose = function () {\n                clearTimeout(hoverScrollTimeout);\n                children.forEach(function (c) {\n                    c.dispose();\n                });\n                [downArrow, upArrow, container].forEach(function (el) {\n                    if (el.parentNode) { el.parentNode.removeChild(el); }\n                });\n            };\n            Object.defineProperty(intf, 'selectedIndex', {\n                get: function () {\n                    return selectedIndex;\n                },\n                set: function (value) {\n                    if (typeof value !== 'number' || isNaN(value || !isFinite(value))) {\n                        throw new Error('Context menu selected index must be a sane number.');\n                    }\n                    selectedIndex = value;\n                    if (selectedIndex > items.length - 1) {\n                        selectedIndex = items.length - 1;\n                    }\n                    if (selectedIndex < 0) {\n                        selectedIndex = 0;\n                    }\n                    items.forEach(function (item, index) {\n                        if (index === selectedIndex) {\n                            return self.createInlineStyle(item.contextItemContainer, 'canvas-datagrid-context-menu-item:hover');\n                        }\n                        self.createInlineStyle(item.contextItemContainer, 'canvas-datagrid-context-menu-item');\n                    });\n                }\n            });\n            return intf;\n        }\n        function createFilterContextMenuItems(e) {\n            var filterContainer = document.createElement('div'),\n                filterLabel = document.createElement('div'),\n                filterAutoCompleteButton = document.createElement('button'),\n                filterInput = document.createElement('input'),\n                n = e.cell && e.cell.header ? e.cell.header.title || e.cell.header.name : '',\n                autoCompleteItems,\n                iRect;\n            function checkRegExpErrorState() {\n                filterInput.style.background = self.style.contextFilterInputBackground;\n                filterInput.style.color = self.style.contextFilterInputColor;\n                if (self.invalidFilterRegEx) {\n                    filterInput.style.background = self.style.contextFilterInvalidRegExpBackground;\n                    filterInput.style.color = self.style.contextFilterInvalidRegExpColor;\n                }\n            }\n            function fillAutoComplete() {\n                var count = 0;\n                autoCompleteItems = {};\n                self.data.forEach(function (row) {\n                    var value = row[e.cell.header.name];\n                    if (autoCompleteItems[value] || count > self.attributes.maxAutoCompleteItems) { return; }\n                    count += 1;\n                    autoCompleteItems[value] = {\n                        title: self.formatters[e.cell.header.type || 'string']({ cell: { value: value }}),\n                        click: function (e) {\n                            filterInput.value = value;\n                            e.stopPropagation();\n                            filterInput.dispatchEvent(new Event('keyup'));\n                            self.disposeAutocomplete();\n                            return;\n                        }\n                    };\n                });\n                autoCompleteItems = Object.keys(autoCompleteItems).map(function (key) {\n                    return autoCompleteItems[key];\n                });\n            }\n            function createAutoCompleteContext(ev) {\n                if (ev && [40, 38, 13, 9].indexOf(ev.keyCode) !== -1) { return; }\n                fillAutoComplete();\n                iRect = filterInput.getBoundingClientRect();\n                if (autoCompleteContext) {\n                    autoCompleteContext.dispose();\n                    autoCompleteContext = undefined;\n                }\n                autoCompleteContext = createContextMenu(e, {\n                    left: iRect.left,\n                    top: iRect.top,\n                    right: iRect.right,\n                    bottom: iRect.bottom,\n                    height: iRect.height,\n                    width: iRect.width\n                }, autoCompleteItems, {inputDropdown: true});\n                autoCompleteContext.selectedIndex = 0;\n            }\n            self.createInlineStyle(filterLabel, 'canvas-datagrid-context-menu-label');\n            self.createInlineStyle(filterAutoCompleteButton, 'canvas-datagrid-context-menu-filter-button');\n            self.createInlineStyle(filterInput, 'canvas-datagrid-context-menu-filter-input');\n            checkRegExpErrorState();\n            filterInput.onclick = self.disposeAutocomplete;\n            filterInput.addEventListener('keydown', function (e) {\n                //down\n                if (e.keyCode === 40) {\n                    autoCompleteContext.selectedIndex += 1;\n                }\n                //up\n                if (e.keyCode === 38) {\n                    autoCompleteContext.selectedIndex -= 1;\n                }\n                //enter\n                if (e.keyCode === 13) {\n                    autoCompleteContext.clickIndex(autoCompleteContext.selectedIndex);\n                    self.disposeContextMenu();\n                }\n                //tab\n                if (e.keyCode === 9) {\n                    autoCompleteContext.clickIndex(autoCompleteContext.selectedIndex);\n                    e.preventDefault();\n                }\n                //esc\n                if (e.keyCode === 27) {\n                    self.disposeContextMenu();\n                }\n            });\n            filterInput.addEventListener('keyup', function () {\n                self.setFilter(e.cell.header.name, filterInput.value);\n            });\n            filterInput.addEventListener('keyup', createAutoCompleteContext);\n            ['focus', 'blur', 'keydown', 'keyup', 'change'].forEach(function (en) {\n                filterInput.addEventListener(en, checkRegExpErrorState);\n            });\n            filterInput.value = e.cell.header ? self.columnFilters[e.cell.header.name] || '' : '';\n            filterLabel.innerHTML = self.attributes.filterOptionText.replace(/%s/g, n);\n            filterAutoCompleteButton.onclick = function () {\n                if (autoCompleteContext) {\n                    return self.disposeAutocomplete();\n                }\n                createAutoCompleteContext();\n            };\n            filterAutoCompleteButton.innerHTML = self.style.contextFilterButtonHTML;\n            filterContainer.addEventListener('click', function (e) {\n                return e.stopPropagation();\n            });\n            filterContainer.appendChild(filterLabel);\n            filterContainer.appendChild(filterInput);\n            filterContainer.appendChild(filterAutoCompleteButton);\n            e.items.push({\n                title: filterContainer\n            });\n            if (Object.keys(self.columnFilters).length) {\n                Object.keys(self.columnFilters).forEach(function (cf) {\n                    var h = self.getHeaderByName(cf);\n                    e.items.push({\n                        title: self.attributes.removeFilterOptionText.replace(/%s/g, h.title || h.name),\n                        click: function removeFilterClick(e) {\n                            e.preventDefault();\n                            self.setFilter(cf, '');\n                            self.controlInput.focus();\n                        }\n                    });\n                });\n            }\n        }\n        function addDefaultContextMenuItem(e) {\n            var isNormalCell = !(e.cell.isBackground || e.cell.isColumnHeaderCellCap\n                    || e.cell.isScrollBar || e.cell.isCorner || e.cell.isRowHeader)\n                    && e.cell.header;\n            if (self.attributes.showFilter && isNormalCell) {\n                createFilterContextMenuItems(e);\n            }\n            if (self.attributes.showCopy\n                    && self.selections.reduce(function (p, r) {\n                        return p + r.length;\n                    }, 0) > 0) {\n                e.items.push({\n                    title: self.attributes.copyText,\n                    click: function () {\n                        document.execCommand('copy');\n                        self.disposeContextMenu();\n                        self.controlInput.focus();\n                    }\n                });\n            }\n            if (self.attributes.showPaste && self.clipBoardData) {\n                e.items.push({\n                    title: self.attributes.pasteText,\n                    click: function () {\n                        self.paste(self.clipBoardData, e.cell.columnIndex, e.cell.rowIndex);\n                        self.draw();\n                    }\n                });\n            }\n            if (self.attributes.showColumnSelector) {\n                e.items.push({\n                    title: self.attributes.columnSelectorText,\n                    items: function () {\n                        var d = [];\n                        self.getSchema().forEach(function (column) {\n                            function toggleColumnVisibility(e) {\n                                column.hidden = !column.hidden;\n                                self.dispatchEvent('togglecolumn', {column: column, hidden: column.hidden});\n                                e.preventDefault();\n                                self.stopPropagation(e);\n                                self.disposeContextMenu();\n                                self.resize(true);\n                                self.setStorageData();\n                            }\n                            var el = document.createElement('div');\n                            applyContextItemStyle(el);\n                            el.addEventListener('touchstart', toggleColumnVisibility);\n                            el.addEventListener('click', toggleColumnVisibility);\n                            el.innerHTML = (column.hidden ? self.attributes.columnSelectorHiddenText\n                                    : self.attributes.columnSelectorVisibleText)\n                                    + (column.title || column.name);\n                            d.push({\n                                title: el\n                            });\n                        });\n                        return d;\n                    }\n                });\n                if (e.cell && e.cell.header && e.cell.columnIndex > -1) {\n                    e.items.push({\n                        title: self.attributes.hideColumnText\n                            .replace(/%s/ig, e.cell.header.title || e.cell.header.name),\n                        click: function (ev) {\n                            self.getSchema()[e.cell.columnIndex].hidden = true;\n                            ev.preventDefault();\n                            self.stopPropagation(ev);\n                            self.disposeContextMenu();\n                            self.setStorageData();\n                            setTimeout(function () { self.resize(true); }, 10);\n                        }\n                    });\n                }\n            }\n            if (self.attributes.saveAppearance && self.attributes.showClearSettingsOption\n                    && (Object.keys(self.sizes.rows).length > 0\n                        || Object.keys(self.sizes.columns).length > 0)) {\n                e.items.push({\n                    title: self.attributes.clearSettingsOptionText,\n                    click: function (e) {\n                        e.preventDefault();\n                        self.sizes.rows = {};\n                        self.sizes.columns = {};\n                        self.createRowOrders();\n                        self.createColumnOrders();\n                        self.storedSettings = undefined;\n                        self.dispatchEvent('resizecolumn', {columnWidth: self.style.cellWidth});\n                        self.dispatchEvent('resizerow', {cellHeight: self.style.cellHeight});\n                        self.setStorageData();\n                        self.resize(true);\n                        self.disposeContextMenu();\n                        self.controlInput.focus();\n                    }\n                });\n            }\n            if (self.attributes.allowSorting && self.attributes.showOrderByOption && isNormalCell) {\n                e.items.push({\n                    title: self.attributes.showOrderByOptionTextAsc.replace('%s', e.cell.header.title || e.cell.header.name),\n                    click: function (ev) {\n                        ev.preventDefault();\n                        self.order(e.cell.header.name, 'asc');\n                        self.controlInput.focus();\n                    }\n                });\n                e.items.push({\n                    title: self.attributes.showOrderByOptionTextDesc.replace('%s', e.cell.header.title || e.cell.header.name),\n                    click: function (ev) {\n                        ev.preventDefault();\n                        self.order(e.cell.header.name, 'desc');\n                        self.disposeContextMenu();\n                        self.controlInput.focus();\n                    }\n                });\n            }\n        }\n        self.disposeAutocomplete = function () {\n            if (autoCompleteContext) {\n                autoCompleteContext.dispose();\n                autoCompleteContext = undefined;\n            }\n        };\n        self.disposeContextMenu = function () {\n            document.removeEventListener('click', self.disposeContextMenu);\n            zIndexTop = self.style.contextMenuZIndex;\n            self.disposeAutocomplete();\n            if (self.contextMenu) {\n                self.contextMenu.dispose();\n            }\n            self.contextMenu = undefined;\n        };\n        self.contextmenuEvent = function (e, overridePos) {\n            if (!self.hasFocus && e.target !== self.canvas) {\n                return;\n            }\n            function createDiposeEvent() {\n                requestAnimationFrame(function () {\n                    document.addEventListener('click', self.disposeContextMenu);\n                    document.removeEventListener('mouseup', createDiposeEvent);\n                });\n            }\n            var contextPosition,\n                items = [],\n                pos = overridePos || self.getLayerPos(e),\n                ev = {\n                    NativeEvent: e,\n                    cell: self.getCellAt(pos.x, pos.y),\n                    items: items\n                };\n            if (!ev.cell.isGrid) {\n                addDefaultContextMenuItem(ev);\n            }\n            if (self.dispatchEvent('contextmenu', ev)) {\n                return;\n            }\n            if (!ev.cell.isGrid) {\n                if (self.contextMenu) {\n                    self.disposeContextMenu();\n                }\n                contextPosition = {\n                    left: pos.x + pos.rect.left\n                        + self.style.contextMenuMarginLeft + self.canvasOffsetLeft,\n                    top: pos.y + pos.rect.top\n                        + self.style.contextMenuMarginTop + self.canvasOffsetTop,\n                    right: ev.cell.width + ev.cell.x + pos.rect.left,\n                    bottom: ev.cell.height + ev.cell.y + pos.rect.top,\n                    height: ev.cell.height,\n                    width: ev.cell.width\n                };\n                if (self.mobile) {\n                    contextPosition.left = self.style.mobileContextMenuMargin + 'px';\n                    contextPosition.width = self.width - (self.style.mobileContextMenuMargin * 2) + 'px';\n                }\n                self.contextMenu = createContextMenu(ev, contextPosition, items);\n                document.addEventListener('mouseup', createDiposeEvent);\n                e.preventDefault();\n            }\n        };\n        return;\n    };\n});\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./lib/contextMenu.js\n// module id = 7\n// module chunks = 0","/*jslint browser: true, unparam: true, todo: true*/\n/*globals define: true, MutationObserver: false, requestAnimationFrame: false, performance: false, btoa: false*/\ndefine([], function () {\n    'use strict';\n    return function (self) {\n        self.getClippingRect = function (ele) {\n            var boundingRect = self.position(self.parentNode),\n                eleRect = self.position(ele),\n                s = self.scrollOffset(self.canvas),\n                clipRect = {\n                    x: 0,\n                    y: 0,\n                    h: 0,\n                    w: 0\n                },\n                parentRect = {\n                    x: -Infinity,\n                    y: -Infinity,\n                    h: Infinity,\n                    w: Infinity\n                },\n                columnHeaderCellHeight = self.getColumnHeaderCellHeight(),\n                rowHeaderCellWidth = self.getRowHeaderCellWidth();\n            boundingRect.top -= s.top;\n            boundingRect.left -= s.left;\n            eleRect.top -= s.top;\n            eleRect.left -= s.left;\n            clipRect.h = boundingRect.top + boundingRect.height - ele.offsetTop - self.style.scrollBarWidth;\n            clipRect.w = boundingRect.left + boundingRect.width - ele.offsetLeft - self.style.scrollBarWidth;\n            clipRect.x = boundingRect.left + (eleRect.left * -1) + rowHeaderCellWidth;\n            clipRect.y = boundingRect.top + (eleRect.top * -1) + columnHeaderCellHeight;\n            return {\n                x: clipRect.x > parentRect.x ? clipRect.x : parentRect.x,\n                y: clipRect.y > parentRect.y ? clipRect.y : parentRect.y,\n                h: clipRect.h < parentRect.h ? clipRect.h : parentRect.h,\n                w: clipRect.w < parentRect.w ? clipRect.w : parentRect.w\n            };\n        };\n        self.clipElement = function (ele) {\n            var clipRect = self.getClippingRect(ele);\n            if (clipRect.w < 0) { clipRect.w = 0; }\n            if (clipRect.h < 0) { clipRect.h = 0; }\n            ele.style.clip = 'rect('\n                + clipRect.y + 'px,'\n                + clipRect.w + 'px,'\n                + clipRect.h + 'px,'\n                + clipRect.x + 'px'\n                + ')';\n            // INFO https://developer.mozilla.org/en-US/docs/Web/CSS/clip\n            // clip has been \"deprecated\" for clipPath.  Of course nothing but chrome\n            // supports clip path, so we'll keep using clip until someday clipPath becomes\n            // more widely support.  The code below works correctly, but setting clipPath and clip\n            // at the same time has undesirable results.\n            // ele.style.clipPath = 'polygon('\n            //     + clipRect.x + 'px ' + clipRect.y + 'px,'\n            //     + clipRect.x + 'px ' + clipRect.h + 'px,'\n            //     + clipRect.w + 'px ' + clipRect.h + 'px,'\n            //     + clipRect.w + 'px ' + clipRect.y + 'px'\n            //     + ')';\n        };\n        self.scrollOffset = function (e) {\n            var x = 0, y = 0, scrollingElement = document.scrollingElement || { scrollLeft: 0, scrollTop: 0 };\n            while (e.parentNode && e.nodeName !== 'CANVAS-DATAGRID' && e !== self.intf) {\n                if (e.nodeType !== 'canvas-datagrid-tree'\n                        && e.nodeType !== 'canvas-datagrid-cell') {\n                    x -= e.scrollLeft;\n                    y -= e.scrollTop;\n                }\n                e = e.parentNode;\n            }\n            return {\n                left: x - scrollingElement.scrollLeft,\n                top: y - scrollingElement.scrollTop\n            };\n        };\n        self.resizeEditInput = function () {\n            if (self.input && self.input.editCell) {\n                var pos = self.canvas.getBoundingClientRect(),\n                    s = self.scrollOffset(self.intf),\n                    bm = self.style.gridBorderCollapse === 'collapse' ? 1 : 2,\n                    borderWidth = (self.style.cellBorderWidth * bm),\n                    cell = self.getVisibleCellByIndex(self.input.editCell.columnIndex, self.input.editCell.rowIndex)\n                        || {x: -100, y: -100, height: 0, width: 0};\n                if (self.mobile) {\n                    self.input.style.left = '0';\n                    self.input.style.top = (self.height - self.style.mobileEditInputHeight) - borderWidth - 1 + 'px';\n                    self.input.style.height = self.style.mobileEditInputHeight + 'px';\n                    self.input.style.width = self.width - borderWidth - 1 + 'px';\n                    return;\n                }\n                self.input.style.left = pos.left + cell.x + self.canvasOffsetLeft - s.left + 'px';\n                self.input.style.top = pos.top + cell.y - self.style.cellBorderWidth + self.canvasOffsetTop - s.top + 'px';\n                self.input.style.height = cell.height - borderWidth + 'px';\n                self.input.style.width = cell.width - self.style.cellPaddingLeft + 'px';\n                self.clipElement(self.input);\n            }\n        };\n        self.position = function (e, ignoreScrollOffset) {\n            var x = 0, y = 0, s = e, h, w;\n            while (e.offsetParent && e.nodeName !== 'CANVAS-DATAGRID') {\n                x += e.offsetLeft;\n                y += e.offsetTop;\n                h = e.offsetHeight;\n                w = e.offsetWidth;\n                e = e.offsetParent;\n            }\n            if (ignoreScrollOffset) {\n                return {left: x, top: y, height: h, width: w};\n            }\n            e = s;\n            s = self.scrollOffset(e);\n            return { left: x + s.left, top: y + s.top, height: h, width: w };\n        };\n        self.getLayerPos = function (e) {\n            var rect = self.canvas.getBoundingClientRect(),\n                pos = {\n                    x: e.clientX - rect.left,\n                    y: e.clientY - rect.top\n                };\n            if (self.isChildGrid) {\n                pos.x -= self.canvasOffsetLeft;\n                pos.y -= self.canvasOffsetTop;\n            }\n            return {\n                x: pos.x,\n                y: pos.y,\n                rect: rect\n            };\n        };\n        /**\n         * Ends editing, optionally aborting the edit.\n         * @memberof canvasDatagrid\n         * @name endEdit\n         * @method\n         * @param {boolean} abort When true, abort the edit.\n         */\n        self.endEdit = function (abort) {\n            var cell = self.input.editCell,\n                y = cell.rowIndex;\n            function abortEdit() {\n                abort = true;\n            }\n            if (self.dispatchEvent('beforeendedit', {\n                    cell: cell,\n                    newValue: self.input.value,\n                    oldValue: cell.value,\n                    abort: abortEdit,\n                    input: self.input\n                })) { return false; }\n            if (self.input.value !== cell.value && !abort) {\n                self.changes[y] = self.changes[y] || {};\n                self.changes[y][cell.header.name] = self.input.value;\n                if (!cell.data) {\n                    self.data[cell.rowIndex] = {};\n                    cell.data = self.data[cell.rowIndex];\n                }\n                cell.data[cell.header.name] = self.input.value;\n                if (y === self.data.length) {\n                    if (self.dispatchEvent('newrow', {\n                            value: self.input.value,\n                            defaultValue: cell.value,\n                            aborted: abort,\n                            cell: cell,\n                            input: self.input\n                        })) { return false; }\n                    self.addRow(cell.data);\n                    self.createNewRowData();\n                }\n                self.draw(true);\n            }\n            if (self.input.parentNode) {\n                self.input.parentNode.removeChild(self.input);\n            }\n            self.intf.focus();\n            self.dispatchEvent('endedit', {\n                cell: cell,\n                value: self.input.value,\n                aborted: abort,\n                input: self.input\n            });\n            self.input = undefined;\n            return true;\n        };\n        /**\n         * Begins editing at cell x, row y.\n         * @memberof canvasDatagrid\n         * @name beginEditAt\n         * @method\n         * @param {number} x The column index of the cell to edit.\n         * @param {number} y The row index of the cell to edit.\n         */\n        self.beginEditAt = function (x, y, NativeEvent) {\n            if (!self.attributes.editable) { return; }\n            if (self.input) {\n                self.endEdit();\n            }\n            var cell = self.getVisibleCellByIndex(x, y),\n                s = self.getSchema(),\n                adjacentCells,\n                enumItems,\n                enu,\n                option,\n                valueInEnum;\n            if (!(cell && cell.header)) { return; }\n            //HACK for IE10, does not like literal enum\n            enu = cell.header['enum'];\n            if (self.dispatchEvent('beforebeginedit', {cell: cell, NativeEvent: NativeEvent})) { return false; }\n            self.scrollIntoView(x, y);\n            self.setActiveCell(x, y);\n            adjacentCells = self.getAdjacentCells();\n            if (enu) {\n                self.input = document.createElement('select');\n            } else {\n                self.input = document.createElement(self.attributes.multiLine\n                    ? 'textarea' : 'input');\n            }\n            cell = self.getVisibleCellByIndex(x, y);\n            //HACK on mobile devices sometimes edit can begin without the cell being in view, I don't know how.\n            if (!cell) { return; }\n            if (enu) {\n                // add enums\n                if (typeof enu === 'function') {\n                    enumItems = enu.apply(self.intf, [{cell: cell}]);\n                } else if (Array.isArray(enu)) {\n                    enumItems = enu;\n                }\n                enumItems.forEach(function (e) {\n                    var i = document.createElement('option'),\n                        val,\n                        title;\n                    if (Array.isArray(e)) {\n                        val = e[0];\n                        title = e[1];\n                    } else {\n                        val = e;\n                        title = e;\n                    }\n                    if (val === cell.value) { valueInEnum = true; }\n                    i.value = val;\n                    i.innerHTML = title;\n                    self.input.appendChild(i);\n                });\n                if (!valueInEnum) {\n                    option = document.createElement('option');\n                    option.value = cell.value;\n                    option.innerHTML = cell.value;\n                    self.input.appendChild(option);\n                }\n                self.input.addEventListener('change', function () {\n                    self.endEdit();\n                    self.draw(true);\n                });\n            }\n            // if the user has not prevented the default action, append to the body\n            if (!self.dispatchEvent('appendeditinput', {cell: cell, input:self.input})) { \n                document.body.appendChild(self.input);\n            }\n            self.createInlineStyle(self.input, self.mobile ? 'canvas-datagrid-edit-mobile-input' : 'canvas-datagrid-edit-input');\n            self.input.style.position = 'absolute';\n            self.input.editCell = cell;\n            self.resizeEditInput();\n            self.input.style.zIndex = self.style.editCellZIndex;\n            self.input.style.fontSize = (parseInt(self.style.editCellFontSize, 10) * self.scale) + 'px';\n            self.input.value = [null, undefined].indexOf(cell.value) !== -1 ? '' : cell.value;\n            self.input.focus();\n            self.input.addEventListener('click', self.stopPropagation);\n            self.input.addEventListener('dblclick', self.stopPropagation);\n            self.input.addEventListener('mouseup', self.stopPropagation);\n            self.input.addEventListener('mousedown', self.stopPropagation);\n            self.input.addEventListener('keydown', function (e) {\n                var nx = cell.columnIndex,\n                    ny = cell.rowIndex;\n                // esc\n                if (e.keyCode === 27) {\n                    self.endEdit(true);\n                    self.draw(true);\n                // enter\n                } else if (e.keyCode === 13\n                        && (!self.attributes.multiLine\n                            || (self.attributes.multiLine && e.shiftKey))) {\n                    self.endEdit();\n                    self.draw(true);\n                } else if (e.keyCode === 9) {\n                    e.preventDefault();\n                    if (!self.endEdit()) {\n                        return;\n                    }\n                    if (e.shiftKey) {\n                        nx = adjacentCells.left;\n                    } else {\n                        nx = adjacentCells.right;\n                    }\n                    if (adjacentCells.left === x && e.shiftKey) {\n                        nx = adjacentCells.last;\n                        ny -= 1;\n                    }\n                    if (adjacentCells.right === x && !e.shiftKey) {\n                        nx = adjacentCells.first;\n                        ny += 1;\n                    }\n                    if (ny < 0) {\n                        ny = self.data.length - 1;\n                    }\n                    if (ny > self.data.length - 1) {\n                        ny = 0;\n                    }\n                    self.scrollIntoView(nx, ny);\n                    self.beginEditAt(nx, ny, e);\n                }\n            });\n            self.dispatchEvent('beginedit', {cell: cell, input: self.input});\n        };\n        self.createInlineStyle = function (el, className) {\n            var css = {\n                'canvas-datagrid-context-menu-filter-input': {\n                    height: '19px',\n                    verticalAlign: 'bottom',\n                    marginLeft: '2px',\n                    padding: '0',\n                    background: self.style.contextFilterInputBackground,\n                    color: self.style.contextFilterInputColor,\n                    border: self.style.contextFilterInputBorder,\n                    borderRadius: self.style.contextFilterInputBorderRadius,\n                    lineHeight: 'normal',\n                    fontWeight: 'normal',\n                    fontFamily: self.style.contextFilterInputFontFamily,\n                    fontSize: self.style.contextFilterInputFontSize\n                },\n                'canvas-datagrid-context-menu-filter-button': {\n                    height: '19px',\n                    verticalAlign: 'bottom',\n                    marginLeft: '2px',\n                    padding: '0',\n                    background: self.style.contextMenuBackground,\n                    color: self.style.contextMenuColor,\n                    border: self.style.contextFilterButtonBorder,\n                    borderRadius: self.style.contextFilterButtonBorderRadius,\n                    lineHeight: 'normal',\n                    fontWeight: 'normal',\n                    fontFamily: self.style.contextMenuFilterButtonFontFamily,\n                    fontSize: self.style.contextMenuFilterButtonFontSize\n                },\n                'canvas-datagrid-context-child-arrow': {\n                    cssFloat: 'right',\n                    color: self.style.childContextMenuArrowColor,\n                    fontSize: self.style.contextMenuChildArrowFontSize,\n                    fontFamily: self.style.contextMenuFontFamily,\n                    verticalAlign: 'middle'\n                },\n                'canvas-datagrid-autocomplete': {\n                    fontFamily: self.style.contextMenuFontFamily,\n                    fontSize: self.style.contextMenuFontSize,\n                    background: self.style.contextMenuBackground,\n                    color: self.style.contextMenuColor,\n                    border: self.style.contextMenuBorder,\n                    padding: self.style.contextMenuPadding,\n                    borderRadius: self.style.contextMenuBorderRadius,\n                    opacity: self.style.contextMenuOpacity,\n                    position: 'absolute',\n                    zIndex: 9999,\n                    overflow: 'hidden'\n                },\n                'canvas-datagrid-autocomplete-item': {\n                    background: self.style.contextMenuBackground,\n                    color: self.style.contextMenuColor\n                },\n                'canvas-datagrid-autocomplete-item:hover': {\n                    background: self.style.contextMenuHoverBackground,\n                    color: self.style.contextMenuHoverColor\n                },\n                'canvas-datagrid-canvas': {\n                    position: 'absolute',\n                    zIndex: '-1'\n                },\n                'canvas-datagrid': {\n                    display: 'block'\n                },\n                'canvas-datagrid-control-input': {\n                    position: 'fixed',\n                    top: '-5px',\n                    left: '-5px',\n                    border: 'none',\n                    opacity: '0',\n                    cursor: 'pointer',\n                    width: '1px',\n                    height: '1px',\n                    lineHeight: 'normal',\n                    fontWeight: 'normal',\n                    fontFamily: self.style.contextMenuFontFamily,\n                    fontSize: self.style.contextMenuFontSize\n                },\n                'canvas-datagrid-edit-mobile-input': {\n                    boxSizing: 'content-box',\n                    outline: 'none',\n                    margin: '0',\n                    padding: '0 0 0 0',\n                    lineHeight: 'normal',\n                    fontWeight: 'normal',\n                    fontFamily: self.style.mobileEditFontFamily,\n                    fontSize: self.style.mobileEditFontSize,\n                    border: self.style.editCellBorder,\n                    color: self.style.editCellColor,\n                    background: self.style.editCellBackgroundColor,\n                    appearance: 'none',\n                    webkitAppearance: 'none',\n                    mozAppearance: 'none',\n                    borderRadius: '0'\n                },\n                'canvas-datagrid-edit-input': {\n                    boxSizing: 'content-box',\n                    outline: 'none',\n                    margin: '0',\n                    padding: '0 0 0 ' + self.style.editCellPaddingLeft + 'px',\n                    lineHeight: 'normal',\n                    fontWeight: 'normal',\n                    fontFamily: self.style.editCellFontFamily,\n                    fontSize: self.style.editCellFontSize,\n                    boxShadow: self.style.editCellBoxShadow,\n                    border: self.style.editCellBorder,\n                    color: self.style.editCellColor,\n                    background: self.style.editCellBackgroundColor,\n                    appearance: 'none',\n                    webkitAppearance: 'none',\n                    mozAppearance: 'none',\n                    borderRadius: '0'\n                },\n                'canvas-datagrid-context-menu-item-mobile': {\n                    lineHeight: 'normal',\n                    fontWeight: 'normal',\n                    fontFamily: self.style.contextMenuFontFamily,\n                    fontSize: self.style.contextMenuFontSize,\n                    color: 'inherit',\n                    background: 'inherit',\n                    margin: self.style.contextMenuItemMargin,\n                    borderRadius: self.style.contextMenuItemBorderRadius,\n                    verticalAlign: 'middle'\n                },\n                'canvas-datagrid-context-menu-item': {\n                    lineHeight: 'normal',\n                    fontWeight: 'normal',\n                    fontFamily: self.style.contextMenuFontFamily,\n                    fontSize: self.style.contextMenuFontSize,\n                    color: 'inherit',\n                    background: 'inherit',\n                    margin: self.style.contextMenuItemMargin,\n                    borderRadius: self.style.contextMenuItemBorderRadius,\n                    verticalAlign: 'middle'\n                },\n                'canvas-datagrid-context-menu-item:hover': {\n                    background: self.style.contextMenuHoverBackground,\n                    color: self.style.contextMenuHoverColor\n                },\n                'canvas-datagrid-context-menu-label': {\n                    margin: self.style.contextMenuLabelMargin,\n                    display: self.style.contextMenuLabelDisplay,\n                    minWidth: self.style.contextMenuLabelMinWidth,\n                    maxWidth: self.style.contextMenuLabelMaxWidth\n                },\n                'canvas-datagrid-context-menu-mobile': {\n                    lineHeight: 'normal',\n                    fontWeight: 'normal',\n                    fontFamily: self.style.contextMenuFontFamily,\n                    fontSize: self.style.contextMenuFontSize,\n                    background: self.style.contextMenuBackground,\n                    color: self.style.contextMenuColor,\n                    border: self.style.contextMenuBorder,\n                    padding: self.style.contextMenuPadding,\n                    borderRadius: self.style.contextMenuBorderRadius,\n                    opacity: self.style.contextMenuOpacity,\n                    overflow: 'hidden',\n                    whiteSpace: 'nowrap'\n                },\n                'canvas-datagrid-context-menu': {\n                    lineHeight: 'normal',\n                    fontWeight: 'normal',\n                    fontFamily: self.style.contextMenuFontFamily,\n                    fontSize: self.style.contextMenuFontSize,\n                    background: self.style.contextMenuBackground,\n                    color: self.style.contextMenuColor,\n                    border: self.style.contextMenuBorder,\n                    padding: self.style.contextMenuPadding,\n                    borderRadius: self.style.contextMenuBorderRadius,\n                    opacity: self.style.contextMenuOpacity,\n                    overflow: 'hidden',\n                    whiteSpace: 'nowrap',\n                    cursor: self.style.contextMenuCursor\n                },\n                'canvas-datagrid-invalid-search-regExp': {\n                    background: self.style.contextMenuFilterInvalidExpresion\n                }\n            };\n            if (css[className]) {\n                Object.keys(css[className]).map(function (prop) {\n                    el.style[prop] = css[className][prop];\n                });\n            }\n            return;\n        };\n        self.appendTo = function (e) {\n            self.parentNode = e;\n            self.setDom();\n        };\n        self.setDom = function () {\n            if (self.isChildGrid) {\n                self.parentGrid = self.parentNode.parentGrid;\n                self.ctx = self.parentGrid.context;\n                self.canvas = self.parentGrid.canvas;\n                self.controlInput = self.parentGrid.controlInput;\n                self.eventParent = self.canvas;\n            } else {\n                self.controlInput = self.controlInput || document.createElement('input');\n                self.controlInput.onblur = self.intf.blur;\n                self.createInlineStyle(self.controlInput, 'canvas-datagrid-control-input');\n                self.isChildGrid = false;\n                self.parentDOMNode = self.parentNode;\n                self.parentIsCanvas = /^canvas$/i.test(self.parentDOMNode.tagName);\n                if (self.parentIsCanvas) {\n                    self.canvas = self.parentDOMNode;\n                } else {\n                    self.canvas = document.createElement('canvas');\n                    if (self.intf.createShadowRoot) {\n                        self.parentDOMNode.appendChild(self.canvas);\n                    }\n                }\n                document.body.appendChild(self.controlInput);\n                self.createInlineStyle(self.canvas, 'canvas-datagrid');\n                self.ctx = self.canvas.getContext('2d');\n                self.ctx.textBaseline = 'alphabetic';\n                self.eventParent = self.canvas;\n            }\n            self.parentNodeStyle = self.canvas.style;\n            self.controlInput.setAttribute('readonly', true);\n            self.controlInput.addEventListener('blur', function (e) {\n                if (e.target !== self.canvas) {\n                    self.hasFocus = false;\n                }\n            });\n            self.eventParent.addEventListener('scroll', self.resize, false);\n            self.eventParent.addEventListener('touchstart', self.touchstart, false);\n            self.eventParent.addEventListener('mouseup', self.mouseup, false);\n            self.eventParent.addEventListener('mousedown', self.mousedown, false);\n            self.eventParent.addEventListener('dblclick', self.dblclick, false);\n            self.eventParent.addEventListener('click', self.click, false);\n            self.eventParent.addEventListener('mousemove', self.mousemove);\n            self[self.isChildGrid ? 'parentGrid' : 'eventParent'].addEventListener('wheel', self.scrollWheel, false);\n            self.canvas.addEventListener('contextmenu', self.contextmenuEvent, false);\n            self.controlInput.addEventListener('copy', self.copy);\n            self.controlInput.addEventListener('cut', self.cut);\n            self.controlInput.addEventListener('paste', self.paste);\n            self.controlInput.addEventListener('keypress', self.keypress, false);\n            self.controlInput.addEventListener('keyup', self.keyup, false);\n            self.controlInput.addEventListener('keydown', self.keydown, false);\n            window.addEventListener('resize', self.resize);\n        };\n    };\n});\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./lib/dom.js\n// module id = 8\n// module chunks = 0","/*jslint browser: true, unparam: true, todo: true*/\n/*globals define: true, MutationObserver: false, requestAnimationFrame: false, performance: false, btoa: false*/\ndefine([], function () {\n    'use strict';\n    return function (self) {\n        /**\n         * Converts a integer into a letter A - ZZZZZ...\n         * @memberof canvasDatagrid\n         * @name integerToAlpha\n         * @method\n         * @param {column} n The number to convert.\n         */\n        self.integerToAlpha = function (n) {\n            var ordA = 'a'.charCodeAt(0),\n                ordZ = 'z'.charCodeAt(0),\n                len = ordZ - ordA + 1,\n                s = '';\n            while (n >= 0) {\n                s = String.fromCharCode(n % len + ordA) + s;\n                n = Math.floor(n / len) - 1;\n            }\n            return s;\n        };\n        /**\n         * Inserts a new column before the specified index into the schema.\n         * @tutorial schema\n         * @memberof canvasDatagrid\n         * @name insertColumn\n         * @method\n         * @param {column} c The column to insert into the schema.\n         * @param {number} index The index of the column to insert before.\n         */\n        self.insertColumn = function (c, index) {\n            var s = self.getSchema();\n            if (s.length < index) {\n                throw new Error('Index is beyond the length of the schema.');\n            }\n            self.validateColumn(c, s);\n            s.splice(index, 0, c);\n            self.data.forEach(function (row) {\n                self.applyDefaultValue(row, c);\n            });\n            self.intf.schema = s;\n        };\n        /**\n         * Deletes a column from the schema at the specified index.\n         * @memberof canvasDatagrid\n         * @name deleteColumn\n         * @tutorial schema\n         * @method\n         * @param {number} index The index of the column to delete.\n         */\n        self.deleteColumn = function (index) {\n            var s = self.getSchema();\n            // remove data matching this column name from data\n            self.data.forEach(function (row) {\n                delete row[s[index].name];\n            });\n            s.splice(index, 1);\n            self.intf.schema = s;\n        };\n        /**\n         * Adds a new column into the schema.\n         * @tutorial schema\n         * @memberof canvasDatagrid\n         * @name addColumn\n         * @method\n         * @param {column} c The column to add to the schema.\n         */\n        self.addColumn = function (c) {\n            var s = self.getSchema();\n            self.validateColumn(c, s);\n            s.push(c);\n            self.data.forEach(function (row) {\n                self.applyDefaultValue(row, c);\n            });\n            self.intf.schema = s;\n        };\n        /**\n         * Deletes a row from the dataset at the specified index.\n         * @memberof canvasDatagrid\n         * @name deleteRow\n         * @method\n         * @param {number} index The index of the row to delete.\n         */\n        self.deleteRow = function (index) {\n            self.originalData.splice(index, 1);\n            self.setFilter();\n            self.resize(true);\n        };\n        /**\n         * Inserts a new row into the dataset before the specified index.\n         * @memberof canvasDatagrid\n         * @name insertRow\n         * @method\n         * @param {object} d data.\n         * @param {number} index The index of the row to insert before.\n         */\n        self.insertRow = function (d, index) {\n            if (self.originalData.length < index) {\n                throw new Error('Index is beyond the length of the dataset.');\n            }\n            self.originalData.splice(index, 0, d);\n            self.getSchema().forEach(function (c) {\n                if (d[c.name] === undefined) {\n                    self.applyDefaultValue(self.originalData[index], c);\n                }\n            });\n            self.setFilter();\n            self.resize(true);\n        };\n        /**\n         * Adds a new row into the dataset.\n         * @memberof canvasDatagrid\n         * @name addRow\n         * @method\n         * @param {object} d data.\n         */\n        self.addRow = function (d) {\n            self.originalData.push(d);\n            self.getSchema().forEach(function (c) {\n                if (d[c.name] === undefined) {\n                    self.applyDefaultValue(self.originalData[self.originalData.length - 1], c);\n                }\n            });\n            self.setFilter();\n            self.resize(true);\n        };\n        /**\n         * Sets the height of a given row by index number.\n         * @memberof canvasDatagrid\n         * @name setRowHeight\n         * @method\n         * @param {number} rowIndex The index of the row to set.\n         * @param {number} height Height to set the row to.\n         */\n        self.setRowHeight = function (rowIndex, height) {\n            self.sizes.rows[rowIndex] = height;\n            self.draw(true);\n        };\n        /**\n         * Sets the width of a given column by index number.\n         * @memberof canvasDatagrid\n         * @name setColumnWidth\n         * @method\n         * @param {number} colIndex The index of the column to set.\n         * @param {number} width Width to set the column to.\n         */\n        self.setColumnWidth = function (colIndex, width) {\n            self.sizes.columns[colIndex] = width;\n            self.draw(true);\n        };\n        /**\n         * Removes any changes to the width of the columns due to user or api interaction, setting them back to the schema or style default.\n         * @memberof canvasDatagrid\n         * @name resetColumnWidths\n         * @tutorial schema\n         * @method\n         */\n        self.resetColumnWidths = function () {\n            self.sizes.columns = {};\n            self.draw(true);\n        };\n        /**\n         * Removes any changes to the height of the rows due to user or api interaction, setting them back to the schema or style default.\n         * @memberof canvasDatagrid\n         * @name resetRowHeights\n         * @tutorial schema\n         * @method\n         */\n        self.resetRowHeights = function () {\n            self.sizes.rows = {};\n            self.draw(true);\n        };\n        /**\n         * Sets the value of the filter.\n         * @memberof canvasDatagrid\n         * @name setFilter\n         * @method\n         * @param {string} column Name of the column to filter.\n         * @param {string} value The value to filter for.\n         */\n        self.setFilter = function (column, value) {\n            function applyFilter() {\n                self.refreshFromOrigialData();\n                Object.keys(self.columnFilters).forEach(function (filter) {\n                    var header = self.getHeaderByName(column);\n                    if (!header) {\n                        return;\n                    }\n                    self.currentFilter = header.filter || self.filter(column.type || 'string');\n                    self.data = self.data.filter(function (row) {\n                        return self.currentFilter(row[filter], self.columnFilters[filter]);\n                    });\n                });\n                self.resize();\n                self.draw(true);\n            }\n            if (column === undefined && value === undefined) {\n                self.columnFilters = {};\n                return applyFilter();\n            }\n            if (column && (value === '' || value === undefined)) {\n                delete self.columnFilters[column];\n            } else {\n                self.columnFilters[column] = value;\n            }\n            applyFilter();\n        };\n        /**\n         * Returns the number of pixels to scroll down to line up with row rowIndex.\n         * @memberof canvasDatagrid\n         * @name findRowScrollTop\n         * @method\n         * @param {number} rowIndex The row index of the row to scroll find.\n         */\n        self.findRowScrollTop = function (rowIndex) {\n            if (self.scrollCache.y[rowIndex] === undefined) { throw new RangeError('Row index out of range.'); }\n            return self.scrollCache.y[rowIndex];\n        };\n        /**\n         * Returns the number of pixels to scroll to the left to line up with column columnIndex.\n         * @memberof canvasDatagrid\n         * @name findColumnScrollLeft\n         * @method\n         * @param {number} columnIndex The column index of the column to find.\n         */\n        self.findColumnScrollLeft = function (columnIndex) {\n            var i = Math.max(columnIndex - 1, 0);\n            if (self.scrollCache.x[i] === undefined) { throw new Error('Column index out of range.'); }\n            return self.scrollCache.x[i] - self.getColummnWidth(self.orders.columns[columnIndex]);\n        };\n        /**\n         * Scrolls to the cell at columnIndex x, and rowIndex y.  If you define both rowIndex and columnIndex additional calculations can be made to center the cell using the target cell's height and width.  Defining only one rowIndex or only columnIndex will result in simpler calculations.\n         * @memberof canvasDatagrid\n         * @name gotoCell\n         * @method\n         * @param {number} x The column index of the cell to scroll to.\n         * @param {number} y The row index of the cell to scroll to.\n         * @param {number} [offsetX=0] Percentage offset the cell should be from the left edge (not including headers).  The default is 0, meaning the cell will appear at the left edge. Valid values are 0 through 1. 1 = Left, 0 = Right, 0.5 = Center.\n         * @param {number} [offsetY=0] Percentage offset the cell should be from the top edge (not including headers).  The default is 0, meaning the cell will appear at the top edge. Valid values are 0 through 1. 1 = Bottom, 0 = Top, 0.5 = Center.\n         */\n        self.gotoCell = function (x, y, offsetX, offsetY) {\n            var targetX = x === undefined ? undefined : self.findColumnScrollLeft(x),\n                targetY = y === undefined ? undefined : self.findRowScrollTop(y),\n                cell,\n                sbw = self.scrollBox.width - (self.scrollBox.verticalBarVisible ? self.style.scrollBarWidth : 0),\n                sbh = self.scrollBox.height - (self.scrollBox.horizontalBarVisible ? self.style.scrollBarWidth : 0);\n            offsetX = offsetX === undefined ? 0 : offsetX;\n            offsetY = offsetY === undefined ? 0 : offsetY;\n            targetX -= sbw * offsetX;\n            targetY -= sbh * offsetY;\n            if (x !== undefined && y !== undefined) {\n                self.scrollBox.scrollTo(targetX, targetY);\n                requestAnimationFrame(function () {\n                    cell = self.getVisibleCellByIndex(x, y);\n                    // HACK: just don't offset if the target cell cannot be seen\n                    // TODO: offset does not work on very small grids, not sure why\n                    if (!cell) { return; }\n                    targetX += cell.width * offsetX;\n                    targetY += cell.height * offsetY;\n                    self.scrollBox.scrollTo(targetX, targetY);\n                });\n            } else if (x !== undefined) {\n                self.scrollBox.scrollLeft = targetX;\n            } else if (y !== undefined) {\n                self.scrollBox.scrollTop = targetY;\n            }\n        };\n        /**\n         * Scrolls the row y.\n         * @memberof canvasDatagrid\n         * @name gotoRow\n         * @method\n         * @param {number} y The row index of the cell to scroll to.\n         */\n        self.gotoRow = function (y) {\n            self.gotoCell(0, y);\n        };\n        /**\n         * Scrolls the cell at cell x, row y into view if it is not already.\n         * @memberof canvasDatagrid\n         * @name scrollIntoView\n         * @method\n         * @param {number} x The column index of the cell to scroll into view.\n         * @param {number} y The row index of the cell to scroll into view.\n         * @param {number} [offsetX=0] Percentage offset the cell should be from the left edge (not including headers).  The default is 0, meaning the cell will appear at the left edge. Valid values are 0 through 1. 1 = Left, 0 = Right, 0.5 = Center.\n         * @param {number} [offsetY=0] Percentage offset the cell should be from the top edge (not including headers).  The default is 0, meaning the cell will appear at the top edge. Valid values are 0 through 1. 1 = Bottom, 0 = Top, 0.5 = Center.\n         */\n        self.scrollIntoView = function (x, y, offsetX, offsetY) {\n            if (self.visibleCells.filter(function (cell) {\n                    return (cell.rowIndex === y || y === undefined)\n                        && (cell.columnIndex === x || x === undefined)\n                        && cell.x > 0\n                        && cell.y > 0\n                        && cell.x + cell.width < self.width\n                        && cell.y + cell.height < self.height;\n                }).length === 0) {\n                self.gotoCell(x, y, offsetX, offsetY);\n            }\n        };\n        /**\n         * Sets the active cell. Requires redrawing.\n         * @memberof canvasDatagrid\n         * @name setActiveCell\n         * @method\n         * @param {number} x The column index of the cell to set active.\n         * @param {number} y The row index of the cell to set active.\n         */\n        self.setActiveCell = function (x, y) {\n            if (x < 0) { x = 0; }\n            if (y < 0) { y = 0; }\n            self.activeCell = {\n                rowIndex: y,\n                columnIndex: x\n            };\n        };\n        /**\n         * Removes the selection.\n         * @memberof canvasDatagrid\n         * @name selectNone\n         * @param {boolean} dontDraw Suppress the draw method after the selection change.\n         * @method\n         */\n        self.selectNone = function (dontDraw) {\n            self.selections = [];\n            self.dispatchEvent('selectionchanged', {\n                selectedData: self.getSelectedData(),\n                selections: self.selections,\n                selectionBounds: self.selectionBounds\n            });\n            if (dontDraw) { return; }\n            self.draw();\n        };\n        /**\n         * Selects every visible cell.\n         * @memberof canvasDatagrid\n         * @name selectAll\n         * @param {boolean} dontDraw Suppress the draw method after the selection change.\n         * @method\n         */\n        self.selectAll = function (dontDraw) {\n            self.selectArea({\n                top: 0,\n                left: -1,\n                right: self.getSchema().length - 1,\n                bottom: self.data.length - 1\n            });\n            if (dontDraw) { return; }\n            self.draw();\n        };\n        /**\n         * Returns true if the selected columnIndex is selected on every row.\n         * @memberof canvasDatagrid\n         * @name isColumnSelected\n         * @method\n         * @param {number} columnIndex The column index to check.\n         */\n        self.isColumnSelected = function (columnIndex) {\n            var colIsSelected = true;\n            self.data.forEach(function (row, rowIndex) {\n                if (!self.selections[rowIndex] || self.selections[rowIndex].indexOf(self.orders.columns[columnIndex]) === -1) {\n                    colIsSelected = false;\n                }\n            });\n            return colIsSelected;\n        };\n        /**\n         * Runs the defined method on each selected cell.\n         * @memberof canvasDatagrid\n         * @name forEachSelectedCell\n         * @method\n         * @param {number} fn The function to execute.  The signature of the function is: (data, rowIndex, columnName).\n         * @param {number} expandToRow When true the data in the array is expanded to the entire row.\n         */\n        self.forEachSelectedCell = function (fn, expandToRow) {\n            var d = [], s = expandToRow ? self.getSchema() : self.getVisibleSchema(), l = self.data.length;\n            self.selections.forEach(function (row, index) {\n                if (index === l) { return; }\n                if (row.length === 0) {\n                    d[index] = null;\n                    return;\n                }\n                d[index] = {};\n                row.forEach(function (col) {\n                    if (col === -1 || !s[col]) { return; }\n                    fn(self.data, index, s[col].name);\n                });\n            });\n        };\n        /**\n         * Selects a column.\n         * @memberof canvasDatagrid\n         * @name selectColumn\n         * @method\n         * @param {number} columnIndex The column index to select.\n         * @param {boolean} toggleSelectMode When true, behaves as if you were holding control/command when you clicked the column.\n         * @param {boolean} shift When true, behaves as if you were holding shift when you clicked the column.\n         * @param {boolean} supressSelectionchangedEvent When true, prevents the selectionchanged event from firing.\n         */\n        self.selectColumn = function (columnIndex, ctrl, shift, supressEvent) {\n            var s, e, x;\n            function addCol(i) {\n                self.data.forEach(function (row, rowIndex) {\n                    self.selections[rowIndex] = self.selections[rowIndex] || [];\n                    if (self.selections[rowIndex].indexOf(i) === -1) {\n                        self.selections[rowIndex].push(i);\n                    }\n                });\n            }\n            function removeCol(i) {\n                self.data.forEach(function (row, rowIndex) {\n                    self.selections[rowIndex] = self.selections[rowIndex] || [];\n                    if (self.selections[rowIndex].indexOf(i) !== -1) {\n                        self.selections[rowIndex].splice(self.selections[rowIndex].indexOf(i), 1);\n                    }\n                });\n            }\n            if (shift) {\n                if (!self.activeCell) { return; }\n                s = Math.min(self.activeCell.columnIndex, columnIndex);\n                e = Math.max(self.activeCell.columnIndex, columnIndex);\n                for (x = s; e > x; x += 1) {\n                    addCol(x);\n                }\n            }\n            if (!ctrl && !shift) {\n                self.selections = [];\n                self.activeCell.columnIndex = columnIndex;\n                self.activeCell.rowIndex = self.scrollIndexTop;\n            }\n            if (ctrl && self.isColumnSelected(columnIndex)) {\n                removeCol(columnIndex);\n            } else {\n                addCol(columnIndex);\n            }\n            if (supressEvent) { return; }\n            self.dispatchEvent('selectionchanged', {\n                selectedData: self.getSelectedData(),\n                selections: self.selections,\n                selectionBounds: self.getSelectionBounds()\n            });\n        };\n        /**\n         * Selects a row.\n         * @memberof canvasDatagrid\n         * @name selectRow\n         * @method\n         * @param {number} rowIndex The row index to select.\n         * @param {boolean} ctrl When true, behaves as if you were holding control/command when you clicked the row.\n         * @param {boolean} shift When true, behaves as if you were holding shift when you clicked the row.\n         * @param {boolean} supressSelectionchangedEvent When true, prevents the selectionchanged event from firing.\n         */\n        self.selectRow = function (rowIndex, ctrl, shift, supressEvent) {\n            var x, st, en, s = self.getVisibleSchema();\n            function de() {\n                if (supressEvent) { return; }\n                self.dispatchEvent('selectionchanged', {\n                    selectedData: self.getSelectedData(),\n                    selections: self.selections,\n                    selectionBounds: self.selectionBounds\n                });\n            }\n            function addRow(ri) {\n                self.selections[ri] = [];\n                self.selections[ri].push(-1);\n                s.forEach(function (col, index) {\n                    self.selections[ri].push(self.orders.columns.indexOf(col.index));\n                });\n            }\n            if (self.dragAddToSelection === false || self.dragObject === undefined) {\n                if (self.selections[rowIndex] && self.selections[rowIndex].length - 1 === s.length) {\n                    if (ctrl) {\n                        self.selections[rowIndex] = [];\n                        de();\n                        return;\n                    }\n                }\n            }\n            if (self.dragAddToSelection === true || self.dragObject === undefined) {\n                if (shift && self.dragObject === undefined) {\n                    if (!self.activeCell) { return; }\n                    st = Math.min(self.activeCell.rowIndex, rowIndex);\n                    en = Math.max(self.activeCell.rowIndex, rowIndex);\n                    for (x = st; en >= x; x += 1) {\n                        addRow(x);\n                    }\n                } else {\n                    addRow(rowIndex);\n                }\n            }\n            de();\n        };\n        /**\n         * Collapse a tree grid by row index.\n         * @memberof canvasDatagrid\n         * @name collapseTree\n         * @method\n         * @param {number} index The index of the row to collapse.\n         */\n        self.collapseTree = function (rowIndex) {\n            self.dispatchEvent('collapsetree', {\n                childGrid: self.childGrids[rowIndex],\n                data: self.data[rowIndex],\n                rowIndex: rowIndex\n            });\n            self.openChildren[rowIndex].blur();\n            self.openChildren[rowIndex].dispose();\n            delete self.openChildren[rowIndex];\n            delete self.sizes.trees[rowIndex];\n            delete self.childGrids[rowIndex];\n            self.dispatchEvent('resizerow', {\n                cellHeight: self.style.cellHeight\n            });\n            self.resize(true);\n            self.draw(true);\n        };\n        /**\n         * Expands a tree grid by row index.\n         * @memberof canvasDatagrid\n         * @name expandTree\n         * @method\n         * @param {number} index The index of the row to expand.\n         */\n        self.expandTree = function (rowIndex) {\n            var trArgs = self.args.treeGridAttributes || {},\n                columnHeaderCellHeight = self.getColumnHeaderCellHeight(),\n                rowHeaderCellWidth = self.sizes.columns.cornerCell || self.style.rowHeaderCellWidth,\n                h = self.sizes.trees[rowIndex] || self.style.treeGridHeight,\n                treeGrid;\n            if (!self.childGrids[rowIndex]) {\n                trArgs.debug = self.attributes.debug;\n                trArgs.name = self.attributes.saveAppearance ? self.attributes.name + 'tree' + rowIndex : undefined;\n                trArgs.style = trArgs.style || self.style;\n                trArgs.parentNode = {\n                    parentGrid: self.intf,\n                    nodeType: 'canvas-datagrid-tree',\n                    offsetHeight: h,\n                    offsetWidth: self.width - rowHeaderCellWidth,\n                    header: { width: self.width - rowHeaderCellWidth },\n                    offsetLeft: rowHeaderCellWidth,\n                    offsetTop: columnHeaderCellHeight,\n                    offsetParent: self.intf.parentNode,\n                    parentNode: self.intf.parentNode,\n                    style: 'tree',\n                    data: self.data[rowIndex]\n                };\n                treeGrid = self.createGrid(trArgs);\n                self.childGrids[rowIndex] = treeGrid;\n            }\n            treeGrid = self.childGrids[rowIndex];\n            treeGrid.visible = true;\n            self.dispatchEvent('expandtree', {\n                treeGrid: treeGrid,\n                data: self.data[rowIndex],\n                rowIndex: rowIndex\n            });\n            self.openChildren[rowIndex] = treeGrid;\n            self.sizes.trees[rowIndex] = h;\n            self.dispatchEvent('resizerow', {height: self.style.cellHeight});\n            self.resize(true);\n        };\n        /**\n         * Toggles tree grid open and close by row index.\n         * @memberof canvasDatagrid\n         * @name toggleTree\n         * @method\n         * @param {number} index The index of the row to toggle.\n         */\n        self.toggleTree = function (rowIndex) {\n            var i = self.openChildren[rowIndex];\n            if (i) {\n                return self.collapseTree(rowIndex);\n            }\n            self.expandTree(rowIndex);\n        };\n        /**\n         * Returns a header from the schema by name.\n         * @memberof canvasDatagrid\n         * @name getHeaderByName\n         * @tutorial schema\n         * @method\n         * @returns {header} header with the selected name, or undefined.\n         * @param {string} name The name of the column to resize.\n         */\n        self.getHeaderByName = function (name) {\n            var x, i = self.getSchema();\n            for (x = 0; x < i.length; x += 1) {\n                if (i[x].name === name) {\n                    return i[x];\n                }\n            }\n        };\n        /**\n         * Resizes a column to fit the longest value in the column. Call without a value to resize all columns.\n         * Warning, can be slow on very large record sets (1m records ~3-5 seconds on an i7).\n         * @memberof canvasDatagrid\n         * @name fitColumnToValues\n         * @method\n         * @param {string} name The name of the column to resize.\n         */\n        self.fitColumnToValues = function (name, internal) {\n            if (!self.canvas) { return; }\n            self.sizes.columns[name === 'cornerCell' ? -1 : self.getHeaderByName(name).index]\n                = Math.max(self.findColumnMaxTextLength(name), self.style.minColumnWidth);\n            if (!internal) {\n                self.resize();\n                self.draw(true);\n            }\n        };\n        /**\n         * Checks if a cell is currently visible.\n         * @memberof canvasDatagrid\n         * @name isCellVisible\n         * @overload\n         * @method\n         * @returns {boolean} when true, the cell is visible, when false the cell is not currently drawn.\n         * @param {number} columnIndex The column index of the cell to check.\n         * @param {number} rowIndex The row index of the cell to check.\n         */\n        /**\n         * Checks if a cell is currently visible.\n         * @memberof canvasDatagrid\n         * @name isCellVisible\n         * @method\n         * @returns {boolean} when true, the cell is visible, when false the cell is not currently drawn.\n         * @param {cell} cell The cell to check for.  Alternatively you can pass an object { x: <x-pixel-value>, y: <y-pixel-value> }.\n         */\n        self.isCellVisible = function (cell, rowIndex) {\n            // overload\n            if (rowIndex !== undefined) {\n                return self.visibleCells.filter(function (c) {\n                    return c.columnIndex === cell && c.rowIndex === rowIndex;\n                }).length > 0;\n            }\n            var x, l = self.visibleCells.length;\n            for (x = 0; x < l; x += 1) {\n                if (cell.x === self.visibleCells[x].x && cell.y === self.visibleCells[x].y) {\n                    return true;\n                }\n            }\n            return false;\n        };\n        /**\n         * Sets the order of the data.\n         * @memberof canvasDatagrid\n         * @name order\n         * @method\n         * @returns {cell} cell at the selected location.\n         * @param {number} columnName Name of the column to be sorted.\n         * @param {string} direction `asc` for ascending or `desc` for descending.\n         * @param {function} [sortFunction] When defined, override the default sorting method defined in the column's schema and use this one.\n         * @param {bool} [dontSetStorageData] Don't store this setting for future use.\n         */\n        self.order = function (columnName, direction, sortFunction, dontSetStorageData) {\n            var f,\n                c = self.getSchema().filter(function (col) {\n                    return col.name === columnName;\n                });\n            if (self.dispatchEvent('beforesortcolumn', {name: columnName, direction: direction})) { return; }\n            self.orderBy = columnName;\n            if (!self.data || self.data.length === 0) { return; }\n            if (c.length === 0) {\n                throw new Error('Cannot sort.  No such column name');\n            }\n            f = sortFunction || self.sorters[c[0].type];\n            if (!f && c[0].type !== undefined) {\n                console.warn('Cannot sort type \"%s\" falling back to string sort.', c[0].type);\n            }\n            self.data = self.data.sort(typeof f === 'function' ? f(columnName, direction) : self.sorters.string);\n            self.dispatchEvent('sortcolumn', {name: columnName, direction: direction});\n            self.draw(true);\n            if (dontSetStorageData) { return; }\n            self.setStorageData();\n        };\n        self.isInGrid = function (e) {\n            if (e.x < 0\n                    || e.x > self.width\n                    || e.y < 0\n                    || e.y > self.height) {\n                return false;\n            }\n            return true;\n        };\n        /**\n         * Moves the current selection relative to the its current position.  Note: this method does not move the selected data, just the selection itself.\n         * @memberof canvasDatagrid\n         * @name moveSelection\n         * @method\n         * @param {number} offsetX The number of columns to offset the selection.\n         * @param {number} offsetY The number of rows to offset the selection.\n         */\n        self.moveSelection = function (offsetX, offsetY) {\n            var sel = [];\n            self.selections.forEach(function (row, rowIndex) {\n                sel[rowIndex + offsetY] = [];\n                row.forEach(function (colIndex) {\n                    sel[rowIndex + offsetY].push(colIndex + offsetX);\n                });\n            });\n            self.selections = sel;\n        };\n        /**\n         * Moves data in the provided selection to another position in the grid.  Moving data off the edge of the schema (columns/x) will truncate data.\n         * @memberof canvasDatagrid\n         * @name moveTo\n         * @method\n         * @param {array} sel 2D array representing selected rows and columns.  `canvasDatagrid.selections` is in this format and can be used here.\n         * @param {number} x The column index to start inserting the selection at.\n         * @param {number} y The row index to start inserting the selection at.\n         */\n        self.moveTo = function (sel, x, y) {\n            var d = self.getSelectedData(),\n                s = self.getVisibleSchema(),\n                l = sel.length,\n                xi,\n                maxRowLength = -Infinity,\n                minXi = Infinity,\n                yi = y - 1;\n            sel.forEach(function (row, index) {\n                if (index === l) { return; }\n                if (row.length === 0) { return; }\n                minXi = Math.min(self.getVisibleColumnIndexOf(x), minXi);\n                maxRowLength = Math.max(maxRowLength, row.length);\n                row.forEach(function (colIndex) {\n                    // intentional redef of colIndex\n                    colIndex = self.getVisibleColumnIndexOf(colIndex);\n                    if (!s[colIndex]) { return; }\n                    if (!self.data[index]) { self.data[index] = {}; }\n                    self.data[index][s[colIndex].name] = null;\n                });\n            });\n            sel.forEach(function (row, index) {\n                var lastSourceIndex;\n                yi += 1;\n                xi = self.getVisibleColumnIndexOf(x);\n                row.forEach(function (colIndex, cidx) {\n                    colIndex = self.getVisibleColumnIndexOf(colIndex);\n                    if (cidx > 0) {\n                        // this confusing bit of nonsense figures out\n                        // if the selection has skipped cells\n                        xi += colIndex - lastSourceIndex;\n                    }\n                    lastSourceIndex = colIndex;\n                    if (colIndex === -1\n                            || !s[xi]\n                            || !s[colIndex]\n                            || self.data.length - 1 < yi\n                            || yi < 0) { return; }\n                    if (!self.data[yi]) { self.data[yi] = {}; }\n                    self.data[yi][s[xi].name] = d[index][s[colIndex].name];\n                });\n            });\n        };\n        /**\n         * Checks if a given column is visible.\n         * @memberof canvasDatagrid\n         * @name isColumnVisible\n         * @method\n         * @returns {boolean} When true, the column is visible.\n         * @param {number} columnIndex Column index.\n         */\n        self.isColumnVisible = function (columnIndex) {\n            return self.visibleCells.filter(function (c) {\n                return c.columnIndex === columnIndex;\n            }).length > 0;\n        };\n        /**\n         * Checks if a given row is visible.\n         * @memberof canvasDatagrid\n         * @name isRowVisible\n         * @method\n         * @returns {boolean} When true, the row is visible.\n         * @param {number} rowIndex Row index.\n         */\n        self.isRowVisible = function (rowIndex) {\n            return self.visibleCells.filter(function (c) {\n                return c.rowIndex === rowIndex;\n            }).length > 0;\n        };\n        /**\n         * Gets the cell at columnIndex and rowIndex.\n         * @memberof canvasDatagrid\n         * @name getVisibleCellByIndex\n         * @method\n         * @returns {cell} cell at the selected location.\n         * @param {number} x Column index.\n         * @param {number} y Row index.\n         */\n        self.getVisibleCellByIndex = function (x, y) {\n            return self.visibleCells.filter(function (c) {\n                return c.columnIndex === x && c.rowIndex === y;\n            })[0];\n        };\n        /**\n         * Gets the cell at grid pixel coordinate x and y.  Author's note.  This function ties drawing and events together.  This is a very complex function and is core to the component.\n         * @memberof canvasDatagrid\n         * @name getCellAt\n         * @method\n         * @returns {cell} cell at the selected location.\n         * @param {number} x Number of pixels from the left.\n         * @param {number} y Number of pixels from the top.\n         */\n        self.getCellAt = function (x, y, useTouchScrollZones) {\n            function getBorder(entitiy) {\n                if (entitiy.x + entitiy.width - (self.attributes.borderResizeZone * 0.4) < x && entitiy.x + entitiy.width + (self.attributes.borderResizeZone * 0.6) > x) {\n                    return 'r';\n                }\n                if (entitiy.x - (self.attributes.borderResizeZone * 0.4) < x && entitiy.x + (self.attributes.borderResizeZone * 0.6) > x) {\n                    return 'l';\n                }\n                if (entitiy.y + entitiy.height - (self.attributes.borderResizeZone * 0.4) < y && entitiy.y + entitiy.height + (self.attributes.borderResizeZone * 0.6) > y) {\n                    return 'b';\n                }\n                if (entitiy.y - (self.attributes.borderResizeZone * 0.4) < y && entitiy.y + (self.attributes.borderResizeZone * 0.6) > y) {\n                    return 't';\n                }\n            }\n            if (!self.visibleCells) { return; }\n            var border,\n                tsz = useTouchScrollZones ? self.attributes.touchScrollZone : 0,\n                moveMode = self.attributes.borderDragBehavior === 'move',\n                i,\n                l = self.visibleCells.length,\n                moveBorder,\n                xBorderBehavior = moveMode ? self.cursorGrab : 'ew-resize',\n                yBorderBehavior = moveMode ? self.cursorGrab : 'ns-resize',\n                cell,\n                entitiy;\n            if (!self.visibleCells || !self.visibleCells.length) { return; }\n            self.hasFocus = true;\n            if (!(y < self.height\n                && y > 0\n                && x < self.width\n                && x > 0)) {\n                self.hasFocus = false;\n                return {\n                    dragContext: 'inherit',\n                    context: 'inherit'\n                };\n            }\n            for (i = 0; i < l; i += 1) {\n                cell = self.visibleCells[i];\n                // interactive dimensions of the cell.  used for touch \"over size\" zones\n                entitiy = {\n                    x: cell.x,\n                    y: cell.y,\n                    height: cell.height,\n                    width: cell.width\n                };\n                if (useTouchScrollZones && /(vertical|horizontal)-scroll-/.test(cell.style)) {\n                    entitiy.x -= tsz;\n                    entitiy.y -= tsz;\n                    entitiy.height += tsz;\n                    entitiy.width += tsz;\n                }\n                if (entitiy.x - self.style.cellBorderWidth < x\n                        && entitiy.x + entitiy.width + self.style.cellBorderWidth > x\n                        && entitiy.y - self.style.cellBorderWidth < y\n                        && entitiy.y + entitiy.height + self.style.cellBorderWidth > y) {\n                    if (/frozen-row-marker/.test(cell.style)) {\n                        cell.dragContext = cell.style;\n                        cell.context = 'row-resize';\n                        return cell;\n                    }\n                    if (/frozen-column-marker/.test(cell.style)) {\n                        cell.dragContext = cell.style;\n                        cell.context = 'col-resize';\n                        return cell;\n                    }\n                    if (/selection-handle-/.test(cell.style)) {\n                        cell.dragContext = cell.style;\n                        cell.context = 'crosshair';\n                        return cell;\n                    }\n                    if (/vertical-scroll-(bar|box)/.test(cell.style)) {\n                        cell.dragContext = 'vertical-scroll-box';\n                        cell.context = 'vertical-scroll-box';\n                        cell.isScrollBar = true;\n                        cell.isVerticalScrollBar = true;\n                        if (y > self.scrollBox.box.v.y + self.scrollBox.scrollBoxHeight) {\n                            cell.dragContext = 'vertical-scroll-bottom';\n                            cell.context = 'vertical-scroll-bottom';\n                        } else if (y < self.scrollBox.box.v.y) {\n                            cell.dragContext = 'vertical-scroll-top';\n                            cell.context = 'vertical-scroll-top';\n                        }\n                        self.cursor = 'default';\n                        return cell;\n                    }\n                    if (/horizontal-scroll-(bar|box)/.test(cell.style)) {\n                        cell.dragContext = 'horizontal-scroll-box';\n                        cell.context = 'horizontal-scroll-box';\n                        cell.isScrollBar = true;\n                        cell.isHorizontalScrollBar = true;\n                        if (x > self.scrollBox.box.h.x + self.scrollBox.scrollBoxWidth) {\n                            cell.dragContext = 'horizontal-scroll-right';\n                            cell.context = 'horizontal-scroll-right';\n                        } else if (x < self.scrollBox.box.h.x) {\n                            cell.dragContext = 'horizontal-scroll-left';\n                            cell.context = 'horizontal-scroll-left';\n                        }\n                        self.cursor = 'default';\n                        return cell;\n                    }\n                    border = getBorder(entitiy);\n                    // check if the border of this cell is the border of the selection and if so show move cursor in move mode\n                    moveBorder = moveMode && cell.selectionBorder && cell.selectionBorder.indexOf(border) !== -1;\n                    if (['l', 'r'].indexOf(border) !== -1\n                            && (self.attributes.allowColumnResize || moveBorder)\n                            && ((self.attributes.allowColumnResizeFromCell && cell.isNormal) || !cell.isNormal || moveBorder)\n                            && ((self.attributes.allowRowHeaderResize && (cell.isRowHeader || cell.isCorner)) || !(cell.isRowHeader && cell.isCorner))) {\n                        if (((cell.isColumnHeader || cell.isCorner) || (self.attributes.allowColumnResizeFromCell && cell.isNormal)) && border === 'r') {\n                            cell.context = 'ew-resize';\n                            cell.dragContext = 'ew-resize';\n                            return cell;\n                        }\n                        if (!(cell.isColumnHeader || cell.isCorner) && moveBorder) {\n                            cell.context = xBorderBehavior;\n                            cell.dragContext = border + '-move';\n                            return cell;\n                        }\n                    }\n                    if (['t', 'b'].indexOf(border) !== -1\n                            && cell.rowIndex > -1\n                            && (self.attributes.allowRowResize || moveBorder)\n                            && ((self.attributes.allowRowResizeFromCell && cell.isNormal) || !cell.isNormal || moveBorder)\n                            && !cell.isColumnHeader) {\n                        if (((cell.isRowHeader || cell.isCorner) || (self.attributes.allowRowResizeFromCell && cell.isNormal)) && border === 'b') {\n                            cell.context = 'ns-resize';\n                            cell.dragContext = 'ns-resize';\n                            return cell;\n                        }\n                        if (!(cell.isRowHeader || cell.isCorner) && moveBorder) {\n                            cell.context = yBorderBehavior;\n                            cell.dragContext = border + '-move';\n                            return cell;\n                        }\n                    }\n                    if (cell.style === 'columnHeaderCell') {\n                        cell.context = 'cell';\n                        cell.dragContext = 'column-reorder';\n                        return cell;\n                    }\n                    if (cell.style === 'rowHeaderCell') {\n                        if ((self.attributes.rowGrabZoneSize + (cell.y - self.style.cellBorderWidth) < y)\n                                || !self.attributes.allowRowReordering) {\n                            cell.dragContext = 'cell';\n                            cell.context = 'cell';\n                        } else {\n                            cell.context = self.cursorGrab;\n                            cell.dragContext = 'row-reorder';\n                        }\n                        return cell;\n                    }\n                    if (cell.isGrid) {\n                        self.hasFocus = false;\n                        cell.dragContext = 'cell-grid';\n                        cell.context = 'cell-grid';\n                        return cell;\n                    }\n                    if (cell.style === 'tree-grid') {\n                        self.hasFocus = false;\n                        cell.dragContext = 'tree';\n                        cell.context = 'tree';\n                        return cell;\n                    }\n                    cell.dragContext = 'cell';\n                    cell.context = 'cell';\n                    return cell;\n                }\n            }\n            self.hasFocus = true;\n            self.cursor = 'default';\n            return {\n                dragContext: 'background',\n                context: 'background',\n                style: 'background',\n                isBackground: true\n            };\n        };\n        /**\n         * Gets the bounds of current selection. \n         * @returns {rect} selection.\n         * @memberof canvasDatagrid\n         * @name getSelectionBounds\n         * @method\n         */\n        self.getSelectionBounds = function () {\n            var low = {x: Infinity, y: Infinity},\n                high = {x: -Infinity, y: -Infinity};\n            self.selections.forEach(function (row, rowIndex) {\n                var maxCol, minCol;\n                low.y = rowIndex < low.y ? rowIndex : low.y;\n                high.y = rowIndex > high.y ? rowIndex : high.y;\n                maxCol = Math.max.apply(null, row);\n                minCol = Math.min.apply(null, row);\n                low.x = minCol < low.x ? minCol : low.x;\n                high.x = maxCol > high.x ? maxCol : high.x;\n            });\n            return {\n                top: low.y,\n                left: low.x,\n                bottom: high.y,\n                right: high.x\n            };\n        };\n        /**\n         * Returns an auto generated schema based on data structure.\n         * @memberof canvasDatagrid\n         * @name getSchemaFromData\n         * @method\n         * @tutorial schema\n         * @returns {schema} schema A schema based on the first item in the data array.\n         */\n        self.getSchemaFromData = function (d) {\n            d = d || self.data;\n            return Object.keys(d[0] || {' ': ''}).map(function mapEachSchemaColumn(key, index) {\n                var type = self.getBestGuessDataType(key, d),\n                    i = {\n                        name: key,\n                        title: isNaN(parseInt(key, 10)) ? key : self.integerToAlpha(key).toUpperCase(),\n                        index: index,\n                        type: type,\n                        filter: self.filter(type)\n                    };\n                if (self.storedSettings\n                        && self.storedSettings.visibility\n                        && self.storedSettings.visibility[i.name] !== undefined) {\n                    i.hidden = !self.storedSettings.visibility[i.name];\n                }\n                return i;\n            });\n        };\n        /**\n         * Clears the change log grid.changes that keeps track of changes to the data set.\n         * This does not undo changes or alter data it is simply a convince array to keep\n         * track of changes made to the data since last this method was called.\n         * @memberof canvasDatagrid\n         * @name clearChangeLog\n         * @method\n         */\n        self.clearChangeLog = function () {\n            self.changes = [];\n        };\n        /**\n         * Selects an area of the grid.\n         * @memberof canvasDatagrid\n         * @name selectArea\n         * @method\n         * @param {rect} bounds A rect object representing the selected values.\n         */\n        self.selectArea = function (bounds, ctrl) {\n            self.selectionBounds = bounds || self.selectionBounds;\n            var ev, x, y, s = self.getSchema();\n            if (!ctrl) {\n                self.selections = [];\n            }\n            if (self.selectionBounds.top < -1\n                    || self.selectionBounds.bottom > self.data.length\n                    || self.selectionBounds.left < -1\n                    || self.selectionBounds.right > s.length) {\n                throw new Error('Impossible selection area');\n            }\n            for (x = self.selectionBounds.top; x <= self.selectionBounds.bottom; x += 1) {\n                self.selections[x] = [];\n                for (y = self.selectionBounds.left; y <= self.selectionBounds.right; y += 1) {\n                    if (self.selections[x].indexOf(y) === -1) {\n                        self.selections[x].push(y);\n                    }\n                }\n            }\n            ev = {\n                selections: self.selections,\n                selectionBounds: self.selectionBounds\n            };\n            Object.defineProperty(ev, 'selectedData', {\n                get: function () {\n                    return self.getSelectedData();\n                }\n            });\n            self.dispatchEvent('selectionchanged', ev);\n        };\n        /**\n         * Returns the maximum text width for a given column by column name.\n         * @memberof canvasDatagrid\n         * @name findColumnMaxTextLength\n         * @method\n         * @returns {number} The number of pixels wide the maximum width value in the selected column.\n         * @param {string} name The name of the column to calculate the value's width of.\n         */\n        self.findColumnMaxTextLength = function (name) {\n            var m = -Infinity;\n            if (name === 'cornerCell') {\n                self.ctx.font = self.style.rowHeaderCellFont;\n                return self.ctx.measureText((self.data.length + (self.attributes.showNewRow ? 1 : 0)).toString()).width\n                    + self.style.autosizePadding + self.style.autosizeHeaderCellPadding\n                    + self.style.rowHeaderCellPaddingRight\n                    + self.style.rowHeaderCellPaddingLeft\n                    + (self.attributes.tree ? self.style.treeArrowWidth\n                        + self.style.treeArrowMarginLeft + self.style.treeArrowMarginRight : 0);\n            }\n            self.getSchema().forEach(function (col) {\n                if (col.name !== name) { return; }\n                self.ctx.font = self.style.columnHeaderCellFont;\n                var t = self.ctx.measureText(col.title || col.name).width\n                    + self.style.headerCellPaddingRight\n                    + self.style.headerCellPaddingLeft;\n                m = t > m ? t : m;\n            });\n            self.data.forEach(function (row) {\n                self.ctx.font = self.style.cellFont;\n                var t = self.ctx.measureText(row[name]).width\n                    + self.style.cellPaddingRight\n                    + self.style.cellPaddingLeft + self.style.cellAutoResizePadding;\n                m = t > m ? t : m;\n            });\n            return m;\n        };\n        /**\n         * Gets the total width of all header columns.\n         * @memberof canvasDatagrid\n         * @name getHeaderWidth\n         * @method\n         */\n        self.getHeaderWidth = function () {\n            return self.getVisibleSchema().reduce(function (total, header) {\n                return total + (header.width || self.style.cellWidth);\n            }, 0);\n        };\n        /**\n         * Gets the height of a row by index.\n         * @memberof canvasDatagrid\n         * @name getRowHeight\n         * @method\n         * @param {number} rowIndex The row index to lookup.\n         */\n        self.getRowHeight = function (rowIndex) {\n            return ((self.sizes.rows[rowIndex]\n                    || self.style.cellHeight) * self.scale);\n        };\n        /**\n         * Gets the width of a column by index.\n         * @memberof canvasDatagrid\n         * @name getColummnWidth\n         * @method\n         * @param {number} columnIndex The column index to lookup.\n         */\n        self.getColummnWidth = function (columnIndex) {\n            return ((self.sizes.columns[columnIndex]\n                    || self.getSchema()[columnIndex].width\n                    || self.style.cellWidth) * self.scale);\n        };\n        self.formatters.string = function cellFormatterString(e) {\n            return e.cell.value !== undefined ? e.cell.value : '';\n        };\n        self.formatters.rowHeaderCell = self.formatters.string;\n        self.formatters.headerCell = self.formatters.string;\n        self.formatters.number = self.formatters.string;\n        self.formatters.int = self.formatters.string;\n        self.formatters.html = self.formatters.string;\n        self.sorters.string = function (columnName, direction) {\n            var asc = direction === 'asc';\n            return function (a, b) {\n                if (a[columnName] === undefined || a[columnName] === null) {\n                    return 1;\n                }\n                if (b[columnName] === undefined || b[columnName] === null) {\n                    return 0;\n                }\n                if (asc) {\n                    if (!a[columnName].localeCompare) { return 1; }\n                    return a[columnName].localeCompare(b[columnName]);\n                }\n                if (!b[columnName].localeCompare) { return 1; }\n                return b[columnName].localeCompare(a[columnName]);\n            };\n        };\n        self.sorters.number = function (columnName, direction) {\n            var asc = direction === 'asc';\n            return function (a, b) {\n                if (asc) {\n                    return a[columnName] - b[columnName];\n                }\n                return b[columnName] - a[columnName];\n            };\n        };\n        self.sorters.date = function (columnName, direction) {\n            var asc = direction === 'asc';\n            return function (a, b) {\n                if (asc) {\n                    return new Date(a[columnName]).getTime()\n                        - new Date(b[columnName]).getTime();\n                }\n                return new Date(b[columnName]).getTime()\n                        - new Date(a[columnName]).getTime();\n            };\n        };\n    };\n});\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./lib/publicMethods.js\n// module id = 9\n// module chunks = 0"],"sourceRoot":""}